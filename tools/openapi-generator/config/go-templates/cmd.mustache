{{>partial_header}}
package {{packageName}}

import (
	"context"
	"errors"
	"encoding/hex"
	"encoding/json"
	"fmt"
	"strings"
	"io"
	"os"
	"text/template"
	"time"

	"github.com/briandowns/spinner"
	"github.com/spf13/afero"
	"github.com/spf13/cobra"
	"{{sdkImport}}/admin"
	"{{gitHost}}/{{gitUserId}}/{{gitRepoId}}/atlascli/internal/config"
	"{{gitHost}}/{{gitUserId}}/{{gitRepoId}}/atlascli/internal/cli"
)

{{#operations}}
{{#operation}}
type {{#lambda.camelcase}}{{operationId}}{{/lambda.camelcase}}Opts struct {
	client *admin.APIClient
	{{#allParams}}
	{{^isBodyParam}}{{paramName}} {{{dataType}}}{{/isBodyParam}}
	{{/allParams}}
	{{#bodyParam}}
	filename string
	fs afero.Fs
	{{/bodyParam}}
	{{#returnType}}
	format string
	tmpl *template.Template
	{{#returnProperty}}
	resp {{#isFile}}io.ReadCloser{{/isFile}}{{#isPrimitiveType}}{{dataType}}{{/isPrimitiveType}}{{^isFile}}{{^isPrimitiveType}}{{#isArray}}[]{{/isArray}}{{^isArray}}*{{/isArray}}admin.{{complexType}}{{/isPrimitiveType}}{{/isFile}}
	{{/returnProperty}}
	{{/returnType}}
	{{#vendorExtensions.x-watcher-operation}}
	watchEnabled bool
	watchTimeout string
	wt time.Duration
	{{/vendorExtensions.x-watcher-operation}}
}


func (opts *{{#lambda.camelcase}}{{operationId}}{{/lambda.camelcase}}Opts) preRun() (err error) {
	if opts.client, err = newClientWithAuth(config.UserAgent, config.Default()); err != nil {
		return err
	}

	{{#allParams}}{{#vendorExtensions.x-group-id}}
	if opts.{{paramName}} == "" {
		opts.{{paramName}} = config.ProjectID()
	}
	if opts.{{paramName}} == "" {
		return errors.New(`required flag(s) "{{#vendorExtensions.x-flag-name}}{{.}}{{/vendorExtensions.x-flag-name}}{{^vendorExtensions.x-flag-name}}{{paramName}}{{/vendorExtensions.x-flag-name}}" not set`)
	}
	b, errDecode := hex.DecodeString(opts.{{paramName}})
	if errDecode != nil || len(b) != 12 {
		return fmt.Errorf("the provided value '%s' is not a valid ID", opts.{{paramName}})
	}
	{{/vendorExtensions.x-group-id}}{{#vendorExtensions.x-org-id}}
	if opts.{{paramName}} == "" {
		opts.{{paramName}} = config.OrgID()
	}
	if opts.{{paramName}} == "" {
		return errors.New(`required flag(s) "{{#vendorExtensions.x-flag-name}}{{.}}{{/vendorExtensions.x-flag-name}}{{^vendorExtensions.x-flag-name}}{{paramName}}{{/vendorExtensions.x-flag-name}}" not set`)
	}
	b, errDecode := hex.DecodeString(opts.{{paramName}})
	if errDecode != nil || len(b) != 12 {
		return fmt.Errorf("the provided value '%s' is not a valid ID", opts.{{paramName}})
	}
	{{/vendorExtensions.x-org-id}}{{/allParams}}

	{{#returnType}}
	if opts.format != "" {
		if opts.tmpl, err = template.New("").Parse(strings.ReplaceAll(opts.format, "\\n", "\n") + "\n"); err != nil {
			return err
		}
	}
	{{/returnType}}
	{{#vendorExtensions.x-watcher-operation}}
	if opts.wt, err = time.ParseDuration(opts.watchTimeout); err != nil {
		return err
	}
	{{/vendorExtensions.x-watcher-operation}}

	return nil
}

{{#bodyParam}}
func (opts *{{#lambda.camelcase}}{{operationId}}{{/lambda.camelcase}}Opts) readData(r io.Reader) (*{{#isArray}}[]{{/isArray}}admin.{{baseType}}, error) {
	var out *{{#isArray}}[]{{/isArray}}admin.{{baseType}}
	
	var buf []byte
	var err error
	if opts.filename == "" {
		buf, err = io.ReadAll(r)
	} else {
		if exists, errExists := afero.Exists(opts.fs, opts.filename); !exists || errExists != nil {
			return nil, fmt.Errorf("file not found: %s", opts.filename)
		}
		buf, err = afero.ReadFile(opts.fs, opts.filename)
	}
	if err != nil {
		return nil, err
	}
	if err = json.Unmarshal(buf, &out); err != nil {
		return nil, err
	}
	return out, nil
}
{{/bodyParam}}

func (opts *{{#lambda.camelcase}}{{operationId}}{{/lambda.camelcase}}Opts) run(ctx context.Context, {{^bodyParam}}_{{/bodyParam}}{{#bodyParam}}r{{/bodyParam}} io.Reader) error {
	{{#bodyParam}}
	data, errData := opts.readData(r)
	if errData != nil {
		return errData
	}
	{{/bodyParam}}
	{{#allParams}}{{#isDateTime}}
	var {{paramName}} *time.Time
	var err{{#lambda.titlecase}}{{paramName}}{{/lambda.titlecase}} error
	if opts.{{paramName}} != "" {
		*{{paramName}}, err{{#lambda.titlecase}}{{paramName}}{{/lambda.titlecase}} = time.Parse(time.RFC3339, opts.{{paramName}})
		if err{{#lambda.titlecase}}{{paramName}}{{/lambda.titlecase}} != nil {
			return err{{#lambda.titlecase}}{{paramName}}{{/lambda.titlecase}}
		}
	}
	{{/isDateTime}}{{/allParams}}
	params := &admin.{{operationId}}ApiParams{
		{{#allParams}}
		{{^isBodyParam}}{{#lambda.titlecase}}{{paramName}}{{/lambda.titlecase}}: {{^isPathParam}}{{^isDateTime}}&{{/isDateTime}}{{/isPathParam}}{{^isDateTime}}opts.{{/isDateTime}}{{paramName}},{{/isBodyParam}}
		{{/allParams}}{{#bodyParam}}
		{{#lambda.titlecase}}{{paramName}}{{/lambda.titlecase}}: data,
		{{/bodyParam}}
	}

	var err error
	{{#returnType}}opts.resp, {{/returnType}}_, err = opts.client.{{classname}}.{{operationId}}WithParams(ctx, params).Execute()
	return err
}

{{#vendorExtensions.x-watcher-operation}}
func (opts *{{#lambda.camelcase}}{{operationId}}{{/lambda.camelcase}}Opts) watch(ctx context.Context) error {
	if !opts.watchEnabled {
		return nil
	}

	spin := spinner.New(spinner.CharSets[9], 100 * time.Millisecond)
	spin.Start()
	defer spin.Stop()
	
	watchCtx, cancel := context.WithTimeout(ctx, opts.wt)
	defer cancel()
	for {
		select {
			case <-watchCtx.Done():
				return watchCtx.Err()
			default:
				params := &admin.{{#lambda.titlecase}}{{.}}{{/lambda.titlecase}}ApiParams{
					{{#vendorExtensions.x-watcher-params.0}}
					{{key}}: *opts.resp.{{value}},
					{{/vendorExtensions.x-watcher-params.0}}
					{{#vendorExtensions.x-watcher-params.1}}
					{{key}}: *opts.resp.{{value}},
					{{/vendorExtensions.x-watcher-params.1}}
					{{#vendorExtensions.x-watcher-params.2}}
					{{key}}: *opts.resp.{{value}},
					{{/vendorExtensions.x-watcher-params.2}}
				}
				resp, _, err := opts.client.{{classname}}.{{#lambda.titlecase}}{{.}}{{/lambda.titlecase}}WithParams(ctx, params).Execute()
				if err != nil {
					return err
				}
				if resp.{{vendorExtensions.x-watcher-return-property}} != nil && *resp.{{vendorExtensions.x-watcher-return-property}} == "{{vendorExtensions.x-watcher-state}}" {
					return nil
				}
				time.Sleep(4 * time.Second)
		}
	}
}
{{/vendorExtensions.x-watcher-operation}}

func (opts *{{#lambda.camelcase}}{{operationId}}{{/lambda.camelcase}}Opts) postRun({{#vendorExtensions.x-watcher-operation}}ctx{{/vendorExtensions.x-watcher-operation}}{{^vendorExtensions.x-watcher-operation}}_{{/vendorExtensions.x-watcher-operation}} context.Context, {{^returnType}}_{{/returnType}}{{#returnType}}w{{/returnType}} io.Writer) error {
	{{#vendorExtensions.x-watcher-operation}}
	if err := opts.watch(ctx); err != nil {
		return err
	}
	{{/vendorExtensions.x-watcher-operation}}
	
	{{^returnType}}
	return nil
	{{/returnType}}
	{{#returnType}}
	prettyJSON, errJson := json.MarshalIndent(opts.resp, "", " ")
	if errJson != nil {
		return errJson
	}

	if opts.format == "" {
		_, err := fmt.Fprintln(w, string(prettyJSON))
		return err
	}

	var parsedJSON interface{}
	if err := json.Unmarshal([]byte(prettyJSON), &parsedJSON); err != nil {
		return err
	}

	return opts.tmpl.Execute(w, parsedJSON)
	{{/returnType}}
}

func {{#lambda.camelcase}}{{operationId}}{{/lambda.camelcase}}Builder() *cobra.Command {
	opts := {{#lambda.camelcase}}{{operationId}}{{/lambda.camelcase}}Opts{
		{{#bodyParam}}
		fs: afero.NewOsFs(),
		{{/bodyParam}}
	}
	cmd := &cobra.Command{
		Use: "{{#lambda.camelcase}}{{operationId}}{{/lambda.camelcase}}",
		Short: "{{ summary }}",
		PreRunE: func(cmd *cobra.Command, args []string) error {
			return opts.preRun()
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			return opts.run(cmd.Context(), cmd.InOrStdin())
		},
		PostRunE: func(cmd *cobra.Command, args []string) error {
			return opts.postRun(cmd.Context(), cmd.OutOrStdout())
		},
	}
{{#allParams}}
	{{^isBodyParam}}cmd.Flags().{{#isArray}}{{#lambda.titlecase}}{{baseType}}{{/lambda.titlecase}}Slice{{/isArray}}{{^isArray}}{{#lambda.titlecase}}{{dataType}}{{/lambda.titlecase}}{{/isArray}}Var(&opts.{{paramName}}, "{{#vendorExtensions.x-flag-name}}{{.}}{{/vendorExtensions.x-flag-name}}{{^vendorExtensions.x-flag-name}}{{paramName}}{{/vendorExtensions.x-flag-name}}", {{#isDateTime}}""{{/isDateTime}}{{#isString}}"{{/isString}}{{^defaultValue}}{{#isArray}}nil{{/isArray}}{{#isNumeric}}0{{/isNumeric}}{{#isInteger}}0{{/isInteger}}{{#isShort}}0{{/isShort}}{{#isLong}}0{{/isLong}}{{#isUnboundedInteger}}0{{/isUnboundedInteger}}{{#isNumber}}0{{/isNumber}}{{#isFloat}}0{{/isFloat}}{{#isDouble}}0{{/isDouble}}{{#isDecimal}}0{{/isDecimal}}{{#isBoolean}}false{{/isBoolean}}{{/defaultValue}}{{defaultValue}}{{#isString}}"{{/isString}}, `{{unescapedDescription}}`){{/isBodyParam}}
{{/allParams}}
{{#bodyParam}}
	cmd.Flags().StringVarP(&opts.filename, "file", "f", "", "Path to an optional JSON configuration file if not passed stdin is expected")
{{/bodyParam}}
{{#allParams}}{{^isBodyParam}}{{^vendorExtensions.x-org-id}}{{^vendorExtensions.x-group-id}}{{#required}}
	_ = cmd.MarkFlagRequired("{{#vendorExtensions.x-flag-name}}{{.}}{{/vendorExtensions.x-flag-name}}{{^vendorExtensions.x-flag-name}}{{paramName}}{{/vendorExtensions.x-flag-name}}"){{/required}}{{/vendorExtensions.x-group-id}}{{/vendorExtensions.x-org-id}}{{/isBodyParam}}{{/allParams}}
	{{#returnType}}
	cmd.Flags().StringVar(&opts.format, "format", "", "Format of the output")
	{{/returnType}}
	{{#vendorExtensions.x-watcher-operation}}
	cmd.Flags().BoolVarP(&opts.watchEnabled, "watch", "w", false, "{{vendorExtensions.x-watcher-description}}")
	cmd.Flags().StringVar(&opts.watchTimeout, "timeout", "5m", "{{vendorExtensions.x-watcher-timeout-description}}")
	{{/vendorExtensions.x-watcher-operation}}
	return cmd
}
{{/operation}}
{{/operations}}

func {{#lambda.camelcase}}{{baseName}}{{/lambda.camelcase}}Builder() *cobra.Command {
{{#operations}}
{{#operation}}
{{#-first}}
	const use = "{{#lambda.camelcase}}{{baseName}}{{/lambda.camelcase}}"
	cmd := &cobra.Command{
		Use:     use,
		Short:   `{{#tags}}{{#-first}}{{description}}{{/-first}}{{/tags}}`,
		Aliases: cli.GenerateAliases(use),
	}
	cmd.AddCommand(
{{/-first}}
		{{#lambda.camelcase}}{{operationId}}{{/lambda.camelcase}}Builder(),
{{/operation}}
{{/operations}}
	)
	return cmd
}
