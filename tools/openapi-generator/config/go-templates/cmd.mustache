{{>partial_header}}
package {{packageName}}

import (
	"context"
	"os"
	"io"
	"time"
	"encoding/json"
	"fmt"

	"github.com/spf13/afero"
	"github.com/spf13/cobra"
	"{{vendorExtensions.x-sdk-import}}"
	"{{gitHost}}/{{gitUserId}}/{{gitRepoId}}/internal/config"
)

{{#operations}}
{{#operation}}
type {{#lambda.camelcase}}{{operationId}}{{/lambda.camelcase}}Opts struct {
	client *admin.APIClient
	{{#allParams}}
	{{^isBodyParam}}{{paramName}} {{{dataType}}}{{/isBodyParam}}
	{{/allParams}}
	{{#bodyParam}}
	filename string
	fs afero.Fs
	{{/bodyParam}}
}

func (opts *{{#lambda.camelcase}}{{operationId}}{{/lambda.camelcase}}Opts) preRun() (err error) {
	opts.client, err = newClientWithAuth()
	return err
}

{{#bodyParam}}
func (opts *{{#lambda.camelcase}}{{operationId}}{{/lambda.camelcase}}Opts) readData() (*{{#isArray}}[]{{/isArray}}admin.{{baseType}}, error) {
	var out *{{#isArray}}[]{{/isArray}}admin.{{baseType}}
	
	var buf []byte
	var err error
	if opts.filename == "" {
		buf, err = io.ReadAll(os.Stdin)
	} else {
		if exists, errExists := afero.Exists(opts.fs, opts.filename); !exists || errExists != nil {
			return nil, fmt.Errorf("file not found: %s", opts.filename)
		}
		buf, err = afero.ReadFile(opts.fs, opts.filename)
	}
	if err != nil {
		return nil, err
	}
	if err = json.Unmarshal(buf, &out); err != nil {
		return nil, err
	}
	return out, nil
}
{{/bodyParam}}

func (opts *{{#lambda.camelcase}}{{operationId}}{{/lambda.camelcase}}Opts) run(ctx context.Context, {{^returnType}}_{{/returnType}}{{#returnType}}w{{/returnType}} io.Writer) error {
	{{#bodyParam}}
	data, errData := opts.readData()
	if errData != nil {
		return errData
	}
	{{/bodyParam}}
	{{#allParams}}{{#isDateTime}}
	var {{paramName}} *time.Time
	var err{{#lambda.titlecase}}{{paramName}}{{/lambda.titlecase}} error
	if opts.{{paramName}} != "" {
		*{{paramName}}, err{{#lambda.titlecase}}{{paramName}}{{/lambda.titlecase}} = time.Parse(time.RFC3339, opts.{{paramName}})
		if err{{#lambda.titlecase}}{{paramName}}{{/lambda.titlecase}} != nil {
			return err{{#lambda.titlecase}}{{paramName}}{{/lambda.titlecase}}
		}
	}
	{{/isDateTime}}
	{{#vendorExtensions.x-group-id}}
	if opts.groupId == "" {
		opts.groupId = config.ProjectID()
	}
	{{/vendorExtensions.x-group-id}}
	{{#vendorExtensions.x-org-id}}
	if opts.orgId == "" {
		opts.orgId = config.OrgID()
	}
	{{/vendorExtensions.x-org-id}}{{/allParams}}
	params := &admin.{{operationId}}ApiParams{
		{{#allParams}}
		{{^isBodyParam}}{{#lambda.titlecase}}{{paramName}}{{/lambda.titlecase}}: {{^isPathParam}}{{^isDateTime}}&{{/isDateTime}}{{/isPathParam}}{{^isDateTime}}opts.{{/isDateTime}}{{paramName}},{{/isBodyParam}}
		{{/allParams}}{{#bodyParam}}
		{{#lambda.titlecase}}{{paramName}}{{/lambda.titlecase}}: data,
		{{/bodyParam}}
	}

	{{#returnType}}resp, {{/returnType}}_, err := opts.client.{{classname}}.{{operationId}}WithParams(ctx, params).Execute()
	{{#returnType}}
	if err != nil {
		return err
	}

	prettyJSON, errJson := json.MarshalIndent(resp, "", " ")
	if errJson != nil {
		return errJson
	}

	_, err = fmt.Fprintln(w, string(prettyJSON))
	{{/returnType}}
	return err
}

func {{#lambda.camelcase}}{{operationId}}{{/lambda.camelcase}}Builder() *cobra.Command {
	opts := {{#lambda.camelcase}}{{operationId}}{{/lambda.camelcase}}Opts{
		{{#bodyParam}}
		fs: afero.NewOsFs(),
		{{/bodyParam}}
	}
	cmd := &cobra.Command{
		Use: "{{#lambda.camelcase}}{{operationId}}{{/lambda.camelcase}}",
		Short: "{{ summary }}",
		PreRunE: func(cmd *cobra.Command, args []string) error {
			return opts.preRun()
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			return opts.run(cmd.Context(), cmd.OutOrStdout())
		},
	}
{{#allParams}}
	{{^isBodyParam}}cmd.Flags().{{#isArray}}{{#lambda.titlecase}}{{baseType}}{{/lambda.titlecase}}Slice{{/isArray}}{{^isArray}}{{#lambda.titlecase}}{{dataType}}{{/lambda.titlecase}}{{/isArray}}Var(&opts.{{paramName}}, "{{#vendorExtensions.x-flag-name}}{{.}}{{/vendorExtensions.x-flag-name}}{{^vendorExtensions.x-flag-name}}{{paramName}}{{/vendorExtensions.x-flag-name}}", {{#isDateTime}}""{{/isDateTime}}{{#isString}}"{{/isString}}{{^defaultValue}}{{#isArray}}nil{{/isArray}}{{#isNumeric}}0{{/isNumeric}}{{#isInteger}}0{{/isInteger}}{{#isShort}}0{{/isShort}}{{#isLong}}0{{/isLong}}{{#isUnboundedInteger}}0{{/isUnboundedInteger}}{{#isNumber}}0{{/isNumber}}{{#isFloat}}0{{/isFloat}}{{#isDouble}}0{{/isDouble}}{{#isDecimal}}0{{/isDecimal}}{{#isBoolean}}false{{/isBoolean}}{{/defaultValue}}{{defaultValue}}{{#isString}}"{{/isString}}, `{{unescapedDescription}}`){{/isBodyParam}}
{{/allParams}}
{{#bodyParam}}
	cmd.Flags().StringVarP(&opts.filename, "file", "f", "", "Path to an optional JSON configuration file if not passed stdin is expected")
{{/bodyParam}}
{{#allParams}}{{^isBodyParam}}{{#required}}
	_ = cmd.MarkFlagRequired("{{paramName}}"){{/required}}{{/isBodyParam}}{{/allParams}}
	return cmd
}
{{/operation}}
{{/operations}}

func {{#lambda.camelcase}}{{baseName}}{{/lambda.camelcase}}Builder() *cobra.Command {
{{#operations}}
{{#operation}}
{{#-first}}
	cmd := &cobra.Command{
		Use:     "{{#lambda.camelcase}}{{baseName}}{{/lambda.camelcase}}",
		Short:   `{{#tags}}{{#-first}}{{description}}{{/-first}}{{/tags}}`,
	}
	cmd.AddCommand(
{{/-first}}
		{{#lambda.camelcase}}{{operationId}}{{/lambda.camelcase}}Builder(),
{{/operation}}
{{/operations}}
	)
	return cmd
}
