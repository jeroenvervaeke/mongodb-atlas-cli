// Copyright 2023 MongoDB Inc
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"context"
	"io"

	"github.com/mongodb/mongodb-atlas-cli/internal/cli"
	"github.com/mongodb/mongodb-atlas-cli/internal/flag"
	"github.com/mongodb/mongodb-atlas-cli/internal/jsonwriter"
	"github.com/mongodb/mongodb-atlas-cli/internal/usage"
	"github.com/spf13/cobra"
	"go.mongodb.org/atlas-sdk/v20230201008/admin"
)

type getOrganizationEventOpts struct {
	cli.GlobalOpts
	cli.OutputOpts
	client     *admin.APIClient
	orgId      string
	eventId    string
	includeRaw bool
}

func (opts *getOrganizationEventOpts) initClient() func() error {
	return func() error {
		var err error
		opts.client, err = newClientWithAuth()
		return err
	}
}

func (opts *getOrganizationEventOpts) Run(ctx context.Context, w io.Writer) error {
	params := &admin.GetOrganizationEventApiParams{
		OrgId:      opts.orgId,
		EventId:    opts.eventId,
		IncludeRaw: &opts.includeRaw,
	}
	resp, _, err := opts.client.EventsApi.GetOrganizationEventWithParams(ctx, params).Execute()
	if err != nil {
		return err
	}

	return jsonwriter.Print(w, resp)
}

func getOrganizationEventBuilder() *cobra.Command {
	opts := getOrganizationEventOpts{}
	cmd := &cobra.Command{
		Use:   "getOrganizationEvent",
		Short: "Return One Event from One Organization",
		PreRunE: func(cmd *cobra.Command, args []string) error {
			return opts.PreRunE(
				opts.initClient(),
			)
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			return opts.Run(cmd.Context(), cmd.OutOrStdout())
		},
	}
	cmd.Flags().StringVar(&opts.orgId, "orgId", "", `Unique 24-hexadecimal digit string that identifies the organization that contains your projects. Use the [/orgs](#tag/Organizations/operation/listOrganizations) endpoint to retrieve all organizations to which the authenticated user has access.`)
	cmd.Flags().StringVar(&opts.eventId, "eventId", "", `Unique 24-hexadecimal digit string that identifies the event that you want to return. Use the [/events](#tag/Events/operation/listOrganizationEvents) endpoint to retrieve all events to which the authenticated user has access.`)
	cmd.Flags().BoolVar(&opts.includeRaw, "includeRaw", false, `Flag that indicates whether to include the raw document in the output. The raw document contains additional meta information about the event.`)

	cmd.Flags().StringVarP(&opts.Output, flag.Output, flag.OutputShort, "", usage.FormatOut)
	_ = cmd.RegisterFlagCompletionFunc(flag.Output, opts.AutoCompleteOutputFlag())

	_ = cmd.MarkFlagRequired("orgId")
	_ = cmd.MarkFlagRequired("eventId")
	return cmd
}

type getProjectEventOpts struct {
	cli.GlobalOpts
	cli.OutputOpts
	client     *admin.APIClient
	groupId    string
	eventId    string
	includeRaw bool
}

func (opts *getProjectEventOpts) initClient() func() error {
	return func() error {
		var err error
		opts.client, err = newClientWithAuth()
		return err
	}
}

func (opts *getProjectEventOpts) Run(ctx context.Context, w io.Writer) error {
	params := &admin.GetProjectEventApiParams{
		GroupId:    opts.groupId,
		EventId:    opts.eventId,
		IncludeRaw: &opts.includeRaw,
	}
	resp, _, err := opts.client.EventsApi.GetProjectEventWithParams(ctx, params).Execute()
	if err != nil {
		return err
	}

	return jsonwriter.Print(w, resp)
}

func getProjectEventBuilder() *cobra.Command {
	opts := getProjectEventOpts{}
	cmd := &cobra.Command{
		Use:   "getProjectEvent",
		Short: "Return One Event from One Project",
		PreRunE: func(cmd *cobra.Command, args []string) error {
			return opts.PreRunE(
				opts.initClient(),
			)
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			return opts.Run(cmd.Context(), cmd.OutOrStdout())
		},
	}
	cmd.Flags().StringVar(&opts.groupId, "groupId", "", `Unique 24-hexadecimal digit string that identifies your project. Use the [/groups](#tag/Projects/operation/listProjects) endpoint to retrieve all projects to which the authenticated user has access.

**NOTE**: Groups and projects are synonymous terms. Your group id is the same as your project id. For existing groups, your group/project id remains the same. The resource and corresponding endpoints use the term groups.`)
	cmd.Flags().StringVar(&opts.eventId, "eventId", "", `Unique 24-hexadecimal digit string that identifies the event that you want to return. Use the [/events](#tag/Events/operation/listProjectEvents) endpoint to retrieve all events to which the authenticated user has access.`)
	cmd.Flags().BoolVar(&opts.includeRaw, "includeRaw", false, `Flag that indicates whether to include the raw document in the output. The raw document contains additional meta information about the event.`)

	cmd.Flags().StringVarP(&opts.Output, flag.Output, flag.OutputShort, "", usage.FormatOut)
	_ = cmd.RegisterFlagCompletionFunc(flag.Output, opts.AutoCompleteOutputFlag())

	_ = cmd.MarkFlagRequired("groupId")
	_ = cmd.MarkFlagRequired("eventId")
	return cmd
}

type listOrganizationEventsOpts struct {
	cli.GlobalOpts
	cli.OutputOpts
	client       *admin.APIClient
	orgId        string
	includeCount bool
	itemsPerPage int
	pageNum      int
	eventType    []string
	includeRaw   bool
	maxDate      string
	minDate      string
}

func (opts *listOrganizationEventsOpts) initClient() func() error {
	return func() error {
		var err error
		opts.client, err = newClientWithAuth()
		return err
	}
}

func (opts *listOrganizationEventsOpts) Run(ctx context.Context, w io.Writer) error {
	params := &admin.ListOrganizationEventsApiParams{
		OrgId:        opts.orgId,
		IncludeCount: &opts.includeCount,
		ItemsPerPage: &opts.itemsPerPage,
		PageNum:      &opts.pageNum,
		EventType:    &opts.eventType,
		IncludeRaw:   &opts.includeRaw,
		MaxDate:      convertTime(&opts.maxDate),
		MinDate:      convertTime(&opts.minDate),
	}
	resp, _, err := opts.client.EventsApi.ListOrganizationEventsWithParams(ctx, params).Execute()
	if err != nil {
		return err
	}

	return jsonwriter.Print(w, resp)
}

func listOrganizationEventsBuilder() *cobra.Command {
	opts := listOrganizationEventsOpts{}
	cmd := &cobra.Command{
		Use:   "listOrganizationEvents",
		Short: "Return All Events from One Organization",
		PreRunE: func(cmd *cobra.Command, args []string) error {
			return opts.PreRunE(
				opts.initClient(),
			)
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			return opts.Run(cmd.Context(), cmd.OutOrStdout())
		},
	}
	cmd.Flags().StringVar(&opts.orgId, "orgId", "", `Unique 24-hexadecimal digit string that identifies the organization that contains your projects. Use the [/orgs](#tag/Organizations/operation/listOrganizations) endpoint to retrieve all organizations to which the authenticated user has access.`)
	cmd.Flags().BoolVar(&opts.includeCount, "includeCount", true, `Flag that indicates whether the response returns the total number of items (**totalCount**) in the response.`)
	cmd.Flags().IntVar(&opts.itemsPerPage, "itemsPerPage", 100, `Number of items that the response returns per page.`)
	cmd.Flags().IntVar(&opts.pageNum, "pageNum", 1, `Number of the page that displays the current set of the total objects that the response returns.`)
	cmd.Flags().StringSliceVar(&opts.eventType, "eventType", nil, `Category of incident recorded at this moment in time.

**IMPORTANT**: The complete list of event type values changes frequently.`)
	cmd.Flags().BoolVar(&opts.includeRaw, "includeRaw", false, `Flag that indicates whether to include the raw document in the output. The raw document contains additional meta information about the event.`)
	cmd.Flags().StringVar(&opts.maxDate, "maxDate", "", `Date and time from when MongoDB Cloud stops returning events. This parameter uses the &lt;a href&#x3D;&quot;https://en.wikipedia.org/wiki/ISO_8601&quot; target&#x3D;&quot;_blank&quot; rel&#x3D;&quot;noopener noreferrer&quot;&gt;ISO 8601&lt;/a&gt; timestamp format in UTC.`)
	cmd.Flags().StringVar(&opts.minDate, "minDate", "", `Date and time from when MongoDB Cloud starts returning events. This parameter uses the &lt;a href&#x3D;&quot;https://en.wikipedia.org/wiki/ISO_8601&quot; target&#x3D;&quot;_blank&quot; rel&#x3D;&quot;noopener noreferrer&quot;&gt;ISO 8601&lt;/a&gt; timestamp format in UTC.`)

	cmd.Flags().StringVarP(&opts.Output, flag.Output, flag.OutputShort, "", usage.FormatOut)
	_ = cmd.RegisterFlagCompletionFunc(flag.Output, opts.AutoCompleteOutputFlag())

	_ = cmd.MarkFlagRequired("orgId")
	return cmd
}

type listProjectEventsOpts struct {
	cli.GlobalOpts
	cli.OutputOpts
	client            *admin.APIClient
	groupId           string
	includeCount      bool
	itemsPerPage      int
	pageNum           int
	clusterNames      []string
	eventType         []string
	excludedEventType []string
	includeRaw        bool
	maxDate           string
	minDate           string
}

func (opts *listProjectEventsOpts) initClient() func() error {
	return func() error {
		var err error
		opts.client, err = newClientWithAuth()
		return err
	}
}

func (opts *listProjectEventsOpts) Run(ctx context.Context, w io.Writer) error {
	params := &admin.ListProjectEventsApiParams{
		GroupId:           opts.groupId,
		IncludeCount:      &opts.includeCount,
		ItemsPerPage:      &opts.itemsPerPage,
		PageNum:           &opts.pageNum,
		ClusterNames:      &opts.clusterNames,
		EventType:         &opts.eventType,
		ExcludedEventType: &opts.excludedEventType,
		IncludeRaw:        &opts.includeRaw,
		MaxDate:           convertTime(&opts.maxDate),
		MinDate:           convertTime(&opts.minDate),
	}
	resp, _, err := opts.client.EventsApi.ListProjectEventsWithParams(ctx, params).Execute()
	if err != nil {
		return err
	}

	return jsonwriter.Print(w, resp)
}

func listProjectEventsBuilder() *cobra.Command {
	opts := listProjectEventsOpts{}
	cmd := &cobra.Command{
		Use:   "listProjectEvents",
		Short: "Return All Events from One Project",
		PreRunE: func(cmd *cobra.Command, args []string) error {
			return opts.PreRunE(
				opts.initClient(),
			)
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			return opts.Run(cmd.Context(), cmd.OutOrStdout())
		},
	}
	cmd.Flags().StringVar(&opts.groupId, "groupId", "", `Unique 24-hexadecimal digit string that identifies your project. Use the [/groups](#tag/Projects/operation/listProjects) endpoint to retrieve all projects to which the authenticated user has access.

**NOTE**: Groups and projects are synonymous terms. Your group id is the same as your project id. For existing groups, your group/project id remains the same. The resource and corresponding endpoints use the term groups.`)
	cmd.Flags().BoolVar(&opts.includeCount, "includeCount", true, `Flag that indicates whether the response returns the total number of items (**totalCount**) in the response.`)
	cmd.Flags().IntVar(&opts.itemsPerPage, "itemsPerPage", 100, `Number of items that the response returns per page.`)
	cmd.Flags().IntVar(&opts.pageNum, "pageNum", 1, `Number of the page that displays the current set of the total objects that the response returns.`)
	cmd.Flags().StringSliceVar(&opts.clusterNames, "clusterNames", nil, `Human-readable label that identifies the cluster.`)
	cmd.Flags().StringSliceVar(&opts.eventType, "eventType", nil, `Category of incident recorded at this moment in time.

**IMPORTANT**: The complete list of event type values changes frequently.`)
	cmd.Flags().StringSliceVar(&opts.excludedEventType, "excludedEventType", nil, `Category of event that you would like to exclude from query results, such as CLUSTER_CREATED

**IMPORTANT**: Event type names change frequently. Verify that you specify the event type correctly by checking the complete list of event types.`)
	cmd.Flags().BoolVar(&opts.includeRaw, "includeRaw", false, `Flag that indicates whether to include the raw document in the output. The raw document contains additional meta information about the event.`)
	cmd.Flags().StringVar(&opts.maxDate, "maxDate", "", `Date and time from when MongoDB Cloud stops returning events. This parameter uses the &lt;a href&#x3D;&quot;https://en.wikipedia.org/wiki/ISO_8601&quot; target&#x3D;&quot;_blank&quot; rel&#x3D;&quot;noopener noreferrer&quot;&gt;ISO 8601&lt;/a&gt; timestamp format in UTC.`)
	cmd.Flags().StringVar(&opts.minDate, "minDate", "", `Date and time from when MongoDB Cloud starts returning events. This parameter uses the &lt;a href&#x3D;&quot;https://en.wikipedia.org/wiki/ISO_8601&quot; target&#x3D;&quot;_blank&quot; rel&#x3D;&quot;noopener noreferrer&quot;&gt;ISO 8601&lt;/a&gt; timestamp format in UTC.`)

	cmd.Flags().StringVarP(&opts.Output, flag.Output, flag.OutputShort, "", usage.FormatOut)
	_ = cmd.RegisterFlagCompletionFunc(flag.Output, opts.AutoCompleteOutputFlag())

	_ = cmd.MarkFlagRequired("groupId")
	return cmd
}

func eventsBuilder() *cobra.Command {
	cmd := &cobra.Command{
		Use:   "events",
		Short: `Returns events. This collection remains under revision and may change.`,
	}
	cmd.AddCommand(
		getOrganizationEventBuilder(),
		getProjectEventBuilder(),
		listOrganizationEventsBuilder(),
		listProjectEventsBuilder(),
	)
	return cmd
}
