// Copyright 2023 MongoDB Inc
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"context"
	"encoding/json"
	"fmt"
	"io"
	"os"

	"github.com/mongodb/mongodb-atlas-cli/internal/cli"
	"github.com/mongodb/mongodb-atlas-cli/internal/jsonwriter"
	"github.com/spf13/afero"
	"github.com/spf13/cobra"
	"go.mongodb.org/atlas-sdk/v20230201008/admin"
)

type createCostExplorerQueryProcessOpts struct {
	cli.GlobalOpts
	client *admin.APIClient
	orgId  string

	filename string
	fs       afero.Fs
}

func (opts *createCostExplorerQueryProcessOpts) initClient() func() error {
	return func() error {
		var err error
		opts.client, err = newClientWithAuth()
		return err
	}
}

func (opts *createCostExplorerQueryProcessOpts) readData() (*admin.CostExplorerFilterRequestBody, error) {
	var out *admin.CostExplorerFilterRequestBody

	var buf []byte
	var err error
	if opts.filename == "" {
		buf, err = io.ReadAll(os.Stdin)
	} else {
		if exists, errExists := afero.Exists(opts.fs, opts.filename); !exists || errExists != nil {
			return nil, fmt.Errorf("file not found: %s", opts.filename)
		}
		buf, err = afero.ReadFile(opts.fs, opts.filename)
	}
	if err != nil {
		return nil, err
	}
	if err = json.Unmarshal(buf, &out); err != nil {
		return nil, err
	}
	return out, nil
}

func (opts *createCostExplorerQueryProcessOpts) Run(ctx context.Context, w io.Writer) error {
	data, errData := opts.readData()
	if errData != nil {
		return errData
	}
	params := &admin.CreateCostExplorerQueryProcessApiParams{
		OrgId: opts.orgId,

		CostExplorerFilterRequestBody: data,
	}
	resp, _, err := opts.client.InvoicesApi.CreateCostExplorerQueryProcessWithParams(ctx, params).Execute()
	if err != nil {
		return err
	}

	return jsonwriter.Print(w, resp)
}

func createCostExplorerQueryProcessBuilder() *cobra.Command {
	opts := createCostExplorerQueryProcessOpts{
		fs: afero.NewOsFs(),
	}
	cmd := &cobra.Command{
		Use:   "createCostExplorerQueryProcess",
		Short: "Create Cost Explorer query process",
		PreRunE: func(cmd *cobra.Command, args []string) error {
			return opts.PreRunE(
				opts.initClient(),
			)
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			return opts.Run(cmd.Context(), cmd.OutOrStdout())
		},
	}
	cmd.Flags().StringVar(&opts.orgId, "orgId", "", `Unique 24-hexadecimal digit string that identifies the organization that contains your projects. Use the [/orgs](#tag/Organizations/operation/listOrganizations) endpoint to retrieve all organizations to which the authenticated user has access.`)

	cmd.Flags().StringVarP(&opts.filename, "file", "f", "", "Path to an optional JSON configuration file if not passed stdin is expected")

	_ = cmd.MarkFlagRequired("orgId")
	return cmd
}

type createCostExplorerQueryProcess1Opts struct {
	cli.GlobalOpts
	client *admin.APIClient
	orgId  string
	token  string
}

func (opts *createCostExplorerQueryProcess1Opts) initClient() func() error {
	return func() error {
		var err error
		opts.client, err = newClientWithAuth()
		return err
	}
}

func (opts *createCostExplorerQueryProcess1Opts) Run(ctx context.Context, w io.Writer) error {
	params := &admin.CreateCostExplorerQueryProcess1ApiParams{
		OrgId: opts.orgId,
		Token: opts.token,
	}
	resp, _, err := opts.client.InvoicesApi.CreateCostExplorerQueryProcess1WithParams(ctx, params).Execute()
	if err != nil {
		return err
	}

	return jsonwriter.Print(w, resp)
}

func createCostExplorerQueryProcess1Builder() *cobra.Command {
	opts := createCostExplorerQueryProcess1Opts{}
	cmd := &cobra.Command{
		Use:   "createCostExplorerQueryProcess1",
		Short: "Return results from a given Cost Explorer query, or notify that the results are not ready yet.",
		PreRunE: func(cmd *cobra.Command, args []string) error {
			return opts.PreRunE(
				opts.initClient(),
			)
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			return opts.Run(cmd.Context(), cmd.OutOrStdout())
		},
	}
	cmd.Flags().StringVar(&opts.orgId, "orgId", "", `Unique 24-hexadecimal digit string that identifies the organization that contains your projects. Use the [/orgs](#tag/Organizations/operation/listOrganizations) endpoint to retrieve all organizations to which the authenticated user has access.`)
	cmd.Flags().StringVar(&opts.token, "token", "", `Unique 64 digit string that identifies the Cost Explorer query.`)

	_ = cmd.MarkFlagRequired("orgId")
	_ = cmd.MarkFlagRequired("token")
	return cmd
}

type downloadInvoiceCSVOpts struct {
	cli.GlobalOpts
	client    *admin.APIClient
	orgId     string
	invoiceId string
}

func (opts *downloadInvoiceCSVOpts) initClient() func() error {
	return func() error {
		var err error
		opts.client, err = newClientWithAuth()
		return err
	}
}

func (opts *downloadInvoiceCSVOpts) Run(ctx context.Context, w io.Writer) error {
	params := &admin.DownloadInvoiceCSVApiParams{
		OrgId:     opts.orgId,
		InvoiceId: opts.invoiceId,
	}
	resp, _, err := opts.client.InvoicesApi.DownloadInvoiceCSVWithParams(ctx, params).Execute()
	if err != nil {
		return err
	}

	return jsonwriter.Print(w, resp)
}

func downloadInvoiceCSVBuilder() *cobra.Command {
	opts := downloadInvoiceCSVOpts{}
	cmd := &cobra.Command{
		Use:   "downloadInvoiceCSV",
		Short: "Return One Organization Invoice as CSV",
		PreRunE: func(cmd *cobra.Command, args []string) error {
			return opts.PreRunE(
				opts.initClient(),
			)
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			return opts.Run(cmd.Context(), cmd.OutOrStdout())
		},
	}
	cmd.Flags().StringVar(&opts.orgId, "orgId", "", `Unique 24-hexadecimal digit string that identifies the organization that contains your projects. Use the [/orgs](#tag/Organizations/operation/listOrganizations) endpoint to retrieve all organizations to which the authenticated user has access.`)
	cmd.Flags().StringVar(&opts.invoiceId, "invoiceId", "", `Unique 24-hexadecimal digit string that identifies the invoice submitted to the specified organization. Charges typically post the next day.`)

	_ = cmd.MarkFlagRequired("orgId")
	_ = cmd.MarkFlagRequired("invoiceId")
	return cmd
}

type getInvoiceOpts struct {
	cli.GlobalOpts
	client    *admin.APIClient
	orgId     string
	invoiceId string
}

func (opts *getInvoiceOpts) initClient() func() error {
	return func() error {
		var err error
		opts.client, err = newClientWithAuth()
		return err
	}
}

func (opts *getInvoiceOpts) Run(ctx context.Context, w io.Writer) error {
	params := &admin.GetInvoiceApiParams{
		OrgId:     opts.orgId,
		InvoiceId: opts.invoiceId,
	}
	resp, _, err := opts.client.InvoicesApi.GetInvoiceWithParams(ctx, params).Execute()
	if err != nil {
		return err
	}

	return jsonwriter.Print(w, resp)
}

func getInvoiceBuilder() *cobra.Command {
	opts := getInvoiceOpts{}
	cmd := &cobra.Command{
		Use:   "getInvoice",
		Short: "Return One Organization Invoice",
		PreRunE: func(cmd *cobra.Command, args []string) error {
			return opts.PreRunE(
				opts.initClient(),
			)
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			return opts.Run(cmd.Context(), cmd.OutOrStdout())
		},
	}
	cmd.Flags().StringVar(&opts.orgId, "orgId", "", `Unique 24-hexadecimal digit string that identifies the organization that contains your projects. Use the [/orgs](#tag/Organizations/operation/listOrganizations) endpoint to retrieve all organizations to which the authenticated user has access.`)
	cmd.Flags().StringVar(&opts.invoiceId, "invoiceId", "", `Unique 24-hexadecimal digit string that identifies the invoice submitted to the specified organization. Charges typically post the next day.`)

	_ = cmd.MarkFlagRequired("orgId")
	_ = cmd.MarkFlagRequired("invoiceId")
	return cmd
}

type listInvoicesOpts struct {
	cli.GlobalOpts
	client       *admin.APIClient
	orgId        string
	includeCount bool
	itemsPerPage int
	pageNum      int
}

func (opts *listInvoicesOpts) initClient() func() error {
	return func() error {
		var err error
		opts.client, err = newClientWithAuth()
		return err
	}
}

func (opts *listInvoicesOpts) Run(ctx context.Context, w io.Writer) error {
	params := &admin.ListInvoicesApiParams{
		OrgId:        opts.orgId,
		IncludeCount: &opts.includeCount,
		ItemsPerPage: &opts.itemsPerPage,
		PageNum:      &opts.pageNum,
	}
	resp, _, err := opts.client.InvoicesApi.ListInvoicesWithParams(ctx, params).Execute()
	if err != nil {
		return err
	}

	return jsonwriter.Print(w, resp)
}

func listInvoicesBuilder() *cobra.Command {
	opts := listInvoicesOpts{}
	cmd := &cobra.Command{
		Use:   "listInvoices",
		Short: "Return All Invoices for One Organization",
		PreRunE: func(cmd *cobra.Command, args []string) error {
			return opts.PreRunE(
				opts.initClient(),
			)
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			return opts.Run(cmd.Context(), cmd.OutOrStdout())
		},
	}
	cmd.Flags().StringVar(&opts.orgId, "orgId", "", `Unique 24-hexadecimal digit string that identifies the organization that contains your projects. Use the [/orgs](#tag/Organizations/operation/listOrganizations) endpoint to retrieve all organizations to which the authenticated user has access.`)
	cmd.Flags().BoolVar(&opts.includeCount, "includeCount", true, `Flag that indicates whether the response returns the total number of items (**totalCount**) in the response.`)
	cmd.Flags().IntVar(&opts.itemsPerPage, "itemsPerPage", 100, `Number of items that the response returns per page.`)
	cmd.Flags().IntVar(&opts.pageNum, "pageNum", 1, `Number of the page that displays the current set of the total objects that the response returns.`)

	_ = cmd.MarkFlagRequired("orgId")
	return cmd
}

type listPendingInvoicesOpts struct {
	cli.GlobalOpts
	client *admin.APIClient
	orgId  string
}

func (opts *listPendingInvoicesOpts) initClient() func() error {
	return func() error {
		var err error
		opts.client, err = newClientWithAuth()
		return err
	}
}

func (opts *listPendingInvoicesOpts) Run(ctx context.Context, w io.Writer) error {
	params := &admin.ListPendingInvoicesApiParams{
		OrgId: opts.orgId,
	}
	resp, _, err := opts.client.InvoicesApi.ListPendingInvoicesWithParams(ctx, params).Execute()
	if err != nil {
		return err
	}

	return jsonwriter.Print(w, resp)
}

func listPendingInvoicesBuilder() *cobra.Command {
	opts := listPendingInvoicesOpts{}
	cmd := &cobra.Command{
		Use:   "listPendingInvoices",
		Short: "Return All Pending Invoices for One Organization",
		PreRunE: func(cmd *cobra.Command, args []string) error {
			return opts.PreRunE(
				opts.initClient(),
			)
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			return opts.Run(cmd.Context(), cmd.OutOrStdout())
		},
	}
	cmd.Flags().StringVar(&opts.orgId, "orgId", "", `Unique 24-hexadecimal digit string that identifies the organization that contains your projects. Use the [/orgs](#tag/Organizations/operation/listOrganizations) endpoint to retrieve all organizations to which the authenticated user has access.`)

	_ = cmd.MarkFlagRequired("orgId")
	return cmd
}

func invoicesBuilder() *cobra.Command {
	cmd := &cobra.Command{
		Use:   "invoices",
		Short: `Returns invoices.`,
	}
	cmd.AddCommand(
		createCostExplorerQueryProcessBuilder(),
		createCostExplorerQueryProcess1Builder(),
		downloadInvoiceCSVBuilder(),
		getInvoiceBuilder(),
		listInvoicesBuilder(),
		listPendingInvoicesBuilder(),
	)
	return cmd
}
