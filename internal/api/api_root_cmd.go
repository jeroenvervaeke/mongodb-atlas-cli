// Copyright 2023 MongoDB Inc
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"context"
	"encoding/json"
	"fmt"
	"io"
	"strings"
	"text/template"

	"github.com/mongodb/mongodb-atlas-cli/internal/config"
	"github.com/spf13/cobra"
	"go.mongodb.org/atlas-sdk/v20230201008/admin"
)

type getSystemStatusOpts struct {
	client *admin.APIClient
	format string
	tmpl   *template.Template
	resp   *admin.SystemStatus
}

func (opts *getSystemStatusOpts) preRun() (err error) {
	if opts.client, err = newClientWithAuth(config.UserAgent, config.Default()); err != nil {
		return err
	}

	if opts.format != "" {
		if opts.tmpl, err = template.New("").Parse(strings.ReplaceAll(opts.format, "\\n", "\n") + "\n"); err != nil {
			return err
		}
	}

	return nil
}

func (opts *getSystemStatusOpts) run(ctx context.Context, _ io.Reader) error {

	params := &admin.GetSystemStatusApiParams{}

	var err error
	opts.resp, _, err = opts.client.RootApi.GetSystemStatusWithParams(ctx, params).Execute()
	return err
}

func (opts *getSystemStatusOpts) postRun(_ context.Context, w io.Writer) error {

	prettyJSON, errJson := json.MarshalIndent(opts.resp, "", " ")
	if errJson != nil {
		return errJson
	}

	if opts.format == "" {
		_, err := fmt.Fprintln(w, string(prettyJSON))
		return err
	}

	var parsedJSON interface{}
	if err := json.Unmarshal([]byte(prettyJSON), &parsedJSON); err != nil {
		return err
	}

	return opts.tmpl.Execute(w, parsedJSON)
}

func getSystemStatusBuilder() *cobra.Command {
	opts := getSystemStatusOpts{}
	cmd := &cobra.Command{
		Use:   "getSystemStatus",
		Short: "Return the status of this MongoDB application",
		PreRunE: func(cmd *cobra.Command, args []string) error {
			return opts.preRun()
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			return opts.run(cmd.Context(), cmd.InOrStdin())
		},
		PostRunE: func(cmd *cobra.Command, args []string) error {
			return opts.postRun(cmd.Context(), cmd.OutOrStdout())
		},
	}

	cmd.Flags().StringVar(&opts.format, "format", "", "Format of the output")
	return cmd
}

func rootBuilder() *cobra.Command {
	cmd := &cobra.Command{
		Use:   "root",
		Short: `Returns details that describe the MongoDB Cloud build and the access token that requests this resource. This starts the MongoDB Cloud API.`,
	}
	cmd.AddCommand(
		getSystemStatusBuilder(),
	)
	return cmd
}
