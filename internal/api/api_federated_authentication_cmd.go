// Copyright 2023 MongoDB Inc
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"context"
	"encoding/json"
	"fmt"
	"io"
	"os"

	"github.com/mongodb/mongodb-atlas-cli/internal/cli"
	"github.com/mongodb/mongodb-atlas-cli/internal/flag"
	"github.com/mongodb/mongodb-atlas-cli/internal/jsonwriter"
	"github.com/mongodb/mongodb-atlas-cli/internal/usage"
	"github.com/spf13/afero"
	"github.com/spf13/cobra"
	"go.mongodb.org/atlas-sdk/v20230201008/admin"
)

type createRoleMappingOpts struct {
	cli.GlobalOpts
	cli.OutputOpts
	client               *admin.APIClient
	federationSettingsId string
	orgId                string

	filename string
	fs       afero.Fs
}

func (opts *createRoleMappingOpts) initClient() func() error {
	return func() error {
		var err error
		opts.client, err = newClientWithAuth()
		return err
	}
}

func (opts *createRoleMappingOpts) readData() (*admin.AuthFederationRoleMapping, error) {
	var out *admin.AuthFederationRoleMapping

	var buf []byte
	var err error
	if opts.filename == "" {
		buf, err = io.ReadAll(os.Stdin)
	} else {
		if exists, errExists := afero.Exists(opts.fs, opts.filename); !exists || errExists != nil {
			return nil, fmt.Errorf("file not found: %s", opts.filename)
		}
		buf, err = afero.ReadFile(opts.fs, opts.filename)
	}
	if err != nil {
		return nil, err
	}
	if err = json.Unmarshal(buf, &out); err != nil {
		return nil, err
	}
	return out, nil
}

func (opts *createRoleMappingOpts) Run(ctx context.Context, w io.Writer) error {
	data, errData := opts.readData()
	if errData != nil {
		return errData
	}
	params := &admin.CreateRoleMappingApiParams{
		FederationSettingsId: opts.federationSettingsId,
		OrgId:                opts.orgId,

		AuthFederationRoleMapping: data,
	}
	resp, _, err := opts.client.FederatedAuthenticationApi.CreateRoleMappingWithParams(ctx, params).Execute()
	if err != nil {
		return err
	}

	return jsonwriter.Print(w, resp)
}

func createRoleMappingBuilder() *cobra.Command {
	opts := createRoleMappingOpts{
		fs: afero.NewOsFs(),
	}
	cmd := &cobra.Command{
		Use:   "createRoleMapping",
		Short: "Add One Role Mapping to One Organization",
		PreRunE: func(cmd *cobra.Command, args []string) error {
			return opts.PreRunE(
				opts.initClient(),
			)
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			return opts.Run(cmd.Context(), cmd.OutOrStdout())
		},
	}
	cmd.Flags().StringVar(&opts.federationSettingsId, "federationSettingsId", "", `Unique 24-hexadecimal digit string that identifies your federation.`)
	cmd.Flags().StringVar(&opts.orgId, "orgId", "", `Unique 24-hexadecimal digit string that identifies the organization that contains your projects. Use the [/orgs](#tag/Organizations/operation/listOrganizations) endpoint to retrieve all organizations to which the authenticated user has access.`)

	cmd.Flags().StringVarP(&opts.filename, "file", "f", "", "Path to an optional JSON configuration file if not passed stdin is expected")

	cmd.Flags().StringVarP(&opts.filename, "file", "f", "", "Path to an optional JSON configuration file if not passed stdin is expected")

	cmd.Flags().StringVarP(&opts.filename, "file", "f", "", "Path to an optional JSON configuration file if not passed stdin is expected")

	cmd.Flags().StringVarP(&opts.Output, flag.Output, flag.OutputShort, "", usage.FormatOut)
	_ = cmd.RegisterFlagCompletionFunc(flag.Output, opts.AutoCompleteOutputFlag())

	_ = cmd.MarkFlagRequired("federationSettingsId")
	_ = cmd.MarkFlagRequired("orgId")
	return cmd
}

type deleteFederationAppOpts struct {
	cli.GlobalOpts
	cli.OutputOpts
	client               *admin.APIClient
	federationSettingsId string
}

func (opts *deleteFederationAppOpts) initClient() func() error {
	return func() error {
		var err error
		opts.client, err = newClientWithAuth()
		return err
	}
}

func (opts *deleteFederationAppOpts) Run(ctx context.Context, _ io.Writer) error {
	params := &admin.DeleteFederationAppApiParams{
		FederationSettingsId: opts.federationSettingsId,
	}
	_, err := opts.client.FederatedAuthenticationApi.DeleteFederationAppWithParams(ctx, params).Execute()
	if err != nil {
		return err
	}

	return nil
}

func deleteFederationAppBuilder() *cobra.Command {
	opts := deleteFederationAppOpts{}
	cmd := &cobra.Command{
		Use:   "deleteFederationApp",
		Short: "Delete the federation settings instance.",
		PreRunE: func(cmd *cobra.Command, args []string) error {
			return opts.PreRunE(
				opts.initClient(),
			)
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			return opts.Run(cmd.Context(), cmd.OutOrStdout())
		},
	}
	cmd.Flags().StringVar(&opts.federationSettingsId, "federationSettingsId", "", `Unique 24-hexadecimal digit string that identifies your federation.`)

	cmd.Flags().StringVarP(&opts.Output, flag.Output, flag.OutputShort, "", usage.FormatOut)
	_ = cmd.RegisterFlagCompletionFunc(flag.Output, opts.AutoCompleteOutputFlag())

	_ = cmd.MarkFlagRequired("federationSettingsId")
	return cmd
}

type deleteRoleMappingOpts struct {
	cli.GlobalOpts
	cli.OutputOpts
	client               *admin.APIClient
	federationSettingsId string
	id                   string
	orgId                string
}

func (opts *deleteRoleMappingOpts) initClient() func() error {
	return func() error {
		var err error
		opts.client, err = newClientWithAuth()
		return err
	}
}

func (opts *deleteRoleMappingOpts) Run(ctx context.Context, _ io.Writer) error {
	params := &admin.DeleteRoleMappingApiParams{
		FederationSettingsId: opts.federationSettingsId,
		Id:                   opts.id,
		OrgId:                opts.orgId,
	}
	_, err := opts.client.FederatedAuthenticationApi.DeleteRoleMappingWithParams(ctx, params).Execute()
	if err != nil {
		return err
	}

	return nil
}

func deleteRoleMappingBuilder() *cobra.Command {
	opts := deleteRoleMappingOpts{}
	cmd := &cobra.Command{
		Use:   "deleteRoleMapping",
		Short: "Remove One Role Mapping from One Organization",
		PreRunE: func(cmd *cobra.Command, args []string) error {
			return opts.PreRunE(
				opts.initClient(),
			)
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			return opts.Run(cmd.Context(), cmd.OutOrStdout())
		},
	}
	cmd.Flags().StringVar(&opts.federationSettingsId, "federationSettingsId", "", `Unique 24-hexadecimal digit string that identifies your federation.`)
	cmd.Flags().StringVar(&opts.id, "id", "", `Unique 24-hexadecimal digit string that identifies the role mapping that you want to remove.`)
	cmd.Flags().StringVar(&opts.orgId, "orgId", "", `Unique 24-hexadecimal digit string that identifies the organization that contains your projects. Use the [/orgs](#tag/Organizations/operation/listOrganizations) endpoint to retrieve all organizations to which the authenticated user has access.`)

	cmd.Flags().StringVarP(&opts.Output, flag.Output, flag.OutputShort, "", usage.FormatOut)
	_ = cmd.RegisterFlagCompletionFunc(flag.Output, opts.AutoCompleteOutputFlag())

	_ = cmd.MarkFlagRequired("federationSettingsId")
	_ = cmd.MarkFlagRequired("id")
	_ = cmd.MarkFlagRequired("orgId")
	return cmd
}

type getConnectedOrgConfigOpts struct {
	cli.GlobalOpts
	cli.OutputOpts
	client               *admin.APIClient
	federationSettingsId string
	orgId                string
}

func (opts *getConnectedOrgConfigOpts) initClient() func() error {
	return func() error {
		var err error
		opts.client, err = newClientWithAuth()
		return err
	}
}

func (opts *getConnectedOrgConfigOpts) Run(ctx context.Context, w io.Writer) error {
	params := &admin.GetConnectedOrgConfigApiParams{
		FederationSettingsId: opts.federationSettingsId,
		OrgId:                opts.orgId,
	}
	resp, _, err := opts.client.FederatedAuthenticationApi.GetConnectedOrgConfigWithParams(ctx, params).Execute()
	if err != nil {
		return err
	}

	return jsonwriter.Print(w, resp)
}

func getConnectedOrgConfigBuilder() *cobra.Command {
	opts := getConnectedOrgConfigOpts{}
	cmd := &cobra.Command{
		Use:   "getConnectedOrgConfig",
		Short: "Return One Org Config Connected to One Federation",
		PreRunE: func(cmd *cobra.Command, args []string) error {
			return opts.PreRunE(
				opts.initClient(),
			)
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			return opts.Run(cmd.Context(), cmd.OutOrStdout())
		},
	}
	cmd.Flags().StringVar(&opts.federationSettingsId, "federationSettingsId", "", `Unique 24-hexadecimal digit string that identifies your federation.`)
	cmd.Flags().StringVar(&opts.orgId, "orgId", "", `Unique 24-hexadecimal digit string that identifies the connected organization configuration to return.`)

	cmd.Flags().StringVarP(&opts.Output, flag.Output, flag.OutputShort, "", usage.FormatOut)
	_ = cmd.RegisterFlagCompletionFunc(flag.Output, opts.AutoCompleteOutputFlag())

	_ = cmd.MarkFlagRequired("federationSettingsId")
	_ = cmd.MarkFlagRequired("orgId")
	return cmd
}

type getFederationSettingsOpts struct {
	cli.GlobalOpts
	cli.OutputOpts
	client *admin.APIClient
	orgId  string
}

func (opts *getFederationSettingsOpts) initClient() func() error {
	return func() error {
		var err error
		opts.client, err = newClientWithAuth()
		return err
	}
}

func (opts *getFederationSettingsOpts) Run(ctx context.Context, w io.Writer) error {
	params := &admin.GetFederationSettingsApiParams{
		OrgId: opts.orgId,
	}
	resp, _, err := opts.client.FederatedAuthenticationApi.GetFederationSettingsWithParams(ctx, params).Execute()
	if err != nil {
		return err
	}

	return jsonwriter.Print(w, resp)
}

func getFederationSettingsBuilder() *cobra.Command {
	opts := getFederationSettingsOpts{}
	cmd := &cobra.Command{
		Use:   "getFederationSettings",
		Short: "Return Federation Settings for One Organization",
		PreRunE: func(cmd *cobra.Command, args []string) error {
			return opts.PreRunE(
				opts.initClient(),
			)
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			return opts.Run(cmd.Context(), cmd.OutOrStdout())
		},
	}
	cmd.Flags().StringVar(&opts.orgId, "orgId", "", `Unique 24-hexadecimal digit string that identifies the organization that contains your projects. Use the [/orgs](#tag/Organizations/operation/listOrganizations) endpoint to retrieve all organizations to which the authenticated user has access.`)

	cmd.Flags().StringVarP(&opts.Output, flag.Output, flag.OutputShort, "", usage.FormatOut)
	_ = cmd.RegisterFlagCompletionFunc(flag.Output, opts.AutoCompleteOutputFlag())

	_ = cmd.MarkFlagRequired("orgId")
	return cmd
}

type getIdentityProviderOpts struct {
	cli.GlobalOpts
	cli.OutputOpts
	client               *admin.APIClient
	federationSettingsId string
	identityProviderId   string
}

func (opts *getIdentityProviderOpts) initClient() func() error {
	return func() error {
		var err error
		opts.client, err = newClientWithAuth()
		return err
	}
}

func (opts *getIdentityProviderOpts) Run(ctx context.Context, w io.Writer) error {
	params := &admin.GetIdentityProviderApiParams{
		FederationSettingsId: opts.federationSettingsId,
		IdentityProviderId:   opts.identityProviderId,
	}
	resp, _, err := opts.client.FederatedAuthenticationApi.GetIdentityProviderWithParams(ctx, params).Execute()
	if err != nil {
		return err
	}

	return jsonwriter.Print(w, resp)
}

func getIdentityProviderBuilder() *cobra.Command {
	opts := getIdentityProviderOpts{}
	cmd := &cobra.Command{
		Use:   "getIdentityProvider",
		Short: "Return one identity provider from the specified federation.",
		PreRunE: func(cmd *cobra.Command, args []string) error {
			return opts.PreRunE(
				opts.initClient(),
			)
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			return opts.Run(cmd.Context(), cmd.OutOrStdout())
		},
	}
	cmd.Flags().StringVar(&opts.federationSettingsId, "federationSettingsId", "", `Unique 24-hexadecimal digit string that identifies your federation.`)
	cmd.Flags().StringVar(&opts.identityProviderId, "identityProviderId", "", `Unique 20-hexadecimal digit string that identifies the identity provider.`)

	cmd.Flags().StringVarP(&opts.Output, flag.Output, flag.OutputShort, "", usage.FormatOut)
	_ = cmd.RegisterFlagCompletionFunc(flag.Output, opts.AutoCompleteOutputFlag())

	_ = cmd.MarkFlagRequired("federationSettingsId")
	_ = cmd.MarkFlagRequired("identityProviderId")
	return cmd
}

type getIdentityProviderMetadataOpts struct {
	cli.GlobalOpts
	cli.OutputOpts
	client               *admin.APIClient
	federationSettingsId string
	identityProviderId   string
}

func (opts *getIdentityProviderMetadataOpts) initClient() func() error {
	return func() error {
		var err error
		opts.client, err = newClientWithAuth()
		return err
	}
}

func (opts *getIdentityProviderMetadataOpts) Run(ctx context.Context, w io.Writer) error {
	params := &admin.GetIdentityProviderMetadataApiParams{
		FederationSettingsId: opts.federationSettingsId,
		IdentityProviderId:   opts.identityProviderId,
	}
	resp, _, err := opts.client.FederatedAuthenticationApi.GetIdentityProviderMetadataWithParams(ctx, params).Execute()
	if err != nil {
		return err
	}

	return jsonwriter.Print(w, resp)
}

func getIdentityProviderMetadataBuilder() *cobra.Command {
	opts := getIdentityProviderMetadataOpts{}
	cmd := &cobra.Command{
		Use:   "getIdentityProviderMetadata",
		Short: "Return the metadata of one identity provider in the specified federation.",
		PreRunE: func(cmd *cobra.Command, args []string) error {
			return opts.PreRunE(
				opts.initClient(),
			)
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			return opts.Run(cmd.Context(), cmd.OutOrStdout())
		},
	}
	cmd.Flags().StringVar(&opts.federationSettingsId, "federationSettingsId", "", `Unique 24-hexadecimal digit string that identifies your federation.`)
	cmd.Flags().StringVar(&opts.identityProviderId, "identityProviderId", "", `Unique 20-hexadecimal digit string that identifies the identity provider.`)

	cmd.Flags().StringVarP(&opts.Output, flag.Output, flag.OutputShort, "", usage.FormatOut)
	_ = cmd.RegisterFlagCompletionFunc(flag.Output, opts.AutoCompleteOutputFlag())

	_ = cmd.MarkFlagRequired("federationSettingsId")
	_ = cmd.MarkFlagRequired("identityProviderId")
	return cmd
}

type getRoleMappingOpts struct {
	cli.GlobalOpts
	cli.OutputOpts
	client               *admin.APIClient
	federationSettingsId string
	id                   string
	orgId                string
}

func (opts *getRoleMappingOpts) initClient() func() error {
	return func() error {
		var err error
		opts.client, err = newClientWithAuth()
		return err
	}
}

func (opts *getRoleMappingOpts) Run(ctx context.Context, w io.Writer) error {
	params := &admin.GetRoleMappingApiParams{
		FederationSettingsId: opts.federationSettingsId,
		Id:                   opts.id,
		OrgId:                opts.orgId,
	}
	resp, _, err := opts.client.FederatedAuthenticationApi.GetRoleMappingWithParams(ctx, params).Execute()
	if err != nil {
		return err
	}

	return jsonwriter.Print(w, resp)
}

func getRoleMappingBuilder() *cobra.Command {
	opts := getRoleMappingOpts{}
	cmd := &cobra.Command{
		Use:   "getRoleMapping",
		Short: "Return One Role Mapping from One Organization",
		PreRunE: func(cmd *cobra.Command, args []string) error {
			return opts.PreRunE(
				opts.initClient(),
			)
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			return opts.Run(cmd.Context(), cmd.OutOrStdout())
		},
	}
	cmd.Flags().StringVar(&opts.federationSettingsId, "federationSettingsId", "", `Unique 24-hexadecimal digit string that identifies your federation.`)
	cmd.Flags().StringVar(&opts.id, "id", "", `Unique 24-hexadecimal digit string that identifies the role mapping that you want to return.`)
	cmd.Flags().StringVar(&opts.orgId, "orgId", "", `Unique 24-hexadecimal digit string that identifies the organization that contains your projects. Use the [/orgs](#tag/Organizations/operation/listOrganizations) endpoint to retrieve all organizations to which the authenticated user has access.`)

	cmd.Flags().StringVarP(&opts.Output, flag.Output, flag.OutputShort, "", usage.FormatOut)
	_ = cmd.RegisterFlagCompletionFunc(flag.Output, opts.AutoCompleteOutputFlag())

	_ = cmd.MarkFlagRequired("federationSettingsId")
	_ = cmd.MarkFlagRequired("id")
	_ = cmd.MarkFlagRequired("orgId")
	return cmd
}

type listConnectedOrgConfigsOpts struct {
	cli.GlobalOpts
	cli.OutputOpts
	client               *admin.APIClient
	federationSettingsId string
}

func (opts *listConnectedOrgConfigsOpts) initClient() func() error {
	return func() error {
		var err error
		opts.client, err = newClientWithAuth()
		return err
	}
}

func (opts *listConnectedOrgConfigsOpts) Run(ctx context.Context, w io.Writer) error {
	params := &admin.ListConnectedOrgConfigsApiParams{
		FederationSettingsId: opts.federationSettingsId,
	}
	resp, _, err := opts.client.FederatedAuthenticationApi.ListConnectedOrgConfigsWithParams(ctx, params).Execute()
	if err != nil {
		return err
	}

	return jsonwriter.Print(w, resp)
}

func listConnectedOrgConfigsBuilder() *cobra.Command {
	opts := listConnectedOrgConfigsOpts{}
	cmd := &cobra.Command{
		Use:   "listConnectedOrgConfigs",
		Short: "Return All Connected Org Configs from the Federation",
		PreRunE: func(cmd *cobra.Command, args []string) error {
			return opts.PreRunE(
				opts.initClient(),
			)
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			return opts.Run(cmd.Context(), cmd.OutOrStdout())
		},
	}
	cmd.Flags().StringVar(&opts.federationSettingsId, "federationSettingsId", "", `Unique 24-hexadecimal digit string that identifies your federation.`)

	cmd.Flags().StringVarP(&opts.Output, flag.Output, flag.OutputShort, "", usage.FormatOut)
	_ = cmd.RegisterFlagCompletionFunc(flag.Output, opts.AutoCompleteOutputFlag())

	_ = cmd.MarkFlagRequired("federationSettingsId")
	return cmd
}

type listIdentityProvidersOpts struct {
	cli.GlobalOpts
	cli.OutputOpts
	client               *admin.APIClient
	federationSettingsId string
}

func (opts *listIdentityProvidersOpts) initClient() func() error {
	return func() error {
		var err error
		opts.client, err = newClientWithAuth()
		return err
	}
}

func (opts *listIdentityProvidersOpts) Run(ctx context.Context, w io.Writer) error {
	params := &admin.ListIdentityProvidersApiParams{
		FederationSettingsId: opts.federationSettingsId,
	}
	resp, _, err := opts.client.FederatedAuthenticationApi.ListIdentityProvidersWithParams(ctx, params).Execute()
	if err != nil {
		return err
	}

	return jsonwriter.Print(w, resp)
}

func listIdentityProvidersBuilder() *cobra.Command {
	opts := listIdentityProvidersOpts{}
	cmd := &cobra.Command{
		Use:   "listIdentityProviders",
		Short: "Return all identity providers from the specified federation.",
		PreRunE: func(cmd *cobra.Command, args []string) error {
			return opts.PreRunE(
				opts.initClient(),
			)
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			return opts.Run(cmd.Context(), cmd.OutOrStdout())
		},
	}
	cmd.Flags().StringVar(&opts.federationSettingsId, "federationSettingsId", "", `Unique 24-hexadecimal digit string that identifies your federation.`)

	cmd.Flags().StringVarP(&opts.Output, flag.Output, flag.OutputShort, "", usage.FormatOut)
	_ = cmd.RegisterFlagCompletionFunc(flag.Output, opts.AutoCompleteOutputFlag())

	_ = cmd.MarkFlagRequired("federationSettingsId")
	return cmd
}

type listRoleMappingsOpts struct {
	cli.GlobalOpts
	cli.OutputOpts
	client               *admin.APIClient
	federationSettingsId string
	orgId                string
}

func (opts *listRoleMappingsOpts) initClient() func() error {
	return func() error {
		var err error
		opts.client, err = newClientWithAuth()
		return err
	}
}

func (opts *listRoleMappingsOpts) Run(ctx context.Context, w io.Writer) error {
	params := &admin.ListRoleMappingsApiParams{
		FederationSettingsId: opts.federationSettingsId,
		OrgId:                opts.orgId,
	}
	resp, _, err := opts.client.FederatedAuthenticationApi.ListRoleMappingsWithParams(ctx, params).Execute()
	if err != nil {
		return err
	}

	return jsonwriter.Print(w, resp)
}

func listRoleMappingsBuilder() *cobra.Command {
	opts := listRoleMappingsOpts{}
	cmd := &cobra.Command{
		Use:   "listRoleMappings",
		Short: "Return All Role Mappings from One Organization",
		PreRunE: func(cmd *cobra.Command, args []string) error {
			return opts.PreRunE(
				opts.initClient(),
			)
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			return opts.Run(cmd.Context(), cmd.OutOrStdout())
		},
	}
	cmd.Flags().StringVar(&opts.federationSettingsId, "federationSettingsId", "", `Unique 24-hexadecimal digit string that identifies your federation.`)
	cmd.Flags().StringVar(&opts.orgId, "orgId", "", `Unique 24-hexadecimal digit string that identifies the organization that contains your projects. Use the [/orgs](#tag/Organizations/operation/listOrganizations) endpoint to retrieve all organizations to which the authenticated user has access.`)

	cmd.Flags().StringVarP(&opts.Output, flag.Output, flag.OutputShort, "", usage.FormatOut)
	_ = cmd.RegisterFlagCompletionFunc(flag.Output, opts.AutoCompleteOutputFlag())

	_ = cmd.MarkFlagRequired("federationSettingsId")
	_ = cmd.MarkFlagRequired("orgId")
	return cmd
}

type removeConnectedOrgConfigOpts struct {
	cli.GlobalOpts
	cli.OutputOpts
	client               *admin.APIClient
	federationSettingsId string
	orgId                string
}

func (opts *removeConnectedOrgConfigOpts) initClient() func() error {
	return func() error {
		var err error
		opts.client, err = newClientWithAuth()
		return err
	}
}

func (opts *removeConnectedOrgConfigOpts) Run(ctx context.Context, w io.Writer) error {
	params := &admin.RemoveConnectedOrgConfigApiParams{
		FederationSettingsId: opts.federationSettingsId,
		OrgId:                opts.orgId,
	}
	resp, _, err := opts.client.FederatedAuthenticationApi.RemoveConnectedOrgConfigWithParams(ctx, params).Execute()
	if err != nil {
		return err
	}

	return jsonwriter.Print(w, resp)
}

func removeConnectedOrgConfigBuilder() *cobra.Command {
	opts := removeConnectedOrgConfigOpts{}
	cmd := &cobra.Command{
		Use:   "removeConnectedOrgConfig",
		Short: "Remove One Org Config Connected to One Federation",
		PreRunE: func(cmd *cobra.Command, args []string) error {
			return opts.PreRunE(
				opts.initClient(),
			)
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			return opts.Run(cmd.Context(), cmd.OutOrStdout())
		},
	}
	cmd.Flags().StringVar(&opts.federationSettingsId, "federationSettingsId", "", `Unique 24-hexadecimal digit string that identifies your federation.`)
	cmd.Flags().StringVar(&opts.orgId, "orgId", "", `Unique 24-hexadecimal digit string that identifies the connected organization configuration to remove.`)

	cmd.Flags().StringVarP(&opts.Output, flag.Output, flag.OutputShort, "", usage.FormatOut)
	_ = cmd.RegisterFlagCompletionFunc(flag.Output, opts.AutoCompleteOutputFlag())

	_ = cmd.MarkFlagRequired("federationSettingsId")
	_ = cmd.MarkFlagRequired("orgId")
	return cmd
}

type updateConnectedOrgConfigOpts struct {
	cli.GlobalOpts
	cli.OutputOpts
	client               *admin.APIClient
	federationSettingsId string
	orgId                string

	filename string
	fs       afero.Fs
}

func (opts *updateConnectedOrgConfigOpts) initClient() func() error {
	return func() error {
		var err error
		opts.client, err = newClientWithAuth()
		return err
	}
}

func (opts *updateConnectedOrgConfigOpts) readData() (*admin.ConnectedOrgConfig, error) {
	var out *admin.ConnectedOrgConfig

	var buf []byte
	var err error
	if opts.filename == "" {
		buf, err = io.ReadAll(os.Stdin)
	} else {
		if exists, errExists := afero.Exists(opts.fs, opts.filename); !exists || errExists != nil {
			return nil, fmt.Errorf("file not found: %s", opts.filename)
		}
		buf, err = afero.ReadFile(opts.fs, opts.filename)
	}
	if err != nil {
		return nil, err
	}
	if err = json.Unmarshal(buf, &out); err != nil {
		return nil, err
	}
	return out, nil
}

func (opts *updateConnectedOrgConfigOpts) Run(ctx context.Context, w io.Writer) error {
	data, errData := opts.readData()
	if errData != nil {
		return errData
	}
	params := &admin.UpdateConnectedOrgConfigApiParams{
		FederationSettingsId: opts.federationSettingsId,
		OrgId:                opts.orgId,

		ConnectedOrgConfig: data,
	}
	resp, _, err := opts.client.FederatedAuthenticationApi.UpdateConnectedOrgConfigWithParams(ctx, params).Execute()
	if err != nil {
		return err
	}

	return jsonwriter.Print(w, resp)
}

func updateConnectedOrgConfigBuilder() *cobra.Command {
	opts := updateConnectedOrgConfigOpts{
		fs: afero.NewOsFs(),
	}
	cmd := &cobra.Command{
		Use:   "updateConnectedOrgConfig",
		Short: "Update One Org Config Connected to One Federation",
		PreRunE: func(cmd *cobra.Command, args []string) error {
			return opts.PreRunE(
				opts.initClient(),
			)
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			return opts.Run(cmd.Context(), cmd.OutOrStdout())
		},
	}
	cmd.Flags().StringVar(&opts.federationSettingsId, "federationSettingsId", "", `Unique 24-hexadecimal digit string that identifies your federation.`)
	cmd.Flags().StringVar(&opts.orgId, "orgId", "", `Unique 24-hexadecimal digit string that identifies the connected organization configuration to update.`)

	cmd.Flags().StringVarP(&opts.filename, "file", "f", "", "Path to an optional JSON configuration file if not passed stdin is expected")

	cmd.Flags().StringVarP(&opts.filename, "file", "f", "", "Path to an optional JSON configuration file if not passed stdin is expected")

	cmd.Flags().StringVarP(&opts.filename, "file", "f", "", "Path to an optional JSON configuration file if not passed stdin is expected")

	cmd.Flags().StringVarP(&opts.filename, "file", "f", "", "Path to an optional JSON configuration file if not passed stdin is expected")

	cmd.Flags().StringVarP(&opts.filename, "file", "f", "", "Path to an optional JSON configuration file if not passed stdin is expected")

	cmd.Flags().StringVarP(&opts.filename, "file", "f", "", "Path to an optional JSON configuration file if not passed stdin is expected")

	cmd.Flags().StringVarP(&opts.filename, "file", "f", "", "Path to an optional JSON configuration file if not passed stdin is expected")

	cmd.Flags().StringVarP(&opts.filename, "file", "f", "", "Path to an optional JSON configuration file if not passed stdin is expected")

	cmd.Flags().StringVarP(&opts.Output, flag.Output, flag.OutputShort, "", usage.FormatOut)
	_ = cmd.RegisterFlagCompletionFunc(flag.Output, opts.AutoCompleteOutputFlag())

	_ = cmd.MarkFlagRequired("federationSettingsId")
	_ = cmd.MarkFlagRequired("orgId")
	return cmd
}

type updateIdentityProviderOpts struct {
	cli.GlobalOpts
	cli.OutputOpts
	client               *admin.APIClient
	federationSettingsId string
	identityProviderId   string

	filename string
	fs       afero.Fs
}

func (opts *updateIdentityProviderOpts) initClient() func() error {
	return func() error {
		var err error
		opts.client, err = newClientWithAuth()
		return err
	}
}

func (opts *updateIdentityProviderOpts) readData() (*admin.SamlIdentityProviderUpdate, error) {
	var out *admin.SamlIdentityProviderUpdate

	var buf []byte
	var err error
	if opts.filename == "" {
		buf, err = io.ReadAll(os.Stdin)
	} else {
		if exists, errExists := afero.Exists(opts.fs, opts.filename); !exists || errExists != nil {
			return nil, fmt.Errorf("file not found: %s", opts.filename)
		}
		buf, err = afero.ReadFile(opts.fs, opts.filename)
	}
	if err != nil {
		return nil, err
	}
	if err = json.Unmarshal(buf, &out); err != nil {
		return nil, err
	}
	return out, nil
}

func (opts *updateIdentityProviderOpts) Run(ctx context.Context, w io.Writer) error {
	data, errData := opts.readData()
	if errData != nil {
		return errData
	}
	params := &admin.UpdateIdentityProviderApiParams{
		FederationSettingsId: opts.federationSettingsId,
		IdentityProviderId:   opts.identityProviderId,

		SamlIdentityProviderUpdate: data,
	}
	resp, _, err := opts.client.FederatedAuthenticationApi.UpdateIdentityProviderWithParams(ctx, params).Execute()
	if err != nil {
		return err
	}

	return jsonwriter.Print(w, resp)
}

func updateIdentityProviderBuilder() *cobra.Command {
	opts := updateIdentityProviderOpts{
		fs: afero.NewOsFs(),
	}
	cmd := &cobra.Command{
		Use:   "updateIdentityProvider",
		Short: "Update the identity provider.",
		PreRunE: func(cmd *cobra.Command, args []string) error {
			return opts.PreRunE(
				opts.initClient(),
			)
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			return opts.Run(cmd.Context(), cmd.OutOrStdout())
		},
	}
	cmd.Flags().StringVar(&opts.federationSettingsId, "federationSettingsId", "", `Unique 24-hexadecimal digit string that identifies your federation.`)
	cmd.Flags().StringVar(&opts.identityProviderId, "identityProviderId", "", `Unique 20-hexadecimal digit string that identifies the identity provider.`)

	cmd.Flags().StringVarP(&opts.filename, "file", "f", "", "Path to an optional JSON configuration file if not passed stdin is expected")

	cmd.Flags().StringVarP(&opts.filename, "file", "f", "", "Path to an optional JSON configuration file if not passed stdin is expected")

	cmd.Flags().StringVarP(&opts.filename, "file", "f", "", "Path to an optional JSON configuration file if not passed stdin is expected")

	cmd.Flags().StringVarP(&opts.filename, "file", "f", "", "Path to an optional JSON configuration file if not passed stdin is expected")

	cmd.Flags().StringVarP(&opts.filename, "file", "f", "", "Path to an optional JSON configuration file if not passed stdin is expected")

	cmd.Flags().StringVarP(&opts.filename, "file", "f", "", "Path to an optional JSON configuration file if not passed stdin is expected")

	cmd.Flags().StringVarP(&opts.filename, "file", "f", "", "Path to an optional JSON configuration file if not passed stdin is expected")

	cmd.Flags().StringVarP(&opts.filename, "file", "f", "", "Path to an optional JSON configuration file if not passed stdin is expected")

	cmd.Flags().StringVarP(&opts.filename, "file", "f", "", "Path to an optional JSON configuration file if not passed stdin is expected")

	cmd.Flags().StringVarP(&opts.filename, "file", "f", "", "Path to an optional JSON configuration file if not passed stdin is expected")

	cmd.Flags().StringVarP(&opts.filename, "file", "f", "", "Path to an optional JSON configuration file if not passed stdin is expected")

	cmd.Flags().StringVarP(&opts.Output, flag.Output, flag.OutputShort, "", usage.FormatOut)
	_ = cmd.RegisterFlagCompletionFunc(flag.Output, opts.AutoCompleteOutputFlag())

	_ = cmd.MarkFlagRequired("federationSettingsId")
	_ = cmd.MarkFlagRequired("identityProviderId")
	return cmd
}

type updateRoleMappingOpts struct {
	cli.GlobalOpts
	cli.OutputOpts
	client               *admin.APIClient
	federationSettingsId string
	id                   string
	orgId                string

	filename string
	fs       afero.Fs
}

func (opts *updateRoleMappingOpts) initClient() func() error {
	return func() error {
		var err error
		opts.client, err = newClientWithAuth()
		return err
	}
}

func (opts *updateRoleMappingOpts) readData() (*admin.AuthFederationRoleMapping, error) {
	var out *admin.AuthFederationRoleMapping

	var buf []byte
	var err error
	if opts.filename == "" {
		buf, err = io.ReadAll(os.Stdin)
	} else {
		if exists, errExists := afero.Exists(opts.fs, opts.filename); !exists || errExists != nil {
			return nil, fmt.Errorf("file not found: %s", opts.filename)
		}
		buf, err = afero.ReadFile(opts.fs, opts.filename)
	}
	if err != nil {
		return nil, err
	}
	if err = json.Unmarshal(buf, &out); err != nil {
		return nil, err
	}
	return out, nil
}

func (opts *updateRoleMappingOpts) Run(ctx context.Context, w io.Writer) error {
	data, errData := opts.readData()
	if errData != nil {
		return errData
	}
	params := &admin.UpdateRoleMappingApiParams{
		FederationSettingsId: opts.federationSettingsId,
		Id:                   opts.id,
		OrgId:                opts.orgId,

		AuthFederationRoleMapping: data,
	}
	resp, _, err := opts.client.FederatedAuthenticationApi.UpdateRoleMappingWithParams(ctx, params).Execute()
	if err != nil {
		return err
	}

	return jsonwriter.Print(w, resp)
}

func updateRoleMappingBuilder() *cobra.Command {
	opts := updateRoleMappingOpts{
		fs: afero.NewOsFs(),
	}
	cmd := &cobra.Command{
		Use:   "updateRoleMapping",
		Short: "Update One Role Mapping in One Organization",
		PreRunE: func(cmd *cobra.Command, args []string) error {
			return opts.PreRunE(
				opts.initClient(),
			)
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			return opts.Run(cmd.Context(), cmd.OutOrStdout())
		},
	}
	cmd.Flags().StringVar(&opts.federationSettingsId, "federationSettingsId", "", `Unique 24-hexadecimal digit string that identifies your federation.`)
	cmd.Flags().StringVar(&opts.id, "id", "", `Unique 24-hexadecimal digit string that identifies the role mapping that you want to update.`)
	cmd.Flags().StringVar(&opts.orgId, "orgId", "", `Unique 24-hexadecimal digit string that identifies the organization that contains your projects. Use the [/orgs](#tag/Organizations/operation/listOrganizations) endpoint to retrieve all organizations to which the authenticated user has access.`)

	cmd.Flags().StringVarP(&opts.filename, "file", "f", "", "Path to an optional JSON configuration file if not passed stdin is expected")

	cmd.Flags().StringVarP(&opts.filename, "file", "f", "", "Path to an optional JSON configuration file if not passed stdin is expected")

	cmd.Flags().StringVarP(&opts.filename, "file", "f", "", "Path to an optional JSON configuration file if not passed stdin is expected")

	cmd.Flags().StringVarP(&opts.Output, flag.Output, flag.OutputShort, "", usage.FormatOut)
	_ = cmd.RegisterFlagCompletionFunc(flag.Output, opts.AutoCompleteOutputFlag())

	_ = cmd.MarkFlagRequired("federationSettingsId")
	_ = cmd.MarkFlagRequired("id")
	_ = cmd.MarkFlagRequired("orgId")
	return cmd
}

func federatedAuthenticationBuilder() *cobra.Command {
	cmd := &cobra.Command{
		Use:   "federatedAuthentication",
		Short: `Returns, adds, edits, and removes federation-related features such as role mappings and connected organization configurations.`,
	}
	cmd.AddCommand(
		createRoleMappingBuilder(),
		deleteFederationAppBuilder(),
		deleteRoleMappingBuilder(),
		getConnectedOrgConfigBuilder(),
		getFederationSettingsBuilder(),
		getIdentityProviderBuilder(),
		getIdentityProviderMetadataBuilder(),
		getRoleMappingBuilder(),
		listConnectedOrgConfigsBuilder(),
		listIdentityProvidersBuilder(),
		listRoleMappingsBuilder(),
		removeConnectedOrgConfigBuilder(),
		updateConnectedOrgConfigBuilder(),
		updateIdentityProviderBuilder(),
		updateRoleMappingBuilder(),
	)
	return cmd
}
