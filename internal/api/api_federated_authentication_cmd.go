// Copyright 2024 MongoDB Inc
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"context"
	"encoding/hex"
	"encoding/json"
	"errors"
	"fmt"
	"io"
	"strings"
	"text/template"

	"github.com/mongodb/mongodb-atlas-cli/atlascli/internal/cli"
	"github.com/mongodb/mongodb-atlas-cli/atlascli/internal/config"
	"github.com/spf13/afero"
	"github.com/spf13/cobra"
	"go.mongodb.org/atlas-sdk/v20231115012/admin"
)

type createIdentityProviderOpts struct {
	client               *admin.APIClient
	federationSettingsId string

	filename string
	fs       afero.Fs
	format   string
	tmpl     *template.Template
	resp     *admin.FederationOidcIdentityProvider
}

func (opts *createIdentityProviderOpts) preRun() (err error) {
	if opts.client, err = newClientWithAuth(config.UserAgent, config.Default()); err != nil {
		return err
	}

	if opts.format != "" {
		if opts.tmpl, err = template.New("").Parse(strings.ReplaceAll(opts.format, "\\n", "\n") + "\n"); err != nil {
			return err
		}
	}

	return nil
}

func (opts *createIdentityProviderOpts) readData(r io.Reader) (*admin.FederationOidcIdentityProviderUpdate, error) {
	var out *admin.FederationOidcIdentityProviderUpdate

	var buf []byte
	var err error
	if opts.filename == "" {
		buf, err = io.ReadAll(r)
	} else {
		if exists, errExists := afero.Exists(opts.fs, opts.filename); !exists || errExists != nil {
			return nil, fmt.Errorf("file not found: %s", opts.filename)
		}
		buf, err = afero.ReadFile(opts.fs, opts.filename)
	}
	if err != nil {
		return nil, err
	}
	if err = json.Unmarshal(buf, &out); err != nil {
		return nil, err
	}
	return out, nil
}

func (opts *createIdentityProviderOpts) run(ctx context.Context, r io.Reader) error {
	data, errData := opts.readData(r)
	if errData != nil {
		return errData
	}

	params := &admin.CreateIdentityProviderApiParams{
		FederationSettingsId: opts.federationSettingsId,

		FederationOidcIdentityProviderUpdate: data,
	}

	var err error
	opts.resp, _, err = opts.client.FederatedAuthenticationApi.CreateIdentityProviderWithParams(ctx, params).Execute()
	return err
}

func (opts *createIdentityProviderOpts) postRun(_ context.Context, w io.Writer) error {

	prettyJSON, errJson := json.MarshalIndent(opts.resp, "", " ")
	if errJson != nil {
		return errJson
	}

	if opts.format == "" {
		_, err := fmt.Fprintln(w, string(prettyJSON))
		return err
	}

	var parsedJSON interface{}
	if err := json.Unmarshal([]byte(prettyJSON), &parsedJSON); err != nil {
		return err
	}

	return opts.tmpl.Execute(w, parsedJSON)
}

func createIdentityProviderBuilder() *cobra.Command {
	opts := createIdentityProviderOpts{
		fs: afero.NewOsFs(),
	}
	cmd := &cobra.Command{
		Use:   "createIdentityProvider",
		Short: "Create one identity provider",
		PreRunE: func(cmd *cobra.Command, args []string) error {
			return opts.preRun()
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			return opts.run(cmd.Context(), cmd.InOrStdin())
		},
		PostRunE: func(cmd *cobra.Command, args []string) error {
			return opts.postRun(cmd.Context(), cmd.OutOrStdout())
		},
	}
	cmd.Flags().StringVar(&opts.federationSettingsId, "federationSettingsId", "", `Unique 24-hexadecimal digit string that identifies your federation.`)

	cmd.Flags().StringVarP(&opts.filename, "file", "f", "", "Path to an optional JSON configuration file if not passed stdin is expected")

	_ = cmd.MarkFlagRequired("federationSettingsId")
	cmd.Flags().StringVar(&opts.format, "format", "", "Format of the output")
	return cmd
}

type createRoleMappingOpts struct {
	client               *admin.APIClient
	federationSettingsId string
	orgId                string

	filename string
	fs       afero.Fs
	format   string
	tmpl     *template.Template
	resp     *admin.AuthFederationRoleMapping
}

func (opts *createRoleMappingOpts) preRun() (err error) {
	if opts.client, err = newClientWithAuth(config.UserAgent, config.Default()); err != nil {
		return err
	}

	if opts.orgId == "" {
		opts.orgId = config.OrgID()
	}
	if opts.orgId == "" {
		return errors.New(`required flag(s) "orgId" not set`)
	}
	b, errDecode := hex.DecodeString(opts.orgId)
	if errDecode != nil || len(b) != 12 {
		return fmt.Errorf("the provided value '%s' is not a valid ID", opts.orgId)
	}

	if opts.format != "" {
		if opts.tmpl, err = template.New("").Parse(strings.ReplaceAll(opts.format, "\\n", "\n") + "\n"); err != nil {
			return err
		}
	}

	return nil
}

func (opts *createRoleMappingOpts) readData(r io.Reader) (*admin.AuthFederationRoleMapping, error) {
	var out *admin.AuthFederationRoleMapping

	var buf []byte
	var err error
	if opts.filename == "" {
		buf, err = io.ReadAll(r)
	} else {
		if exists, errExists := afero.Exists(opts.fs, opts.filename); !exists || errExists != nil {
			return nil, fmt.Errorf("file not found: %s", opts.filename)
		}
		buf, err = afero.ReadFile(opts.fs, opts.filename)
	}
	if err != nil {
		return nil, err
	}
	if err = json.Unmarshal(buf, &out); err != nil {
		return nil, err
	}
	return out, nil
}

func (opts *createRoleMappingOpts) run(ctx context.Context, r io.Reader) error {
	data, errData := opts.readData(r)
	if errData != nil {
		return errData
	}

	params := &admin.CreateRoleMappingApiParams{
		FederationSettingsId: opts.federationSettingsId,
		OrgId:                opts.orgId,

		AuthFederationRoleMapping: data,
	}

	var err error
	opts.resp, _, err = opts.client.FederatedAuthenticationApi.CreateRoleMappingWithParams(ctx, params).Execute()
	return err
}

func (opts *createRoleMappingOpts) postRun(_ context.Context, w io.Writer) error {

	prettyJSON, errJson := json.MarshalIndent(opts.resp, "", " ")
	if errJson != nil {
		return errJson
	}

	if opts.format == "" {
		_, err := fmt.Fprintln(w, string(prettyJSON))
		return err
	}

	var parsedJSON interface{}
	if err := json.Unmarshal([]byte(prettyJSON), &parsedJSON); err != nil {
		return err
	}

	return opts.tmpl.Execute(w, parsedJSON)
}

func createRoleMappingBuilder() *cobra.Command {
	opts := createRoleMappingOpts{
		fs: afero.NewOsFs(),
	}
	cmd := &cobra.Command{
		Use:   "createRoleMapping",
		Short: "Add One Role Mapping to One Organization",
		PreRunE: func(cmd *cobra.Command, args []string) error {
			return opts.preRun()
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			return opts.run(cmd.Context(), cmd.InOrStdin())
		},
		PostRunE: func(cmd *cobra.Command, args []string) error {
			return opts.postRun(cmd.Context(), cmd.OutOrStdout())
		},
	}
	cmd.Flags().StringVar(&opts.federationSettingsId, "federationSettingsId", "", `Unique 24-hexadecimal digit string that identifies your federation.`)
	cmd.Flags().StringVar(&opts.orgId, "orgId", "", `Unique 24-hexadecimal digit string that identifies the organization`)

	cmd.Flags().StringVarP(&opts.filename, "file", "f", "", "Path to an optional JSON configuration file if not passed stdin is expected")

	_ = cmd.MarkFlagRequired("federationSettingsId")
	cmd.Flags().StringVar(&opts.format, "format", "", "Format of the output")
	return cmd
}

type deleteFederationAppOpts struct {
	client               *admin.APIClient
	federationSettingsId string
}

func (opts *deleteFederationAppOpts) preRun() (err error) {
	if opts.client, err = newClientWithAuth(config.UserAgent, config.Default()); err != nil {
		return err
	}

	return nil
}

func (opts *deleteFederationAppOpts) run(ctx context.Context, _ io.Reader) error {

	params := &admin.DeleteFederationAppApiParams{
		FederationSettingsId: opts.federationSettingsId,
	}

	var err error
	_, err = opts.client.FederatedAuthenticationApi.DeleteFederationAppWithParams(ctx, params).Execute()
	return err
}

func (opts *deleteFederationAppOpts) postRun(_ context.Context, _ io.Writer) error {

	return nil
}

func deleteFederationAppBuilder() *cobra.Command {
	opts := deleteFederationAppOpts{}
	cmd := &cobra.Command{
		Use:   "deleteFederationApp",
		Short: "Delete the federation settings instance.",
		PreRunE: func(cmd *cobra.Command, args []string) error {
			return opts.preRun()
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			return opts.run(cmd.Context(), cmd.InOrStdin())
		},
		PostRunE: func(cmd *cobra.Command, args []string) error {
			return opts.postRun(cmd.Context(), cmd.OutOrStdout())
		},
	}
	cmd.Flags().StringVar(&opts.federationSettingsId, "federationSettingsId", "", `Unique 24-hexadecimal digit string that identifies your federation.`)

	_ = cmd.MarkFlagRequired("federationSettingsId")
	return cmd
}

type deleteIdentityProviderOpts struct {
	client               *admin.APIClient
	federationSettingsId string
	identityProviderId   string
}

func (opts *deleteIdentityProviderOpts) preRun() (err error) {
	if opts.client, err = newClientWithAuth(config.UserAgent, config.Default()); err != nil {
		return err
	}

	return nil
}

func (opts *deleteIdentityProviderOpts) run(ctx context.Context, _ io.Reader) error {

	params := &admin.DeleteIdentityProviderApiParams{
		FederationSettingsId: opts.federationSettingsId,
		IdentityProviderId:   opts.identityProviderId,
	}

	var err error
	_, err = opts.client.FederatedAuthenticationApi.DeleteIdentityProviderWithParams(ctx, params).Execute()
	return err
}

func (opts *deleteIdentityProviderOpts) postRun(_ context.Context, _ io.Writer) error {

	return nil
}

func deleteIdentityProviderBuilder() *cobra.Command {
	opts := deleteIdentityProviderOpts{}
	cmd := &cobra.Command{
		Use:   "deleteIdentityProvider",
		Short: "Delete the identity provider.",
		PreRunE: func(cmd *cobra.Command, args []string) error {
			return opts.preRun()
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			return opts.run(cmd.Context(), cmd.InOrStdin())
		},
		PostRunE: func(cmd *cobra.Command, args []string) error {
			return opts.postRun(cmd.Context(), cmd.OutOrStdout())
		},
	}
	cmd.Flags().StringVar(&opts.federationSettingsId, "federationSettingsId", "", `Unique 24-hexadecimal digit string that identifies your federation.`)
	cmd.Flags().StringVar(&opts.identityProviderId, "identityProviderId", "", `Unique 24-hexadecimal digit string that identifies the identity provider to connect.`)

	_ = cmd.MarkFlagRequired("federationSettingsId")
	_ = cmd.MarkFlagRequired("identityProviderId")
	return cmd
}

type deleteRoleMappingOpts struct {
	client               *admin.APIClient
	federationSettingsId string
	id                   string
	orgId                string
}

func (opts *deleteRoleMappingOpts) preRun() (err error) {
	if opts.client, err = newClientWithAuth(config.UserAgent, config.Default()); err != nil {
		return err
	}

	if opts.orgId == "" {
		opts.orgId = config.OrgID()
	}
	if opts.orgId == "" {
		return errors.New(`required flag(s) "orgId" not set`)
	}
	b, errDecode := hex.DecodeString(opts.orgId)
	if errDecode != nil || len(b) != 12 {
		return fmt.Errorf("the provided value '%s' is not a valid ID", opts.orgId)
	}

	return nil
}

func (opts *deleteRoleMappingOpts) run(ctx context.Context, _ io.Reader) error {

	params := &admin.DeleteRoleMappingApiParams{
		FederationSettingsId: opts.federationSettingsId,
		Id:                   opts.id,
		OrgId:                opts.orgId,
	}

	var err error
	_, err = opts.client.FederatedAuthenticationApi.DeleteRoleMappingWithParams(ctx, params).Execute()
	return err
}

func (opts *deleteRoleMappingOpts) postRun(_ context.Context, _ io.Writer) error {

	return nil
}

func deleteRoleMappingBuilder() *cobra.Command {
	opts := deleteRoleMappingOpts{}
	cmd := &cobra.Command{
		Use:   "deleteRoleMapping",
		Short: "Remove One Role Mapping from One Organization",
		PreRunE: func(cmd *cobra.Command, args []string) error {
			return opts.preRun()
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			return opts.run(cmd.Context(), cmd.InOrStdin())
		},
		PostRunE: func(cmd *cobra.Command, args []string) error {
			return opts.postRun(cmd.Context(), cmd.OutOrStdout())
		},
	}
	cmd.Flags().StringVar(&opts.federationSettingsId, "federationSettingsId", "", `Unique 24-hexadecimal digit string that identifies your federation.`)
	cmd.Flags().StringVar(&opts.id, "id", "", `Unique 24-hexadecimal digit string that identifies the role mapping that you want to remove.`)
	cmd.Flags().StringVar(&opts.orgId, "orgId", "", `Unique 24-hexadecimal digit string that identifies the organization`)

	_ = cmd.MarkFlagRequired("federationSettingsId")
	_ = cmd.MarkFlagRequired("id")
	return cmd
}

type getConnectedOrgConfigOpts struct {
	client               *admin.APIClient
	federationSettingsId string
	orgId                string
	format               string
	tmpl                 *template.Template
	resp                 *admin.ConnectedOrgConfig
}

func (opts *getConnectedOrgConfigOpts) preRun() (err error) {
	if opts.client, err = newClientWithAuth(config.UserAgent, config.Default()); err != nil {
		return err
	}

	if opts.format != "" {
		if opts.tmpl, err = template.New("").Parse(strings.ReplaceAll(opts.format, "\\n", "\n") + "\n"); err != nil {
			return err
		}
	}

	return nil
}

func (opts *getConnectedOrgConfigOpts) run(ctx context.Context, _ io.Reader) error {

	params := &admin.GetConnectedOrgConfigApiParams{
		FederationSettingsId: opts.federationSettingsId,
		OrgId:                opts.orgId,
	}

	var err error
	opts.resp, _, err = opts.client.FederatedAuthenticationApi.GetConnectedOrgConfigWithParams(ctx, params).Execute()
	return err
}

func (opts *getConnectedOrgConfigOpts) postRun(_ context.Context, w io.Writer) error {

	prettyJSON, errJson := json.MarshalIndent(opts.resp, "", " ")
	if errJson != nil {
		return errJson
	}

	if opts.format == "" {
		_, err := fmt.Fprintln(w, string(prettyJSON))
		return err
	}

	var parsedJSON interface{}
	if err := json.Unmarshal([]byte(prettyJSON), &parsedJSON); err != nil {
		return err
	}

	return opts.tmpl.Execute(w, parsedJSON)
}

func getConnectedOrgConfigBuilder() *cobra.Command {
	opts := getConnectedOrgConfigOpts{}
	cmd := &cobra.Command{
		Use:   "getConnectedOrgConfig",
		Short: "Return One Org Config Connected to One Federation",
		PreRunE: func(cmd *cobra.Command, args []string) error {
			return opts.preRun()
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			return opts.run(cmd.Context(), cmd.InOrStdin())
		},
		PostRunE: func(cmd *cobra.Command, args []string) error {
			return opts.postRun(cmd.Context(), cmd.OutOrStdout())
		},
	}
	cmd.Flags().StringVar(&opts.federationSettingsId, "federationSettingsId", "", `Unique 24-hexadecimal digit string that identifies your federation.`)
	cmd.Flags().StringVar(&opts.orgId, "orgId", "", `Unique 24-hexadecimal digit string that identifies the connected organization configuration to return.`)

	_ = cmd.MarkFlagRequired("federationSettingsId")
	_ = cmd.MarkFlagRequired("orgId")
	cmd.Flags().StringVar(&opts.format, "format", "", "Format of the output")
	return cmd
}

type getFederationSettingsOpts struct {
	client *admin.APIClient
	orgId  string
	format string
	tmpl   *template.Template
	resp   *admin.OrgFederationSettings
}

func (opts *getFederationSettingsOpts) preRun() (err error) {
	if opts.client, err = newClientWithAuth(config.UserAgent, config.Default()); err != nil {
		return err
	}

	if opts.orgId == "" {
		opts.orgId = config.OrgID()
	}
	if opts.orgId == "" {
		return errors.New(`required flag(s) "orgId" not set`)
	}
	b, errDecode := hex.DecodeString(opts.orgId)
	if errDecode != nil || len(b) != 12 {
		return fmt.Errorf("the provided value '%s' is not a valid ID", opts.orgId)
	}

	if opts.format != "" {
		if opts.tmpl, err = template.New("").Parse(strings.ReplaceAll(opts.format, "\\n", "\n") + "\n"); err != nil {
			return err
		}
	}

	return nil
}

func (opts *getFederationSettingsOpts) run(ctx context.Context, _ io.Reader) error {

	params := &admin.GetFederationSettingsApiParams{
		OrgId: opts.orgId,
	}

	var err error
	opts.resp, _, err = opts.client.FederatedAuthenticationApi.GetFederationSettingsWithParams(ctx, params).Execute()
	return err
}

func (opts *getFederationSettingsOpts) postRun(_ context.Context, w io.Writer) error {

	prettyJSON, errJson := json.MarshalIndent(opts.resp, "", " ")
	if errJson != nil {
		return errJson
	}

	if opts.format == "" {
		_, err := fmt.Fprintln(w, string(prettyJSON))
		return err
	}

	var parsedJSON interface{}
	if err := json.Unmarshal([]byte(prettyJSON), &parsedJSON); err != nil {
		return err
	}

	return opts.tmpl.Execute(w, parsedJSON)
}

func getFederationSettingsBuilder() *cobra.Command {
	opts := getFederationSettingsOpts{}
	cmd := &cobra.Command{
		Use:   "getFederationSettings",
		Short: "Return Federation Settings for One Organization",
		PreRunE: func(cmd *cobra.Command, args []string) error {
			return opts.preRun()
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			return opts.run(cmd.Context(), cmd.InOrStdin())
		},
		PostRunE: func(cmd *cobra.Command, args []string) error {
			return opts.postRun(cmd.Context(), cmd.OutOrStdout())
		},
	}
	cmd.Flags().StringVar(&opts.orgId, "orgId", "", `Unique 24-hexadecimal digit string that identifies the organization`)

	cmd.Flags().StringVar(&opts.format, "format", "", "Format of the output")
	return cmd
}

type getIdentityProviderOpts struct {
	client               *admin.APIClient
	federationSettingsId string
	identityProviderId   string
	format               string
	tmpl                 *template.Template
	resp                 *admin.FederationIdentityProvider
}

func (opts *getIdentityProviderOpts) preRun() (err error) {
	if opts.client, err = newClientWithAuth(config.UserAgent, config.Default()); err != nil {
		return err
	}

	if opts.format != "" {
		if opts.tmpl, err = template.New("").Parse(strings.ReplaceAll(opts.format, "\\n", "\n") + "\n"); err != nil {
			return err
		}
	}

	return nil
}

func (opts *getIdentityProviderOpts) run(ctx context.Context, _ io.Reader) error {

	params := &admin.GetIdentityProviderApiParams{
		FederationSettingsId: opts.federationSettingsId,
		IdentityProviderId:   opts.identityProviderId,
	}

	var err error
	opts.resp, _, err = opts.client.FederatedAuthenticationApi.GetIdentityProviderWithParams(ctx, params).Execute()
	return err
}

func (opts *getIdentityProviderOpts) postRun(_ context.Context, w io.Writer) error {

	prettyJSON, errJson := json.MarshalIndent(opts.resp, "", " ")
	if errJson != nil {
		return errJson
	}

	if opts.format == "" {
		_, err := fmt.Fprintln(w, string(prettyJSON))
		return err
	}

	var parsedJSON interface{}
	if err := json.Unmarshal([]byte(prettyJSON), &parsedJSON); err != nil {
		return err
	}

	return opts.tmpl.Execute(w, parsedJSON)
}

func getIdentityProviderBuilder() *cobra.Command {
	opts := getIdentityProviderOpts{}
	cmd := &cobra.Command{
		Use:   "getIdentityProvider",
		Short: "Return one identity provider from the specified federation by id.",
		PreRunE: func(cmd *cobra.Command, args []string) error {
			return opts.preRun()
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			return opts.run(cmd.Context(), cmd.InOrStdin())
		},
		PostRunE: func(cmd *cobra.Command, args []string) error {
			return opts.postRun(cmd.Context(), cmd.OutOrStdout())
		},
	}
	cmd.Flags().StringVar(&opts.federationSettingsId, "federationSettingsId", "", `Unique 24-hexadecimal digit string that identifies your federation.`)
	cmd.Flags().StringVar(&opts.identityProviderId, "identityProviderId", "", `Unique string that identifies the identity provider to connect. If using an API version before 11-15-2023, use the legacy 20-hexadecimal digit id. This id can be found within the Federation Management Console &gt; Identity Providers tab by clicking the info icon in the IdP ID row of a configured identity provider. For all other versions, use the 24-hexadecimal digit id.`)

	_ = cmd.MarkFlagRequired("federationSettingsId")
	_ = cmd.MarkFlagRequired("identityProviderId")
	cmd.Flags().StringVar(&opts.format, "format", "", "Format of the output")
	return cmd
}

type getIdentityProviderMetadataOpts struct {
	client               *admin.APIClient
	federationSettingsId string
	identityProviderId   string
	format               string
	tmpl                 *template.Template
	resp                 string
}

func (opts *getIdentityProviderMetadataOpts) preRun() (err error) {
	if opts.client, err = newClientWithAuth(config.UserAgent, config.Default()); err != nil {
		return err
	}

	if opts.format != "" {
		if opts.tmpl, err = template.New("").Parse(strings.ReplaceAll(opts.format, "\\n", "\n") + "\n"); err != nil {
			return err
		}
	}

	return nil
}

func (opts *getIdentityProviderMetadataOpts) run(ctx context.Context, _ io.Reader) error {

	params := &admin.GetIdentityProviderMetadataApiParams{
		FederationSettingsId: opts.federationSettingsId,
		IdentityProviderId:   opts.identityProviderId,
	}

	var err error
	opts.resp, _, err = opts.client.FederatedAuthenticationApi.GetIdentityProviderMetadataWithParams(ctx, params).Execute()
	return err
}

func (opts *getIdentityProviderMetadataOpts) postRun(_ context.Context, w io.Writer) error {

	prettyJSON, errJson := json.MarshalIndent(opts.resp, "", " ")
	if errJson != nil {
		return errJson
	}

	if opts.format == "" {
		_, err := fmt.Fprintln(w, string(prettyJSON))
		return err
	}

	var parsedJSON interface{}
	if err := json.Unmarshal([]byte(prettyJSON), &parsedJSON); err != nil {
		return err
	}

	return opts.tmpl.Execute(w, parsedJSON)
}

func getIdentityProviderMetadataBuilder() *cobra.Command {
	opts := getIdentityProviderMetadataOpts{}
	cmd := &cobra.Command{
		Use:   "getIdentityProviderMetadata",
		Short: "Return the metadata of one identity provider in the specified federation.",
		PreRunE: func(cmd *cobra.Command, args []string) error {
			return opts.preRun()
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			return opts.run(cmd.Context(), cmd.InOrStdin())
		},
		PostRunE: func(cmd *cobra.Command, args []string) error {
			return opts.postRun(cmd.Context(), cmd.OutOrStdout())
		},
	}
	cmd.Flags().StringVar(&opts.federationSettingsId, "federationSettingsId", "", `Unique 24-hexadecimal digit string that identifies your federation.`)
	cmd.Flags().StringVar(&opts.identityProviderId, "identityProviderId", "", `Legacy 20-hexadecimal digit string that identifies the identity provider. This id can be found within the Federation Management Console &gt; Identity Providers tab by clicking the info icon in the IdP ID row of a configured identity provider.`)

	_ = cmd.MarkFlagRequired("federationSettingsId")
	_ = cmd.MarkFlagRequired("identityProviderId")
	cmd.Flags().StringVar(&opts.format, "format", "", "Format of the output")
	return cmd
}

type getRoleMappingOpts struct {
	client               *admin.APIClient
	federationSettingsId string
	id                   string
	orgId                string
	format               string
	tmpl                 *template.Template
	resp                 *admin.AuthFederationRoleMapping
}

func (opts *getRoleMappingOpts) preRun() (err error) {
	if opts.client, err = newClientWithAuth(config.UserAgent, config.Default()); err != nil {
		return err
	}

	if opts.orgId == "" {
		opts.orgId = config.OrgID()
	}
	if opts.orgId == "" {
		return errors.New(`required flag(s) "orgId" not set`)
	}
	b, errDecode := hex.DecodeString(opts.orgId)
	if errDecode != nil || len(b) != 12 {
		return fmt.Errorf("the provided value '%s' is not a valid ID", opts.orgId)
	}

	if opts.format != "" {
		if opts.tmpl, err = template.New("").Parse(strings.ReplaceAll(opts.format, "\\n", "\n") + "\n"); err != nil {
			return err
		}
	}

	return nil
}

func (opts *getRoleMappingOpts) run(ctx context.Context, _ io.Reader) error {

	params := &admin.GetRoleMappingApiParams{
		FederationSettingsId: opts.federationSettingsId,
		Id:                   opts.id,
		OrgId:                opts.orgId,
	}

	var err error
	opts.resp, _, err = opts.client.FederatedAuthenticationApi.GetRoleMappingWithParams(ctx, params).Execute()
	return err
}

func (opts *getRoleMappingOpts) postRun(_ context.Context, w io.Writer) error {

	prettyJSON, errJson := json.MarshalIndent(opts.resp, "", " ")
	if errJson != nil {
		return errJson
	}

	if opts.format == "" {
		_, err := fmt.Fprintln(w, string(prettyJSON))
		return err
	}

	var parsedJSON interface{}
	if err := json.Unmarshal([]byte(prettyJSON), &parsedJSON); err != nil {
		return err
	}

	return opts.tmpl.Execute(w, parsedJSON)
}

func getRoleMappingBuilder() *cobra.Command {
	opts := getRoleMappingOpts{}
	cmd := &cobra.Command{
		Use:   "getRoleMapping",
		Short: "Return One Role Mapping from One Organization",
		PreRunE: func(cmd *cobra.Command, args []string) error {
			return opts.preRun()
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			return opts.run(cmd.Context(), cmd.InOrStdin())
		},
		PostRunE: func(cmd *cobra.Command, args []string) error {
			return opts.postRun(cmd.Context(), cmd.OutOrStdout())
		},
	}
	cmd.Flags().StringVar(&opts.federationSettingsId, "federationSettingsId", "", `Unique 24-hexadecimal digit string that identifies your federation.`)
	cmd.Flags().StringVar(&opts.id, "id", "", `Unique 24-hexadecimal digit string that identifies the role mapping that you want to return.`)
	cmd.Flags().StringVar(&opts.orgId, "orgId", "", `Unique 24-hexadecimal digit string that identifies the organization`)

	_ = cmd.MarkFlagRequired("federationSettingsId")
	_ = cmd.MarkFlagRequired("id")
	cmd.Flags().StringVar(&opts.format, "format", "", "Format of the output")
	return cmd
}

type listConnectedOrgConfigsOpts struct {
	client               *admin.APIClient
	federationSettingsId string
	format               string
	tmpl                 *template.Template
	resp                 []admin.ConnectedOrgConfig
}

func (opts *listConnectedOrgConfigsOpts) preRun() (err error) {
	if opts.client, err = newClientWithAuth(config.UserAgent, config.Default()); err != nil {
		return err
	}

	if opts.format != "" {
		if opts.tmpl, err = template.New("").Parse(strings.ReplaceAll(opts.format, "\\n", "\n") + "\n"); err != nil {
			return err
		}
	}

	return nil
}

func (opts *listConnectedOrgConfigsOpts) run(ctx context.Context, _ io.Reader) error {

	params := &admin.ListConnectedOrgConfigsApiParams{
		FederationSettingsId: opts.federationSettingsId,
	}

	var err error
	opts.resp, _, err = opts.client.FederatedAuthenticationApi.ListConnectedOrgConfigsWithParams(ctx, params).Execute()
	return err
}

func (opts *listConnectedOrgConfigsOpts) postRun(_ context.Context, w io.Writer) error {

	prettyJSON, errJson := json.MarshalIndent(opts.resp, "", " ")
	if errJson != nil {
		return errJson
	}

	if opts.format == "" {
		_, err := fmt.Fprintln(w, string(prettyJSON))
		return err
	}

	var parsedJSON interface{}
	if err := json.Unmarshal([]byte(prettyJSON), &parsedJSON); err != nil {
		return err
	}

	return opts.tmpl.Execute(w, parsedJSON)
}

func listConnectedOrgConfigsBuilder() *cobra.Command {
	opts := listConnectedOrgConfigsOpts{}
	cmd := &cobra.Command{
		Use:   "listConnectedOrgConfigs",
		Short: "Return All Connected Org Configs from the Federation",
		PreRunE: func(cmd *cobra.Command, args []string) error {
			return opts.preRun()
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			return opts.run(cmd.Context(), cmd.InOrStdin())
		},
		PostRunE: func(cmd *cobra.Command, args []string) error {
			return opts.postRun(cmd.Context(), cmd.OutOrStdout())
		},
	}
	cmd.Flags().StringVar(&opts.federationSettingsId, "federationSettingsId", "", `Unique 24-hexadecimal digit string that identifies your federation.`)

	_ = cmd.MarkFlagRequired("federationSettingsId")
	cmd.Flags().StringVar(&opts.format, "format", "", "Format of the output")
	return cmd
}

type listIdentityProvidersOpts struct {
	client               *admin.APIClient
	federationSettingsId string
	itemsPerPage         int
	pageNum              int
	protocol             []string
	idpType              []string
	format               string
	tmpl                 *template.Template
	resp                 *admin.PaginatedFederationIdentityProvider
}

func (opts *listIdentityProvidersOpts) preRun() (err error) {
	if opts.client, err = newClientWithAuth(config.UserAgent, config.Default()); err != nil {
		return err
	}

	if opts.format != "" {
		if opts.tmpl, err = template.New("").Parse(strings.ReplaceAll(opts.format, "\\n", "\n") + "\n"); err != nil {
			return err
		}
	}

	return nil
}

func (opts *listIdentityProvidersOpts) run(ctx context.Context, _ io.Reader) error {

	params := &admin.ListIdentityProvidersApiParams{
		FederationSettingsId: opts.federationSettingsId,
		ItemsPerPage:         &opts.itemsPerPage,
		PageNum:              &opts.pageNum,
		Protocol:             &opts.protocol,
		IdpType:              &opts.idpType,
	}

	var err error
	opts.resp, _, err = opts.client.FederatedAuthenticationApi.ListIdentityProvidersWithParams(ctx, params).Execute()
	return err
}

func (opts *listIdentityProvidersOpts) postRun(_ context.Context, w io.Writer) error {

	prettyJSON, errJson := json.MarshalIndent(opts.resp, "", " ")
	if errJson != nil {
		return errJson
	}

	if opts.format == "" {
		_, err := fmt.Fprintln(w, string(prettyJSON))
		return err
	}

	var parsedJSON interface{}
	if err := json.Unmarshal([]byte(prettyJSON), &parsedJSON); err != nil {
		return err
	}

	return opts.tmpl.Execute(w, parsedJSON)
}

func listIdentityProvidersBuilder() *cobra.Command {
	opts := listIdentityProvidersOpts{}
	cmd := &cobra.Command{
		Use:   "listIdentityProviders",
		Short: "Return all identity providers from the specified federation.",
		PreRunE: func(cmd *cobra.Command, args []string) error {
			return opts.preRun()
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			return opts.run(cmd.Context(), cmd.InOrStdin())
		},
		PostRunE: func(cmd *cobra.Command, args []string) error {
			return opts.postRun(cmd.Context(), cmd.OutOrStdout())
		},
	}
	cmd.Flags().StringVar(&opts.federationSettingsId, "federationSettingsId", "", `Unique 24-hexadecimal digit string that identifies your federation.`)
	cmd.Flags().IntVar(&opts.itemsPerPage, "itemsPerPage", 100, `Number of items that the response returns per page.`)
	cmd.Flags().IntVar(&opts.pageNum, "pageNum", 1, `Number of the page that displays the current set of the total objects that the response returns.`)
	cmd.Flags().StringSliceVar(&opts.protocol, "protocol", nil, `The protocols of the target identity providers.`)
	cmd.Flags().StringSliceVar(&opts.idpType, "idpType", nil, `The types of the target identity providers.`)

	_ = cmd.MarkFlagRequired("federationSettingsId")
	cmd.Flags().StringVar(&opts.format, "format", "", "Format of the output")
	return cmd
}

type listRoleMappingsOpts struct {
	client               *admin.APIClient
	federationSettingsId string
	orgId                string
	format               string
	tmpl                 *template.Template
	resp                 *admin.PaginatedRoleMapping
}

func (opts *listRoleMappingsOpts) preRun() (err error) {
	if opts.client, err = newClientWithAuth(config.UserAgent, config.Default()); err != nil {
		return err
	}

	if opts.orgId == "" {
		opts.orgId = config.OrgID()
	}
	if opts.orgId == "" {
		return errors.New(`required flag(s) "orgId" not set`)
	}
	b, errDecode := hex.DecodeString(opts.orgId)
	if errDecode != nil || len(b) != 12 {
		return fmt.Errorf("the provided value '%s' is not a valid ID", opts.orgId)
	}

	if opts.format != "" {
		if opts.tmpl, err = template.New("").Parse(strings.ReplaceAll(opts.format, "\\n", "\n") + "\n"); err != nil {
			return err
		}
	}

	return nil
}

func (opts *listRoleMappingsOpts) run(ctx context.Context, _ io.Reader) error {

	params := &admin.ListRoleMappingsApiParams{
		FederationSettingsId: opts.federationSettingsId,
		OrgId:                opts.orgId,
	}

	var err error
	opts.resp, _, err = opts.client.FederatedAuthenticationApi.ListRoleMappingsWithParams(ctx, params).Execute()
	return err
}

func (opts *listRoleMappingsOpts) postRun(_ context.Context, w io.Writer) error {

	prettyJSON, errJson := json.MarshalIndent(opts.resp, "", " ")
	if errJson != nil {
		return errJson
	}

	if opts.format == "" {
		_, err := fmt.Fprintln(w, string(prettyJSON))
		return err
	}

	var parsedJSON interface{}
	if err := json.Unmarshal([]byte(prettyJSON), &parsedJSON); err != nil {
		return err
	}

	return opts.tmpl.Execute(w, parsedJSON)
}

func listRoleMappingsBuilder() *cobra.Command {
	opts := listRoleMappingsOpts{}
	cmd := &cobra.Command{
		Use:   "listRoleMappings",
		Short: "Return All Role Mappings from One Organization",
		PreRunE: func(cmd *cobra.Command, args []string) error {
			return opts.preRun()
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			return opts.run(cmd.Context(), cmd.InOrStdin())
		},
		PostRunE: func(cmd *cobra.Command, args []string) error {
			return opts.postRun(cmd.Context(), cmd.OutOrStdout())
		},
	}
	cmd.Flags().StringVar(&opts.federationSettingsId, "federationSettingsId", "", `Unique 24-hexadecimal digit string that identifies your federation.`)
	cmd.Flags().StringVar(&opts.orgId, "orgId", "", `Unique 24-hexadecimal digit string that identifies the organization`)

	_ = cmd.MarkFlagRequired("federationSettingsId")
	cmd.Flags().StringVar(&opts.format, "format", "", "Format of the output")
	return cmd
}

type removeConnectedOrgConfigOpts struct {
	client               *admin.APIClient
	federationSettingsId string
	orgId                string
	format               string
	tmpl                 *template.Template
	resp                 map[string]interface{}
}

func (opts *removeConnectedOrgConfigOpts) preRun() (err error) {
	if opts.client, err = newClientWithAuth(config.UserAgent, config.Default()); err != nil {
		return err
	}

	if opts.format != "" {
		if opts.tmpl, err = template.New("").Parse(strings.ReplaceAll(opts.format, "\\n", "\n") + "\n"); err != nil {
			return err
		}
	}

	return nil
}

func (opts *removeConnectedOrgConfigOpts) run(ctx context.Context, _ io.Reader) error {

	params := &admin.RemoveConnectedOrgConfigApiParams{
		FederationSettingsId: opts.federationSettingsId,
		OrgId:                opts.orgId,
	}

	var err error
	opts.resp, _, err = opts.client.FederatedAuthenticationApi.RemoveConnectedOrgConfigWithParams(ctx, params).Execute()
	return err
}

func (opts *removeConnectedOrgConfigOpts) postRun(_ context.Context, w io.Writer) error {

	prettyJSON, errJson := json.MarshalIndent(opts.resp, "", " ")
	if errJson != nil {
		return errJson
	}

	if opts.format == "" {
		_, err := fmt.Fprintln(w, string(prettyJSON))
		return err
	}

	var parsedJSON interface{}
	if err := json.Unmarshal([]byte(prettyJSON), &parsedJSON); err != nil {
		return err
	}

	return opts.tmpl.Execute(w, parsedJSON)
}

func removeConnectedOrgConfigBuilder() *cobra.Command {
	opts := removeConnectedOrgConfigOpts{}
	cmd := &cobra.Command{
		Use:   "removeConnectedOrgConfig",
		Short: "Remove One Org Config Connected to One Federation",
		PreRunE: func(cmd *cobra.Command, args []string) error {
			return opts.preRun()
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			return opts.run(cmd.Context(), cmd.InOrStdin())
		},
		PostRunE: func(cmd *cobra.Command, args []string) error {
			return opts.postRun(cmd.Context(), cmd.OutOrStdout())
		},
	}
	cmd.Flags().StringVar(&opts.federationSettingsId, "federationSettingsId", "", `Unique 24-hexadecimal digit string that identifies your federation.`)
	cmd.Flags().StringVar(&opts.orgId, "orgId", "", `Unique 24-hexadecimal digit string that identifies the connected organization configuration to remove.`)

	_ = cmd.MarkFlagRequired("federationSettingsId")
	_ = cmd.MarkFlagRequired("orgId")
	cmd.Flags().StringVar(&opts.format, "format", "", "Format of the output")
	return cmd
}

type revokeJwksFromIdentityProviderOpts struct {
	client               *admin.APIClient
	federationSettingsId string
	identityProviderId   string
}

func (opts *revokeJwksFromIdentityProviderOpts) preRun() (err error) {
	if opts.client, err = newClientWithAuth(config.UserAgent, config.Default()); err != nil {
		return err
	}

	return nil
}

func (opts *revokeJwksFromIdentityProviderOpts) run(ctx context.Context, _ io.Reader) error {

	params := &admin.RevokeJwksFromIdentityProviderApiParams{
		FederationSettingsId: opts.federationSettingsId,
		IdentityProviderId:   opts.identityProviderId,
	}

	var err error
	_, err = opts.client.FederatedAuthenticationApi.RevokeJwksFromIdentityProviderWithParams(ctx, params).Execute()
	return err
}

func (opts *revokeJwksFromIdentityProviderOpts) postRun(_ context.Context, _ io.Writer) error {

	return nil
}

func revokeJwksFromIdentityProviderBuilder() *cobra.Command {
	opts := revokeJwksFromIdentityProviderOpts{}
	cmd := &cobra.Command{
		Use:   "revokeJwksFromIdentityProvider",
		Short: "Revoke the JWKS tokens from an OIDC identity provider.",
		PreRunE: func(cmd *cobra.Command, args []string) error {
			return opts.preRun()
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			return opts.run(cmd.Context(), cmd.InOrStdin())
		},
		PostRunE: func(cmd *cobra.Command, args []string) error {
			return opts.postRun(cmd.Context(), cmd.OutOrStdout())
		},
	}
	cmd.Flags().StringVar(&opts.federationSettingsId, "federationSettingsId", "", `Unique 24-hexadecimal digit string that identifies your federation.`)
	cmd.Flags().StringVar(&opts.identityProviderId, "identityProviderId", "", `Unique 24-hexadecimal digit string that identifies the identity provider to connect.`)

	_ = cmd.MarkFlagRequired("federationSettingsId")
	_ = cmd.MarkFlagRequired("identityProviderId")
	return cmd
}

type updateConnectedOrgConfigOpts struct {
	client               *admin.APIClient
	federationSettingsId string
	orgId                string

	filename string
	fs       afero.Fs
	format   string
	tmpl     *template.Template
	resp     *admin.ConnectedOrgConfig
}

func (opts *updateConnectedOrgConfigOpts) preRun() (err error) {
	if opts.client, err = newClientWithAuth(config.UserAgent, config.Default()); err != nil {
		return err
	}

	if opts.format != "" {
		if opts.tmpl, err = template.New("").Parse(strings.ReplaceAll(opts.format, "\\n", "\n") + "\n"); err != nil {
			return err
		}
	}

	return nil
}

func (opts *updateConnectedOrgConfigOpts) readData(r io.Reader) (*admin.ConnectedOrgConfig, error) {
	var out *admin.ConnectedOrgConfig

	var buf []byte
	var err error
	if opts.filename == "" {
		buf, err = io.ReadAll(r)
	} else {
		if exists, errExists := afero.Exists(opts.fs, opts.filename); !exists || errExists != nil {
			return nil, fmt.Errorf("file not found: %s", opts.filename)
		}
		buf, err = afero.ReadFile(opts.fs, opts.filename)
	}
	if err != nil {
		return nil, err
	}
	if err = json.Unmarshal(buf, &out); err != nil {
		return nil, err
	}
	return out, nil
}

func (opts *updateConnectedOrgConfigOpts) run(ctx context.Context, r io.Reader) error {
	data, errData := opts.readData(r)
	if errData != nil {
		return errData
	}

	params := &admin.UpdateConnectedOrgConfigApiParams{
		FederationSettingsId: opts.federationSettingsId,
		OrgId:                opts.orgId,

		ConnectedOrgConfig: data,
	}

	var err error
	opts.resp, _, err = opts.client.FederatedAuthenticationApi.UpdateConnectedOrgConfigWithParams(ctx, params).Execute()
	return err
}

func (opts *updateConnectedOrgConfigOpts) postRun(_ context.Context, w io.Writer) error {

	prettyJSON, errJson := json.MarshalIndent(opts.resp, "", " ")
	if errJson != nil {
		return errJson
	}

	if opts.format == "" {
		_, err := fmt.Fprintln(w, string(prettyJSON))
		return err
	}

	var parsedJSON interface{}
	if err := json.Unmarshal([]byte(prettyJSON), &parsedJSON); err != nil {
		return err
	}

	return opts.tmpl.Execute(w, parsedJSON)
}

func updateConnectedOrgConfigBuilder() *cobra.Command {
	opts := updateConnectedOrgConfigOpts{
		fs: afero.NewOsFs(),
	}
	cmd := &cobra.Command{
		Use:   "updateConnectedOrgConfig",
		Short: "Update One Org Config Connected to One Federation",
		PreRunE: func(cmd *cobra.Command, args []string) error {
			return opts.preRun()
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			return opts.run(cmd.Context(), cmd.InOrStdin())
		},
		PostRunE: func(cmd *cobra.Command, args []string) error {
			return opts.postRun(cmd.Context(), cmd.OutOrStdout())
		},
	}
	cmd.Flags().StringVar(&opts.federationSettingsId, "federationSettingsId", "", `Unique 24-hexadecimal digit string that identifies your federation.`)
	cmd.Flags().StringVar(&opts.orgId, "orgId", "", `Unique 24-hexadecimal digit string that identifies the connected organization configuration to update.`)

	cmd.Flags().StringVarP(&opts.filename, "file", "f", "", "Path to an optional JSON configuration file if not passed stdin is expected")

	_ = cmd.MarkFlagRequired("federationSettingsId")
	_ = cmd.MarkFlagRequired("orgId")
	cmd.Flags().StringVar(&opts.format, "format", "", "Format of the output")
	return cmd
}

type updateIdentityProviderOpts struct {
	client               *admin.APIClient
	federationSettingsId string
	identityProviderId   string

	filename string
	fs       afero.Fs
	format   string
	tmpl     *template.Template
	resp     *admin.FederationIdentityProvider
}

func (opts *updateIdentityProviderOpts) preRun() (err error) {
	if opts.client, err = newClientWithAuth(config.UserAgent, config.Default()); err != nil {
		return err
	}

	if opts.format != "" {
		if opts.tmpl, err = template.New("").Parse(strings.ReplaceAll(opts.format, "\\n", "\n") + "\n"); err != nil {
			return err
		}
	}

	return nil
}

func (opts *updateIdentityProviderOpts) readData(r io.Reader) (*admin.FederationIdentityProviderUpdate, error) {
	var out *admin.FederationIdentityProviderUpdate

	var buf []byte
	var err error
	if opts.filename == "" {
		buf, err = io.ReadAll(r)
	} else {
		if exists, errExists := afero.Exists(opts.fs, opts.filename); !exists || errExists != nil {
			return nil, fmt.Errorf("file not found: %s", opts.filename)
		}
		buf, err = afero.ReadFile(opts.fs, opts.filename)
	}
	if err != nil {
		return nil, err
	}
	if err = json.Unmarshal(buf, &out); err != nil {
		return nil, err
	}
	return out, nil
}

func (opts *updateIdentityProviderOpts) run(ctx context.Context, r io.Reader) error {
	data, errData := opts.readData(r)
	if errData != nil {
		return errData
	}

	params := &admin.UpdateIdentityProviderApiParams{
		FederationSettingsId: opts.federationSettingsId,
		IdentityProviderId:   opts.identityProviderId,

		FederationIdentityProviderUpdate: data,
	}

	var err error
	opts.resp, _, err = opts.client.FederatedAuthenticationApi.UpdateIdentityProviderWithParams(ctx, params).Execute()
	return err
}

func (opts *updateIdentityProviderOpts) postRun(_ context.Context, w io.Writer) error {

	prettyJSON, errJson := json.MarshalIndent(opts.resp, "", " ")
	if errJson != nil {
		return errJson
	}

	if opts.format == "" {
		_, err := fmt.Fprintln(w, string(prettyJSON))
		return err
	}

	var parsedJSON interface{}
	if err := json.Unmarshal([]byte(prettyJSON), &parsedJSON); err != nil {
		return err
	}

	return opts.tmpl.Execute(w, parsedJSON)
}

func updateIdentityProviderBuilder() *cobra.Command {
	opts := updateIdentityProviderOpts{
		fs: afero.NewOsFs(),
	}
	cmd := &cobra.Command{
		Use:   "updateIdentityProvider",
		Short: "Update the identity provider.",
		PreRunE: func(cmd *cobra.Command, args []string) error {
			return opts.preRun()
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			return opts.run(cmd.Context(), cmd.InOrStdin())
		},
		PostRunE: func(cmd *cobra.Command, args []string) error {
			return opts.postRun(cmd.Context(), cmd.OutOrStdout())
		},
	}
	cmd.Flags().StringVar(&opts.federationSettingsId, "federationSettingsId", "", `Unique 24-hexadecimal digit string that identifies your federation.`)
	cmd.Flags().StringVar(&opts.identityProviderId, "identityProviderId", "", `Unique string that identifies the identity provider to connect. If using an API version before 11-15-2023, use the legacy 20-hexadecimal digit id. This id can be found within the Federation Management Console &gt; Identity Providers tab by clicking the info icon in the IdP ID row of a configured identity provider. For all other versions, use the 24-hexadecimal digit id.`)

	cmd.Flags().StringVarP(&opts.filename, "file", "f", "", "Path to an optional JSON configuration file if not passed stdin is expected")

	_ = cmd.MarkFlagRequired("federationSettingsId")
	_ = cmd.MarkFlagRequired("identityProviderId")
	cmd.Flags().StringVar(&opts.format, "format", "", "Format of the output")
	return cmd
}

type updateRoleMappingOpts struct {
	client               *admin.APIClient
	federationSettingsId string
	id                   string
	orgId                string

	filename string
	fs       afero.Fs
	format   string
	tmpl     *template.Template
	resp     *admin.AuthFederationRoleMapping
}

func (opts *updateRoleMappingOpts) preRun() (err error) {
	if opts.client, err = newClientWithAuth(config.UserAgent, config.Default()); err != nil {
		return err
	}

	if opts.orgId == "" {
		opts.orgId = config.OrgID()
	}
	if opts.orgId == "" {
		return errors.New(`required flag(s) "orgId" not set`)
	}
	b, errDecode := hex.DecodeString(opts.orgId)
	if errDecode != nil || len(b) != 12 {
		return fmt.Errorf("the provided value '%s' is not a valid ID", opts.orgId)
	}

	if opts.format != "" {
		if opts.tmpl, err = template.New("").Parse(strings.ReplaceAll(opts.format, "\\n", "\n") + "\n"); err != nil {
			return err
		}
	}

	return nil
}

func (opts *updateRoleMappingOpts) readData(r io.Reader) (*admin.AuthFederationRoleMapping, error) {
	var out *admin.AuthFederationRoleMapping

	var buf []byte
	var err error
	if opts.filename == "" {
		buf, err = io.ReadAll(r)
	} else {
		if exists, errExists := afero.Exists(opts.fs, opts.filename); !exists || errExists != nil {
			return nil, fmt.Errorf("file not found: %s", opts.filename)
		}
		buf, err = afero.ReadFile(opts.fs, opts.filename)
	}
	if err != nil {
		return nil, err
	}
	if err = json.Unmarshal(buf, &out); err != nil {
		return nil, err
	}
	return out, nil
}

func (opts *updateRoleMappingOpts) run(ctx context.Context, r io.Reader) error {
	data, errData := opts.readData(r)
	if errData != nil {
		return errData
	}

	params := &admin.UpdateRoleMappingApiParams{
		FederationSettingsId: opts.federationSettingsId,
		Id:                   opts.id,
		OrgId:                opts.orgId,

		AuthFederationRoleMapping: data,
	}

	var err error
	opts.resp, _, err = opts.client.FederatedAuthenticationApi.UpdateRoleMappingWithParams(ctx, params).Execute()
	return err
}

func (opts *updateRoleMappingOpts) postRun(_ context.Context, w io.Writer) error {

	prettyJSON, errJson := json.MarshalIndent(opts.resp, "", " ")
	if errJson != nil {
		return errJson
	}

	if opts.format == "" {
		_, err := fmt.Fprintln(w, string(prettyJSON))
		return err
	}

	var parsedJSON interface{}
	if err := json.Unmarshal([]byte(prettyJSON), &parsedJSON); err != nil {
		return err
	}

	return opts.tmpl.Execute(w, parsedJSON)
}

func updateRoleMappingBuilder() *cobra.Command {
	opts := updateRoleMappingOpts{
		fs: afero.NewOsFs(),
	}
	cmd := &cobra.Command{
		Use:   "updateRoleMapping",
		Short: "Update One Role Mapping in One Organization",
		PreRunE: func(cmd *cobra.Command, args []string) error {
			return opts.preRun()
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			return opts.run(cmd.Context(), cmd.InOrStdin())
		},
		PostRunE: func(cmd *cobra.Command, args []string) error {
			return opts.postRun(cmd.Context(), cmd.OutOrStdout())
		},
	}
	cmd.Flags().StringVar(&opts.federationSettingsId, "federationSettingsId", "", `Unique 24-hexadecimal digit string that identifies your federation.`)
	cmd.Flags().StringVar(&opts.id, "id", "", `Unique 24-hexadecimal digit string that identifies the role mapping that you want to update.`)
	cmd.Flags().StringVar(&opts.orgId, "orgId", "", `Unique 24-hexadecimal digit string that identifies the organization`)

	cmd.Flags().StringVarP(&opts.filename, "file", "f", "", "Path to an optional JSON configuration file if not passed stdin is expected")

	_ = cmd.MarkFlagRequired("federationSettingsId")
	_ = cmd.MarkFlagRequired("id")
	cmd.Flags().StringVar(&opts.format, "format", "", "Format of the output")
	return cmd
}

func federatedAuthenticationBuilder() *cobra.Command {
	const use = "federatedAuthentication"
	cmd := &cobra.Command{
		Use:     use,
		Short:   `Returns, adds, edits, and removes federation-related features such as role mappings and connected organization configurations.`,
		Aliases: cli.GenerateAliases(use),
	}
	cmd.AddCommand(
		createIdentityProviderBuilder(),
		createRoleMappingBuilder(),
		deleteFederationAppBuilder(),
		deleteIdentityProviderBuilder(),
		deleteRoleMappingBuilder(),
		getConnectedOrgConfigBuilder(),
		getFederationSettingsBuilder(),
		getIdentityProviderBuilder(),
		getIdentityProviderMetadataBuilder(),
		getRoleMappingBuilder(),
		listConnectedOrgConfigsBuilder(),
		listIdentityProvidersBuilder(),
		listRoleMappingsBuilder(),
		removeConnectedOrgConfigBuilder(),
		revokeJwksFromIdentityProviderBuilder(),
		updateConnectedOrgConfigBuilder(),
		updateIdentityProviderBuilder(),
		updateRoleMappingBuilder(),
	)
	return cmd
}
