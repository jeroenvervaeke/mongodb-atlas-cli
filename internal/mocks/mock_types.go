// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/mongodb/mongodb-atlas-cli/internal/store (interfaces: Connect)

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	admin "go.mongodb.org/atlas-sdk/v20230201008/admin"
)

// MockConnect is a mock of Connect interface.
type MockConnect struct {
	ctrl     *gomock.Controller
	recorder *MockConnectMockRecorder
}

// MockConnectMockRecorder is the mock recorder for MockConnect.
type MockConnectMockRecorder struct {
	mock *MockConnect
}

// NewMockConnect creates a new mock instance.
func NewMockConnect(ctrl *gomock.Controller) *MockConnect {
	mock := &MockConnect{ctrl: ctrl}
	mock.recorder = &MockConnectMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockConnect) EXPECT() *MockConnectMockRecorder {
	return m.recorder
}

// AtlasCluster mocks base method.
func (m *MockConnect) AtlasCluster(arg0, arg1 string) (*admin.AdvancedClusterDescription, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AtlasCluster", arg0, arg1)
	ret0, _ := ret[0].(*admin.AdvancedClusterDescription)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AtlasCluster indicates an expected call of AtlasCluster.
func (mr *MockConnectMockRecorder) AtlasCluster(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AtlasCluster", reflect.TypeOf((*MockConnect)(nil).AtlasCluster), arg0, arg1)
}

// CreateDBUserCertificate mocks base method.
func (m *MockConnect) CreateDBUserCertificate(arg0, arg1 string, arg2 int) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDBUserCertificate", arg0, arg1, arg2)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateDBUserCertificate indicates an expected call of CreateDBUserCertificate.
func (mr *MockConnectMockRecorder) CreateDBUserCertificate(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDBUserCertificate", reflect.TypeOf((*MockConnect)(nil).CreateDBUserCertificate), arg0, arg1, arg2)
}

// CreateDatabaseUser mocks base method.
func (m *MockConnect) CreateDatabaseUser(arg0 *admin.CloudDatabaseUser) (*admin.CloudDatabaseUser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDatabaseUser", arg0)
	ret0, _ := ret[0].(*admin.CloudDatabaseUser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateDatabaseUser indicates an expected call of CreateDatabaseUser.
func (mr *MockConnectMockRecorder) CreateDatabaseUser(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDatabaseUser", reflect.TypeOf((*MockConnect)(nil).CreateDatabaseUser), arg0)
}

// DatabaseUser mocks base method.
func (m *MockConnect) DatabaseUser(arg0, arg1, arg2 string) (*admin.CloudDatabaseUser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DatabaseUser", arg0, arg1, arg2)
	ret0, _ := ret[0].(*admin.CloudDatabaseUser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DatabaseUser indicates an expected call of DatabaseUser.
func (mr *MockConnectMockRecorder) DatabaseUser(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DatabaseUser", reflect.TypeOf((*MockConnect)(nil).DatabaseUser), arg0, arg1, arg2)
}
