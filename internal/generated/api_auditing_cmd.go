// Copyright 2023 MongoDB Inc
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package generated

import (
	"context"

	"github.com/mongodb/mongodb-atlas-cli/internal/cli"
	"github.com/spf13/cobra"
	"go.mongodb.org/atlas-sdk/v20230201008/admin"
)

type getAuditingConfigurationOpts struct {
	cli.GlobalOpts
	cli.OutputOpts
	client  *admin.APIClient
	groupId string
}

func (opts *getAuditingConfigurationOpts) initClient() func() error {
	return func() error {
		var err error
		opts.client, err = newClientWithAuth()
		return err
	}
}

func (opts *getAuditingConfigurationOpts) Run(ctx context.Context) error {
	params := &admin.GetAuditingConfigurationApiParams{
		GroupId: opts.groupId,
	}
	resp, _, err := opts.client.AuditingApi.GetAuditingConfigurationWithParams(ctx, params).Execute()
	if err != nil {
		return err
	}

	return opts.Print(resp)
}

func getAuditingConfigurationBuilder() *cobra.Command {
	const template = "<<some template>>"

	opts := getAuditingConfigurationOpts{}
	cmd := &cobra.Command{
		Use:   "getAuditingConfiguration",
		Short: "Return the Auditing Configuration for One Project",
		Annotations: map[string]string{
			"output": template,
		},
		PreRunE: func(cmd *cobra.Command, args []string) error {
			return opts.PreRunE(
				opts.initClient(),
				opts.InitOutput(cmd.OutOrStdout(), template),
			)
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			return opts.Run(cmd.Context())
		},
	}
	cmd.Flags().StringVar(&opts.groupId, "groupId", "", `Unique 24-hexadecimal digit string that identifies your project. Use the [/groups](#tag/Projects/operation/listProjects) endpoint to retrieve all projects to which the authenticated user has access.

**NOTE**: Groups and projects are synonymous terms. Your group id is the same as your project id. For existing groups, your group/project id remains the same. The resource and corresponding endpoints use the term groups.`)

	_ = cmd.MarkFlagRequired("groupId")
	return cmd
}

type updateAuditingConfigurationOpts struct {
	cli.GlobalOpts
	cli.OutputOpts
	client  *admin.APIClient
	groupId string
}

func (opts *updateAuditingConfigurationOpts) initClient() func() error {
	return func() error {
		var err error
		opts.client, err = newClientWithAuth()
		return err
	}
}

func (opts *updateAuditingConfigurationOpts) Run(ctx context.Context) error {
	params := &admin.UpdateAuditingConfigurationApiParams{
		GroupId: opts.groupId,
	}
	resp, _, err := opts.client.AuditingApi.UpdateAuditingConfigurationWithParams(ctx, params).Execute()
	if err != nil {
		return err
	}

	return opts.Print(resp)
}

func updateAuditingConfigurationBuilder() *cobra.Command {
	const template = "<<some template>>"

	opts := updateAuditingConfigurationOpts{}
	cmd := &cobra.Command{
		Use:   "updateAuditingConfiguration",
		Short: "Update Auditing Configuration for One Project",
		Annotations: map[string]string{
			"output": template,
		},
		PreRunE: func(cmd *cobra.Command, args []string) error {
			return opts.PreRunE(
				opts.initClient(),
				opts.InitOutput(cmd.OutOrStdout(), template),
			)
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			return opts.Run(cmd.Context())
		},
	}
	cmd.Flags().StringVar(&opts.groupId, "groupId", "", `Unique 24-hexadecimal digit string that identifies your project. Use the [/groups](#tag/Projects/operation/listProjects) endpoint to retrieve all projects to which the authenticated user has access.

**NOTE**: Groups and projects are synonymous terms. Your group id is the same as your project id. For existing groups, your group/project id remains the same. The resource and corresponding endpoints use the term groups.`)

	cmd.Flags().BoolVar(&opts.auditAuthorizationSuccess, "auditAuthorizationSuccess", false, `Flag that indicates whether someone set auditing to track successful authentications. This only applies to the &#x60;&quot;atype&quot; : &quot;authCheck&quot;&#x60; audit filter. Setting this parameter to &#x60;true&#x60; degrades cluster performance.`)

	cmd.Flags().StringVar(&opts.auditFilter, "auditFilter", "", `JSON document that specifies which events to record. Escape any characters that may prevent parsing, such as single or double quotes, using a backslash (&#x60;\&#x60;).`)

	cmd.Flags().StringVar(&opts.configurationType, "configurationType", "", `Human-readable label that displays how to configure the audit filter.`)

	cmd.Flags().BoolVar(&opts.enabled, "enabled", false, `Flag that indicates whether someone enabled database auditing for the specified project.`)

	_ = cmd.MarkFlagRequired("groupId")
	return cmd
}

func auditingBuilder() *cobra.Command {
	cmd := &cobra.Command{
		Use:   "auditing",
		Short: `Returns and edits database auditing settings for MongoDB Cloud projects.`,
	}
	cmd.AddCommand(
		getAuditingConfigurationBuilder(),
		updateAuditingConfigurationBuilder(),
	)
	return cmd
}
