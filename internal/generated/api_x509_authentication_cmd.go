// Copyright 2023 MongoDB Inc
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package generated

import (
	"context"

	"github.com/mongodb/mongodb-atlas-cli/internal/cli"
	"github.com/spf13/cobra"
	"go.mongodb.org/atlas-sdk/v20230201008/admin"
)

type createDatabaseUserCertificateOpts struct {
	cli.GlobalOpts
	cli.OutputOpts
	client   *admin.APIClient
	groupId  string
	username string
}

func (opts *createDatabaseUserCertificateOpts) initClient() func() error {
	return func() error {
		var err error
		opts.client, err = newClientWithAuth()
		return err
	}
}

func (opts *createDatabaseUserCertificateOpts) Run(ctx context.Context) error {
	params := &admin.CreateDatabaseUserCertificateApiParams{
		GroupId:  opts.groupId,
		Username: opts.username,
	}
	_, err := opts.client.X509AuthenticationApi.CreateDatabaseUserCertificateWithParams(ctx, params).Execute()
	if err != nil {
		return err
	}

	return opts.Print(nil)
}

func createDatabaseUserCertificateBuilder() *cobra.Command {
	const template = "<<some template>>"

	opts := createDatabaseUserCertificateOpts{}
	cmd := &cobra.Command{
		Use:   "createDatabaseUserCertificate",
		Short: "Create One X.509 Certificate for One MongoDB User",
		Annotations: map[string]string{
			"output": template,
		},
		PreRunE: func(cmd *cobra.Command, args []string) error {
			return opts.PreRunE(
				opts.initClient(),
				opts.InitOutput(cmd.OutOrStdout(), template),
			)
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			return opts.Run(cmd.Context())
		},
	}
	cmd.Flags().StringVar(&opts.groupId, "groupId", "", `Unique 24-hexadecimal digit string that identifies your project. Use the [/groups](#tag/Projects/operation/listProjects) endpoint to retrieve all projects to which the authenticated user has access.

**NOTE**: Groups and projects are synonymous terms. Your group id is the same as your project id. For existing groups, your group/project id remains the same. The resource and corresponding endpoints use the term groups.`)
	cmd.Flags().StringVar(&opts.username, "username", "", `Human-readable label that represents the MongoDB database user account for whom to create a certificate.`)

	cmd.Flags().Int64Var(&opts._id, "_id", 00, `Unique 24-hexadecimal character string that identifies this certificate.`)

	cmd.Flags().StringVar(&opts.createdAt, "createdAt", "", `Date and time when MongoDB Cloud created this certificate. This parameter expresses its value in the ISO 8601 timestamp format in UTC.`)

	cmd.Flags().StringVar(&opts.groupId, "groupId", "", `Unique 24-hexadecimal character string that identifies the project.`)

	cmd.Flags().ArraySliceVar(&opts.links, "links", nil, `List of one or more Uniform Resource Locators (URLs) that point to API sub-resources, related API resources, or both. RFC 5988 outlines these relationships.`)

	cmd.Flags().IntVar(&opts.monthsUntilExpiration, "monthsUntilExpiration", 3, `Number of months that the certificate remains valid until it expires.`)

	cmd.Flags().StringVar(&opts.notAfter, "notAfter", "", `Date and time when this certificate expires. This parameter expresses its value in the ISO 8601 timestamp format in UTC.`)

	cmd.Flags().StringVar(&opts.subject, "subject", "", `Subject Alternative Name associated with this certificate. This parameter expresses its value as a distinguished name as defined in [RFC 2253](https://tools.ietf.org/html/2253).`)

	_ = cmd.MarkFlagRequired("groupId")
	_ = cmd.MarkFlagRequired("username")
	return cmd
}

type disableCustomerManagedX509Opts struct {
	cli.GlobalOpts
	cli.OutputOpts
	client  *admin.APIClient
	groupId string
}

func (opts *disableCustomerManagedX509Opts) initClient() func() error {
	return func() error {
		var err error
		opts.client, err = newClientWithAuth()
		return err
	}
}

func (opts *disableCustomerManagedX509Opts) Run(ctx context.Context) error {
	params := &admin.DisableCustomerManagedX509ApiParams{
		GroupId: opts.groupId,
	}
	resp, _, err := opts.client.X509AuthenticationApi.DisableCustomerManagedX509WithParams(ctx, params).Execute()
	if err != nil {
		return err
	}

	return opts.Print(resp)
}

func disableCustomerManagedX509Builder() *cobra.Command {
	const template = "<<some template>>"

	opts := disableCustomerManagedX509Opts{}
	cmd := &cobra.Command{
		Use:   "disableCustomerManagedX509",
		Short: "Disable Customer-Managed X.509",
		Annotations: map[string]string{
			"output": template,
		},
		PreRunE: func(cmd *cobra.Command, args []string) error {
			return opts.PreRunE(
				opts.initClient(),
				opts.InitOutput(cmd.OutOrStdout(), template),
			)
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			return opts.Run(cmd.Context())
		},
	}
	cmd.Flags().StringVar(&opts.groupId, "groupId", "", `Unique 24-hexadecimal digit string that identifies your project. Use the [/groups](#tag/Projects/operation/listProjects) endpoint to retrieve all projects to which the authenticated user has access.

**NOTE**: Groups and projects are synonymous terms. Your group id is the same as your project id. For existing groups, your group/project id remains the same. The resource and corresponding endpoints use the term groups.`)

	_ = cmd.MarkFlagRequired("groupId")
	return cmd
}

type listDatabaseUserCertificatesOpts struct {
	cli.GlobalOpts
	cli.OutputOpts
	client       *admin.APIClient
	groupId      string
	username     string
	includeCount bool
	itemsPerPage int
	pageNum      int
}

func (opts *listDatabaseUserCertificatesOpts) initClient() func() error {
	return func() error {
		var err error
		opts.client, err = newClientWithAuth()
		return err
	}
}

func (opts *listDatabaseUserCertificatesOpts) Run(ctx context.Context) error {
	params := &admin.ListDatabaseUserCertificatesApiParams{
		GroupId:      opts.groupId,
		Username:     opts.username,
		IncludeCount: &opts.includeCount,
		ItemsPerPage: &opts.itemsPerPage,
		PageNum:      &opts.pageNum,
	}
	resp, _, err := opts.client.X509AuthenticationApi.ListDatabaseUserCertificatesWithParams(ctx, params).Execute()
	if err != nil {
		return err
	}

	return opts.Print(resp)
}

func listDatabaseUserCertificatesBuilder() *cobra.Command {
	const template = "<<some template>>"

	opts := listDatabaseUserCertificatesOpts{}
	cmd := &cobra.Command{
		Use:   "listDatabaseUserCertificates",
		Short: "Return All X.509 Certificates Assigned to One MongoDB User",
		Annotations: map[string]string{
			"output": template,
		},
		PreRunE: func(cmd *cobra.Command, args []string) error {
			return opts.PreRunE(
				opts.initClient(),
				opts.InitOutput(cmd.OutOrStdout(), template),
			)
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			return opts.Run(cmd.Context())
		},
	}
	cmd.Flags().StringVar(&opts.groupId, "groupId", "", `Unique 24-hexadecimal digit string that identifies your project. Use the [/groups](#tag/Projects/operation/listProjects) endpoint to retrieve all projects to which the authenticated user has access.

**NOTE**: Groups and projects are synonymous terms. Your group id is the same as your project id. For existing groups, your group/project id remains the same. The resource and corresponding endpoints use the term groups.`)
	cmd.Flags().StringVar(&opts.username, "username", "", `Human-readable label that represents the MongoDB database user account whose certificates you want to return.`)
	cmd.Flags().BoolVar(&opts.includeCount, "includeCount", true, `Flag that indicates whether the response returns the total number of items (**totalCount**) in the response.`)
	cmd.Flags().IntVar(&opts.itemsPerPage, "itemsPerPage", 100, `Number of items that the response returns per page.`)
	cmd.Flags().IntVar(&opts.pageNum, "pageNum", 1, `Number of the page that displays the current set of the total objects that the response returns.`)

	_ = cmd.MarkFlagRequired("groupId")
	_ = cmd.MarkFlagRequired("username")
	return cmd
}

func x509AuthenticationBuilder() *cobra.Command {
	cmd := &cobra.Command{
		Use:   "x509Authentication",
		Short: `Returns, edits, and removes user-managed X.509 configurations. Also returns and generates MongoDB Cloud-managed X.509 certificates for database users. The following resources help manage database users who authenticate using X.509 certificates. You can manage these X.509 certificates or let MongoDB Cloud do it for you. If MongoDB Cloud manages your certificates, it also manages your Certificate Authority and can generate certificates for your database users. No additional X.509 configuration is required. If you manage your certificates, you must provide a Certificate Authority and generate certificates for your database users.`,
	}
	cmd.AddCommand(
		createDatabaseUserCertificateBuilder(),
		disableCustomerManagedX509Builder(),
		listDatabaseUserCertificatesBuilder(),
	)
	return cmd
}
