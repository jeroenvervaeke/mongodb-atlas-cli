// Copyright 2023 MongoDB Inc
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package generated

import (
	"context"
	"os"
	"time"

	"github.com/spf13/cobra"
	"go.mongodb.org/atlas-sdk/v20230201008/admin"
	"github.com/mongodb/mongodb-atlas-cli/internal/cli"
)

type createPipelineOpts struct {
	cli.GlobalOpts
	cli.OutputOpts
	client *admin.APIClient
	groupId string
	
}

func (opts *createPipelineOpts) initClient() func() error {
	return func() error {
		var err error
		opts.client, err = newClientWithAuth()
		return err
	}
}

func (opts *createPipelineOpts) Run(ctx context.Context) error {
	params := &admin.CreatePipelineApiParams{
		GroupId: opts.groupId,
		
	}
	resp, _, err := opts.client.DataLakePipelinesApi.CreatePipelineWithParams(ctx, params).Execute()
	if err != nil {
		return err
	}

	return opts.Print(resp)
}

func createPipelineBuilder() *cobra.Command {
	const template = "<<some template>>"

	opts := createPipelineOpts{}
	cmd := &cobra.Command{
		Use: "createPipeline",
		Short: "Create One Data Lake Pipeline",
		Annotations: map[string]string{
			"output":      template,
		},
		PreRunE: func(cmd *cobra.Command, args []string) error {
			return opts.PreRunE(
				opts.initClient(),
				opts.InitOutput(cmd.OutOrStdout(), template),
			)
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			return opts.Run(cmd.Context())
		},
	}
	cmd.Flags().StringVar(&opts.groupId, "groupId", "", `Unique 24-hexadecimal digit string that identifies your project. Use the [/groups](#tag/Projects/operation/listProjects) endpoint to retrieve all projects to which the authenticated user has access.

**NOTE**: Groups and projects are synonymous terms. Your group id is the same as your project id. For existing groups, your group/project id remains the same. The resource and corresponding endpoints use the term groups.`)
	

	cmd.Flags().StringVar(&opts._id, "_id", "", `Unique 24-hexadecimal digit string that identifies the Data Lake Pipeline.`)

	cmd.Flags().StringVar(&opts.createdDate, "createdDate", "", `Timestamp that indicates when the Data Lake Pipeline was created.`)

	cmd.Flags().StringVar(&opts.groupId, "groupId", "", `Unique 24-hexadecimal digit string that identifies the group.`)

	cmd.Flags().StringVar(&opts.lastUpdatedDate, "lastUpdatedDate", "", `Timestamp that indicates the last time that the Data Lake Pipeline was updated.`)

	cmd.Flags().StringVar(&opts.name, "name", "", `Name of this Data Lake Pipeline.`)

	cmd.Flags().IngestionSinkVar(&opts.sink, "sink", , ``)

	cmd.Flags().IngestionSourceVar(&opts.source, "source", , ``)

	cmd.Flags().StringVar(&opts.state, "state", "", `State of this Data Lake Pipeline.`)

	cmd.Flags().ArraySliceVar(&opts.transformations, "transformations", nil, `Fields to be excluded for this Data Lake Pipeline.`)


	_ = cmd.MarkFlagRequired("groupId")
	return cmd
}
type deletePipelineOpts struct {
	cli.GlobalOpts
	cli.OutputOpts
	client *admin.APIClient
	groupId string
	pipelineName string
}

func (opts *deletePipelineOpts) initClient() func() error {
	return func() error {
		var err error
		opts.client, err = newClientWithAuth()
		return err
	}
}

func (opts *deletePipelineOpts) Run(ctx context.Context) error {
	params := &admin.DeletePipelineApiParams{
		GroupId: opts.groupId,
		PipelineName: opts.pipelineName,
	}
	resp, _, err := opts.client.DataLakePipelinesApi.DeletePipelineWithParams(ctx, params).Execute()
	if err != nil {
		return err
	}

	return opts.Print(resp)
}

func deletePipelineBuilder() *cobra.Command {
	const template = "<<some template>>"

	opts := deletePipelineOpts{}
	cmd := &cobra.Command{
		Use: "deletePipeline",
		Short: "Remove One Data Lake Pipeline",
		Annotations: map[string]string{
			"output":      template,
		},
		PreRunE: func(cmd *cobra.Command, args []string) error {
			return opts.PreRunE(
				opts.initClient(),
				opts.InitOutput(cmd.OutOrStdout(), template),
			)
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			return opts.Run(cmd.Context())
		},
	}
	cmd.Flags().StringVar(&opts.groupId, "groupId", "", `Unique 24-hexadecimal digit string that identifies your project. Use the [/groups](#tag/Projects/operation/listProjects) endpoint to retrieve all projects to which the authenticated user has access.

**NOTE**: Groups and projects are synonymous terms. Your group id is the same as your project id. For existing groups, your group/project id remains the same. The resource and corresponding endpoints use the term groups.`)
	cmd.Flags().StringVar(&opts.pipelineName, "pipelineName", "", `Human-readable label that identifies the Data Lake Pipeline.`)


	_ = cmd.MarkFlagRequired("groupId")
	_ = cmd.MarkFlagRequired("pipelineName")
	return cmd
}
type deletePipelineRunDatasetOpts struct {
	cli.GlobalOpts
	cli.OutputOpts
	client *admin.APIClient
	groupId string
	pipelineName string
	pipelineRunId string
}

func (opts *deletePipelineRunDatasetOpts) initClient() func() error {
	return func() error {
		var err error
		opts.client, err = newClientWithAuth()
		return err
	}
}

func (opts *deletePipelineRunDatasetOpts) Run(ctx context.Context) error {
	params := &admin.DeletePipelineRunDatasetApiParams{
		GroupId: opts.groupId,
		PipelineName: opts.pipelineName,
		PipelineRunId: opts.pipelineRunId,
	}
	resp, _, err := opts.client.DataLakePipelinesApi.DeletePipelineRunDatasetWithParams(ctx, params).Execute()
	if err != nil {
		return err
	}

	return opts.Print(resp)
}

func deletePipelineRunDatasetBuilder() *cobra.Command {
	const template = "<<some template>>"

	opts := deletePipelineRunDatasetOpts{}
	cmd := &cobra.Command{
		Use: "deletePipelineRunDataset",
		Short: "Delete Pipeline Run Dataset",
		Annotations: map[string]string{
			"output":      template,
		},
		PreRunE: func(cmd *cobra.Command, args []string) error {
			return opts.PreRunE(
				opts.initClient(),
				opts.InitOutput(cmd.OutOrStdout(), template),
			)
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			return opts.Run(cmd.Context())
		},
	}
	cmd.Flags().StringVar(&opts.groupId, "groupId", "", `Unique 24-hexadecimal digit string that identifies your project. Use the [/groups](#tag/Projects/operation/listProjects) endpoint to retrieve all projects to which the authenticated user has access.

**NOTE**: Groups and projects are synonymous terms. Your group id is the same as your project id. For existing groups, your group/project id remains the same. The resource and corresponding endpoints use the term groups.`)
	cmd.Flags().StringVar(&opts.pipelineName, "pipelineName", "", `Human-readable label that identifies the Data Lake Pipeline.`)
	cmd.Flags().StringVar(&opts.pipelineRunId, "pipelineRunId", "", `Unique 24-hexadecimal character string that identifies a Data Lake Pipeline run.`)


	_ = cmd.MarkFlagRequired("groupId")
	_ = cmd.MarkFlagRequired("pipelineName")
	_ = cmd.MarkFlagRequired("pipelineRunId")
	return cmd
}
type getPipelineOpts struct {
	cli.GlobalOpts
	cli.OutputOpts
	client *admin.APIClient
	groupId string
	pipelineName string
}

func (opts *getPipelineOpts) initClient() func() error {
	return func() error {
		var err error
		opts.client, err = newClientWithAuth()
		return err
	}
}

func (opts *getPipelineOpts) Run(ctx context.Context) error {
	params := &admin.GetPipelineApiParams{
		GroupId: opts.groupId,
		PipelineName: opts.pipelineName,
	}
	resp, _, err := opts.client.DataLakePipelinesApi.GetPipelineWithParams(ctx, params).Execute()
	if err != nil {
		return err
	}

	return opts.Print(resp)
}

func getPipelineBuilder() *cobra.Command {
	const template = "<<some template>>"

	opts := getPipelineOpts{}
	cmd := &cobra.Command{
		Use: "getPipeline",
		Short: "Return One Data Lake Pipeline",
		Annotations: map[string]string{
			"output":      template,
		},
		PreRunE: func(cmd *cobra.Command, args []string) error {
			return opts.PreRunE(
				opts.initClient(),
				opts.InitOutput(cmd.OutOrStdout(), template),
			)
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			return opts.Run(cmd.Context())
		},
	}
	cmd.Flags().StringVar(&opts.groupId, "groupId", "", `Unique 24-hexadecimal digit string that identifies your project. Use the [/groups](#tag/Projects/operation/listProjects) endpoint to retrieve all projects to which the authenticated user has access.

**NOTE**: Groups and projects are synonymous terms. Your group id is the same as your project id. For existing groups, your group/project id remains the same. The resource and corresponding endpoints use the term groups.`)
	cmd.Flags().StringVar(&opts.pipelineName, "pipelineName", "", `Human-readable label that identifies the Data Lake Pipeline.`)


	_ = cmd.MarkFlagRequired("groupId")
	_ = cmd.MarkFlagRequired("pipelineName")
	return cmd
}
type getPipelineRunOpts struct {
	cli.GlobalOpts
	cli.OutputOpts
	client *admin.APIClient
	groupId string
	pipelineName string
	pipelineRunId string
}

func (opts *getPipelineRunOpts) initClient() func() error {
	return func() error {
		var err error
		opts.client, err = newClientWithAuth()
		return err
	}
}

func (opts *getPipelineRunOpts) Run(ctx context.Context) error {
	params := &admin.GetPipelineRunApiParams{
		GroupId: opts.groupId,
		PipelineName: opts.pipelineName,
		PipelineRunId: opts.pipelineRunId,
	}
	resp, _, err := opts.client.DataLakePipelinesApi.GetPipelineRunWithParams(ctx, params).Execute()
	if err != nil {
		return err
	}

	return opts.Print(resp)
}

func getPipelineRunBuilder() *cobra.Command {
	const template = "<<some template>>"

	opts := getPipelineRunOpts{}
	cmd := &cobra.Command{
		Use: "getPipelineRun",
		Short: "Return One Data Lake Pipeline Run",
		Annotations: map[string]string{
			"output":      template,
		},
		PreRunE: func(cmd *cobra.Command, args []string) error {
			return opts.PreRunE(
				opts.initClient(),
				opts.InitOutput(cmd.OutOrStdout(), template),
			)
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			return opts.Run(cmd.Context())
		},
	}
	cmd.Flags().StringVar(&opts.groupId, "groupId", "", `Unique 24-hexadecimal digit string that identifies your project. Use the [/groups](#tag/Projects/operation/listProjects) endpoint to retrieve all projects to which the authenticated user has access.

**NOTE**: Groups and projects are synonymous terms. Your group id is the same as your project id. For existing groups, your group/project id remains the same. The resource and corresponding endpoints use the term groups.`)
	cmd.Flags().StringVar(&opts.pipelineName, "pipelineName", "", `Human-readable label that identifies the Data Lake Pipeline.`)
	cmd.Flags().StringVar(&opts.pipelineRunId, "pipelineRunId", "", `Unique 24-hexadecimal character string that identifies a Data Lake Pipeline run.`)


	_ = cmd.MarkFlagRequired("groupId")
	_ = cmd.MarkFlagRequired("pipelineName")
	_ = cmd.MarkFlagRequired("pipelineRunId")
	return cmd
}
type listPipelineRunsOpts struct {
	cli.GlobalOpts
	cli.OutputOpts
	client *admin.APIClient
	groupId string
	pipelineName string
	includeCount bool
	itemsPerPage int
	pageNum int
	createdBefore string
}

func (opts *listPipelineRunsOpts) initClient() func() error {
	return func() error {
		var err error
		opts.client, err = newClientWithAuth()
		return err
	}
}

func (opts *listPipelineRunsOpts) Run(ctx context.Context) error {
	params := &admin.ListPipelineRunsApiParams{
		GroupId: opts.groupId,
		PipelineName: opts.pipelineName,
		IncludeCount: &opts.includeCount,
		ItemsPerPage: &opts.itemsPerPage,
		PageNum: &opts.pageNum,
		CreatedBefore: convertTime(&opts.createdBefore),
	}
	resp, _, err := opts.client.DataLakePipelinesApi.ListPipelineRunsWithParams(ctx, params).Execute()
	if err != nil {
		return err
	}

	return opts.Print(resp)
}

func listPipelineRunsBuilder() *cobra.Command {
	const template = "<<some template>>"

	opts := listPipelineRunsOpts{}
	cmd := &cobra.Command{
		Use: "listPipelineRuns",
		Short: "Return All Data Lake Pipeline Runs from One Project",
		Annotations: map[string]string{
			"output":      template,
		},
		PreRunE: func(cmd *cobra.Command, args []string) error {
			return opts.PreRunE(
				opts.initClient(),
				opts.InitOutput(cmd.OutOrStdout(), template),
			)
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			return opts.Run(cmd.Context())
		},
	}
	cmd.Flags().StringVar(&opts.groupId, "groupId", "", `Unique 24-hexadecimal digit string that identifies your project. Use the [/groups](#tag/Projects/operation/listProjects) endpoint to retrieve all projects to which the authenticated user has access.

**NOTE**: Groups and projects are synonymous terms. Your group id is the same as your project id. For existing groups, your group/project id remains the same. The resource and corresponding endpoints use the term groups.`)
	cmd.Flags().StringVar(&opts.pipelineName, "pipelineName", "", `Human-readable label that identifies the Data Lake Pipeline.`)
	cmd.Flags().BoolVar(&opts.includeCount, "includeCount", true, `Flag that indicates whether the response returns the total number of items (**totalCount**) in the response.`)
	cmd.Flags().IntVar(&opts.itemsPerPage, "itemsPerPage", 100, `Number of items that the response returns per page.`)
	cmd.Flags().IntVar(&opts.pageNum, "pageNum", 1, `Number of the page that displays the current set of the total objects that the response returns.`)
	cmd.Flags().StringVar(&opts.createdBefore, "createdBefore", "", `If specified, Atlas returns only Data Lake Pipeline runs initiated before this time and date.`)


	_ = cmd.MarkFlagRequired("groupId")
	_ = cmd.MarkFlagRequired("pipelineName")
	return cmd
}
type listPipelineSchedulesOpts struct {
	cli.GlobalOpts
	cli.OutputOpts
	client *admin.APIClient
	groupId string
	pipelineName string
}

func (opts *listPipelineSchedulesOpts) initClient() func() error {
	return func() error {
		var err error
		opts.client, err = newClientWithAuth()
		return err
	}
}

func (opts *listPipelineSchedulesOpts) Run(ctx context.Context) error {
	params := &admin.ListPipelineSchedulesApiParams{
		GroupId: opts.groupId,
		PipelineName: opts.pipelineName,
	}
	resp, _, err := opts.client.DataLakePipelinesApi.ListPipelineSchedulesWithParams(ctx, params).Execute()
	if err != nil {
		return err
	}

	return opts.Print(resp)
}

func listPipelineSchedulesBuilder() *cobra.Command {
	const template = "<<some template>>"

	opts := listPipelineSchedulesOpts{}
	cmd := &cobra.Command{
		Use: "listPipelineSchedules",
		Short: "Return Available Ingestion Schedules for One Data Lake Pipeline",
		Annotations: map[string]string{
			"output":      template,
		},
		PreRunE: func(cmd *cobra.Command, args []string) error {
			return opts.PreRunE(
				opts.initClient(),
				opts.InitOutput(cmd.OutOrStdout(), template),
			)
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			return opts.Run(cmd.Context())
		},
	}
	cmd.Flags().StringVar(&opts.groupId, "groupId", "", `Unique 24-hexadecimal digit string that identifies your project. Use the [/groups](#tag/Projects/operation/listProjects) endpoint to retrieve all projects to which the authenticated user has access.

**NOTE**: Groups and projects are synonymous terms. Your group id is the same as your project id. For existing groups, your group/project id remains the same. The resource and corresponding endpoints use the term groups.`)
	cmd.Flags().StringVar(&opts.pipelineName, "pipelineName", "", `Human-readable label that identifies the Data Lake Pipeline.`)


	_ = cmd.MarkFlagRequired("groupId")
	_ = cmd.MarkFlagRequired("pipelineName")
	return cmd
}
type listPipelineSnapshotsOpts struct {
	cli.GlobalOpts
	cli.OutputOpts
	client *admin.APIClient
	groupId string
	pipelineName string
	includeCount bool
	itemsPerPage int
	pageNum int
	completedAfter string
}

func (opts *listPipelineSnapshotsOpts) initClient() func() error {
	return func() error {
		var err error
		opts.client, err = newClientWithAuth()
		return err
	}
}

func (opts *listPipelineSnapshotsOpts) Run(ctx context.Context) error {
	params := &admin.ListPipelineSnapshotsApiParams{
		GroupId: opts.groupId,
		PipelineName: opts.pipelineName,
		IncludeCount: &opts.includeCount,
		ItemsPerPage: &opts.itemsPerPage,
		PageNum: &opts.pageNum,
		CompletedAfter: convertTime(&opts.completedAfter),
	}
	resp, _, err := opts.client.DataLakePipelinesApi.ListPipelineSnapshotsWithParams(ctx, params).Execute()
	if err != nil {
		return err
	}

	return opts.Print(resp)
}

func listPipelineSnapshotsBuilder() *cobra.Command {
	const template = "<<some template>>"

	opts := listPipelineSnapshotsOpts{}
	cmd := &cobra.Command{
		Use: "listPipelineSnapshots",
		Short: "Return Available Backup Snapshots for One Data Lake Pipeline",
		Annotations: map[string]string{
			"output":      template,
		},
		PreRunE: func(cmd *cobra.Command, args []string) error {
			return opts.PreRunE(
				opts.initClient(),
				opts.InitOutput(cmd.OutOrStdout(), template),
			)
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			return opts.Run(cmd.Context())
		},
	}
	cmd.Flags().StringVar(&opts.groupId, "groupId", "", `Unique 24-hexadecimal digit string that identifies your project. Use the [/groups](#tag/Projects/operation/listProjects) endpoint to retrieve all projects to which the authenticated user has access.

**NOTE**: Groups and projects are synonymous terms. Your group id is the same as your project id. For existing groups, your group/project id remains the same. The resource and corresponding endpoints use the term groups.`)
	cmd.Flags().StringVar(&opts.pipelineName, "pipelineName", "", `Human-readable label that identifies the Data Lake Pipeline.`)
	cmd.Flags().BoolVar(&opts.includeCount, "includeCount", true, `Flag that indicates whether the response returns the total number of items (**totalCount**) in the response.`)
	cmd.Flags().IntVar(&opts.itemsPerPage, "itemsPerPage", 100, `Number of items that the response returns per page.`)
	cmd.Flags().IntVar(&opts.pageNum, "pageNum", 1, `Number of the page that displays the current set of the total objects that the response returns.`)
	cmd.Flags().StringVar(&opts.completedAfter, "completedAfter", "", `Date and time after which MongoDB Cloud created the snapshot. If specified, MongoDB Cloud returns available backup snapshots created after this time and date only. This parameter expresses its value in the ISO 8601 timestamp format in UTC.`)


	_ = cmd.MarkFlagRequired("groupId")
	_ = cmd.MarkFlagRequired("pipelineName")
	return cmd
}
type listPipelinesOpts struct {
	cli.GlobalOpts
	cli.OutputOpts
	client *admin.APIClient
	groupId string
}

func (opts *listPipelinesOpts) initClient() func() error {
	return func() error {
		var err error
		opts.client, err = newClientWithAuth()
		return err
	}
}

func (opts *listPipelinesOpts) Run(ctx context.Context) error {
	params := &admin.ListPipelinesApiParams{
		GroupId: opts.groupId,
	}
	resp, _, err := opts.client.DataLakePipelinesApi.ListPipelinesWithParams(ctx, params).Execute()
	if err != nil {
		return err
	}

	return opts.Print(resp)
}

func listPipelinesBuilder() *cobra.Command {
	const template = "<<some template>>"

	opts := listPipelinesOpts{}
	cmd := &cobra.Command{
		Use: "listPipelines",
		Short: "Return All Data Lake Pipelines from One Project",
		Annotations: map[string]string{
			"output":      template,
		},
		PreRunE: func(cmd *cobra.Command, args []string) error {
			return opts.PreRunE(
				opts.initClient(),
				opts.InitOutput(cmd.OutOrStdout(), template),
			)
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			return opts.Run(cmd.Context())
		},
	}
	cmd.Flags().StringVar(&opts.groupId, "groupId", "", `Unique 24-hexadecimal digit string that identifies your project. Use the [/groups](#tag/Projects/operation/listProjects) endpoint to retrieve all projects to which the authenticated user has access.

**NOTE**: Groups and projects are synonymous terms. Your group id is the same as your project id. For existing groups, your group/project id remains the same. The resource and corresponding endpoints use the term groups.`)


	_ = cmd.MarkFlagRequired("groupId")
	return cmd
}
type pausePipelineOpts struct {
	cli.GlobalOpts
	cli.OutputOpts
	client *admin.APIClient
	groupId string
	pipelineName string
}

func (opts *pausePipelineOpts) initClient() func() error {
	return func() error {
		var err error
		opts.client, err = newClientWithAuth()
		return err
	}
}

func (opts *pausePipelineOpts) Run(ctx context.Context) error {
	params := &admin.PausePipelineApiParams{
		GroupId: opts.groupId,
		PipelineName: opts.pipelineName,
	}
	resp, _, err := opts.client.DataLakePipelinesApi.PausePipelineWithParams(ctx, params).Execute()
	if err != nil {
		return err
	}

	return opts.Print(resp)
}

func pausePipelineBuilder() *cobra.Command {
	const template = "<<some template>>"

	opts := pausePipelineOpts{}
	cmd := &cobra.Command{
		Use: "pausePipeline",
		Short: "Pause One Data Lake Pipeline",
		Annotations: map[string]string{
			"output":      template,
		},
		PreRunE: func(cmd *cobra.Command, args []string) error {
			return opts.PreRunE(
				opts.initClient(),
				opts.InitOutput(cmd.OutOrStdout(), template),
			)
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			return opts.Run(cmd.Context())
		},
	}
	cmd.Flags().StringVar(&opts.groupId, "groupId", "", `Unique 24-hexadecimal digit string that identifies your project. Use the [/groups](#tag/Projects/operation/listProjects) endpoint to retrieve all projects to which the authenticated user has access.

**NOTE**: Groups and projects are synonymous terms. Your group id is the same as your project id. For existing groups, your group/project id remains the same. The resource and corresponding endpoints use the term groups.`)
	cmd.Flags().StringVar(&opts.pipelineName, "pipelineName", "", `Human-readable label that identifies the Data Lake Pipeline.`)


	_ = cmd.MarkFlagRequired("groupId")
	_ = cmd.MarkFlagRequired("pipelineName")
	return cmd
}
type resumePipelineOpts struct {
	cli.GlobalOpts
	cli.OutputOpts
	client *admin.APIClient
	groupId string
	pipelineName string
}

func (opts *resumePipelineOpts) initClient() func() error {
	return func() error {
		var err error
		opts.client, err = newClientWithAuth()
		return err
	}
}

func (opts *resumePipelineOpts) Run(ctx context.Context) error {
	params := &admin.ResumePipelineApiParams{
		GroupId: opts.groupId,
		PipelineName: opts.pipelineName,
	}
	resp, _, err := opts.client.DataLakePipelinesApi.ResumePipelineWithParams(ctx, params).Execute()
	if err != nil {
		return err
	}

	return opts.Print(resp)
}

func resumePipelineBuilder() *cobra.Command {
	const template = "<<some template>>"

	opts := resumePipelineOpts{}
	cmd := &cobra.Command{
		Use: "resumePipeline",
		Short: "Resume One Data Lake Pipeline",
		Annotations: map[string]string{
			"output":      template,
		},
		PreRunE: func(cmd *cobra.Command, args []string) error {
			return opts.PreRunE(
				opts.initClient(),
				opts.InitOutput(cmd.OutOrStdout(), template),
			)
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			return opts.Run(cmd.Context())
		},
	}
	cmd.Flags().StringVar(&opts.groupId, "groupId", "", `Unique 24-hexadecimal digit string that identifies your project. Use the [/groups](#tag/Projects/operation/listProjects) endpoint to retrieve all projects to which the authenticated user has access.

**NOTE**: Groups and projects are synonymous terms. Your group id is the same as your project id. For existing groups, your group/project id remains the same. The resource and corresponding endpoints use the term groups.`)
	cmd.Flags().StringVar(&opts.pipelineName, "pipelineName", "", `Human-readable label that identifies the Data Lake Pipeline.`)


	_ = cmd.MarkFlagRequired("groupId")
	_ = cmd.MarkFlagRequired("pipelineName")
	return cmd
}
type triggerSnapshotIngestionOpts struct {
	cli.GlobalOpts
	cli.OutputOpts
	client *admin.APIClient
	groupId string
	pipelineName string
	
}

func (opts *triggerSnapshotIngestionOpts) initClient() func() error {
	return func() error {
		var err error
		opts.client, err = newClientWithAuth()
		return err
	}
}

func (opts *triggerSnapshotIngestionOpts) Run(ctx context.Context) error {
	params := &admin.TriggerSnapshotIngestionApiParams{
		GroupId: opts.groupId,
		PipelineName: opts.pipelineName,
		
	}
	resp, _, err := opts.client.DataLakePipelinesApi.TriggerSnapshotIngestionWithParams(ctx, params).Execute()
	if err != nil {
		return err
	}

	return opts.Print(resp)
}

func triggerSnapshotIngestionBuilder() *cobra.Command {
	const template = "<<some template>>"

	opts := triggerSnapshotIngestionOpts{}
	cmd := &cobra.Command{
		Use: "triggerSnapshotIngestion",
		Short: "Trigger on demand snapshot ingestion",
		Annotations: map[string]string{
			"output":      template,
		},
		PreRunE: func(cmd *cobra.Command, args []string) error {
			return opts.PreRunE(
				opts.initClient(),
				opts.InitOutput(cmd.OutOrStdout(), template),
			)
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			return opts.Run(cmd.Context())
		},
	}
	cmd.Flags().StringVar(&opts.groupId, "groupId", "", `Unique 24-hexadecimal digit string that identifies your project. Use the [/groups](#tag/Projects/operation/listProjects) endpoint to retrieve all projects to which the authenticated user has access.

**NOTE**: Groups and projects are synonymous terms. Your group id is the same as your project id. For existing groups, your group/project id remains the same. The resource and corresponding endpoints use the term groups.`)
	cmd.Flags().StringVar(&opts.pipelineName, "pipelineName", "", `Human-readable label that identifies the Data Lake Pipeline.`)
	

	cmd.Flags().StringVar(&opts.snapshotId, "snapshotId", "", `Unique 24-hexadecimal character string that identifies the snapshot.`)


	_ = cmd.MarkFlagRequired("groupId")
	_ = cmd.MarkFlagRequired("pipelineName")
	return cmd
}
type updatePipelineOpts struct {
	cli.GlobalOpts
	cli.OutputOpts
	client *admin.APIClient
	groupId string
	pipelineName string
	
}

func (opts *updatePipelineOpts) initClient() func() error {
	return func() error {
		var err error
		opts.client, err = newClientWithAuth()
		return err
	}
}

func (opts *updatePipelineOpts) Run(ctx context.Context) error {
	params := &admin.UpdatePipelineApiParams{
		GroupId: opts.groupId,
		PipelineName: opts.pipelineName,
		
	}
	resp, _, err := opts.client.DataLakePipelinesApi.UpdatePipelineWithParams(ctx, params).Execute()
	if err != nil {
		return err
	}

	return opts.Print(resp)
}

func updatePipelineBuilder() *cobra.Command {
	const template = "<<some template>>"

	opts := updatePipelineOpts{}
	cmd := &cobra.Command{
		Use: "updatePipeline",
		Short: "Update One Data Lake Pipeline",
		Annotations: map[string]string{
			"output":      template,
		},
		PreRunE: func(cmd *cobra.Command, args []string) error {
			return opts.PreRunE(
				opts.initClient(),
				opts.InitOutput(cmd.OutOrStdout(), template),
			)
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			return opts.Run(cmd.Context())
		},
	}
	cmd.Flags().StringVar(&opts.groupId, "groupId", "", `Unique 24-hexadecimal digit string that identifies your project. Use the [/groups](#tag/Projects/operation/listProjects) endpoint to retrieve all projects to which the authenticated user has access.

**NOTE**: Groups and projects are synonymous terms. Your group id is the same as your project id. For existing groups, your group/project id remains the same. The resource and corresponding endpoints use the term groups.`)
	cmd.Flags().StringVar(&opts.pipelineName, "pipelineName", "", `Human-readable label that identifies the Data Lake Pipeline.`)
	

	cmd.Flags().StringVar(&opts._id, "_id", "", `Unique 24-hexadecimal digit string that identifies the Data Lake Pipeline.`)

	cmd.Flags().StringVar(&opts.createdDate, "createdDate", "", `Timestamp that indicates when the Data Lake Pipeline was created.`)

	cmd.Flags().StringVar(&opts.groupId, "groupId", "", `Unique 24-hexadecimal digit string that identifies the group.`)

	cmd.Flags().StringVar(&opts.lastUpdatedDate, "lastUpdatedDate", "", `Timestamp that indicates the last time that the Data Lake Pipeline was updated.`)

	cmd.Flags().StringVar(&opts.name, "name", "", `Name of this Data Lake Pipeline.`)

	cmd.Flags().IngestionSinkVar(&opts.sink, "sink", , ``)

	cmd.Flags().IngestionSourceVar(&opts.source, "source", , ``)

	cmd.Flags().StringVar(&opts.state, "state", "", `State of this Data Lake Pipeline.`)

	cmd.Flags().ArraySliceVar(&opts.transformations, "transformations", nil, `Fields to be excluded for this Data Lake Pipeline.`)


	_ = cmd.MarkFlagRequired("groupId")
	_ = cmd.MarkFlagRequired("pipelineName")
	return cmd
}

func dataLakePipelinesBuilder() *cobra.Command {
	cmd := &cobra.Command{
		Use:     "dataLakePipelines",
		Short:   `Returns, adds, edits, and removes Atlas Data Lake Pipelines and associated runs.`,
	}
	cmd.AddCommand(
		createPipelineBuilder(),
		deletePipelineBuilder(),
		deletePipelineRunDatasetBuilder(),
		getPipelineBuilder(),
		getPipelineRunBuilder(),
		listPipelineRunsBuilder(),
		listPipelineSchedulesBuilder(),
		listPipelineSnapshotsBuilder(),
		listPipelinesBuilder(),
		pausePipelineBuilder(),
		resumePipelineBuilder(),
		triggerSnapshotIngestionBuilder(),
		updatePipelineBuilder(),
	)
	return cmd
}

