// Copyright 2023 MongoDB Inc
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package generated

import (
	"context"
	"os"
	"time"

	"github.com/spf13/cobra"
	"go.mongodb.org/atlas-sdk/v20230201008/admin"
	"github.com/mongodb/mongodb-atlas-cli/internal/cli"
)

type createAlertConfigurationOpts struct {
	cli.GlobalOpts
	cli.OutputOpts
	client *admin.APIClient
	groupId string
	
}

func (opts *createAlertConfigurationOpts) initClient() func() error {
	return func() error {
		var err error
		opts.client, err = newClientWithAuth()
		return err
	}
}

func (opts *createAlertConfigurationOpts) Run(ctx context.Context) error {
	params := &admin.CreateAlertConfigurationApiParams{
		GroupId: opts.groupId,
		
	}
	resp, _, err := opts.client.AlertConfigurationsApi.CreateAlertConfigurationWithParams(ctx, params).Execute()
	if err != nil {
		return err
	}

	return opts.Print(resp)
}

func createAlertConfigurationBuilder() *cobra.Command {
	const template = "<<some template>>"

	opts := createAlertConfigurationOpts{}
	cmd := &cobra.Command{
		Use: "createAlertConfiguration",
		Short: "Create One Alert Configuration in One Project",
		Annotations: map[string]string{
			"output":      template,
		},
		PreRunE: func(cmd *cobra.Command, args []string) error {
			return opts.PreRunE(
				opts.initClient(),
				opts.InitOutput(cmd.OutOrStdout(), template),
			)
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			return opts.Run(cmd.Context())
		},
	}
	cmd.Flags().StringVar(&opts.groupId, "groupId", "", `Unique 24-hexadecimal digit string that identifies your project. Use the [/groups](#tag/Projects/operation/listProjects) endpoint to retrieve all projects to which the authenticated user has access.

**NOTE**: Groups and projects are synonymous terms. Your group id is the same as your project id. For existing groups, your group/project id remains the same. The resource and corresponding endpoints use the term groups.`)
	

	cmd.Flags().StringVar(&opts.created, "created", "", `Date and time when MongoDB Cloud created the alert configuration. This parameter expresses its value in the &lt;a href&#x3D;&quot;https://en.wikipedia.org/wiki/ISO_8601&quot; target&#x3D;&quot;_blank&quot; rel&#x3D;&quot;noopener noreferrer&quot;&gt;ISO 8601&lt;/a&gt; timestamp format in UTC.`)

	cmd.Flags().BoolVar(&opts.enabled, "enabled", false, `Flag that indicates whether someone enabled this alert configuration for the specified project.`)

	cmd.Flags().StringVar(&opts.eventTypeName, "eventTypeName", "", `Event type that triggers an alert.`)

	cmd.Flags().StringVar(&opts.groupId, "groupId", "", `Unique 24-hexadecimal digit string that identifies the project that owns this alert configuration.`)

	cmd.Flags().StringVar(&opts.id, "id", "", `Unique 24-hexadecimal digit string that identifies this alert configuration.`)

	cmd.Flags().ArraySliceVar(&opts.links, "links", nil, `List of one or more Uniform Resource Locators (URLs) that point to API sub-resources, related API resources, or both. RFC 5988 outlines these relationships.`)

	cmd.Flags().ArraySliceVar(&opts.matchers, "matchers", nil, `No matchers are available for these alert types. The list is always empty.`)

	cmd.Flags().ArraySliceVar(&opts.notifications, "notifications", nil, `List that contains the targets that MongoDB Cloud sends notifications.`)

	cmd.Flags().StringVar(&opts.updated, "updated", "", `Date and time when someone last updated this alert configuration. This parameter expresses its value in the &lt;a href&#x3D;&quot;https://en.wikipedia.org/wiki/ISO_8601&quot; target&#x3D;&quot;_blank&quot; rel&#x3D;&quot;noopener noreferrer&quot;&gt;ISO 8601&lt;/a&gt; timestamp format in UTC.`)

	cmd.Flags().ServerlessMetricThresholdVar(&opts.metricThreshold, "metricThreshold", , ``)

	cmd.Flags().ThresholdViewIntegerVar(&opts.threshold, "threshold", , ``)


	_ = cmd.MarkFlagRequired("groupId")
	return cmd
}
type deleteAlertConfigurationOpts struct {
	cli.GlobalOpts
	cli.OutputOpts
	client *admin.APIClient
	groupId string
	alertConfigId string
}

func (opts *deleteAlertConfigurationOpts) initClient() func() error {
	return func() error {
		var err error
		opts.client, err = newClientWithAuth()
		return err
	}
}

func (opts *deleteAlertConfigurationOpts) Run(ctx context.Context) error {
	params := &admin.DeleteAlertConfigurationApiParams{
		GroupId: opts.groupId,
		AlertConfigId: opts.alertConfigId,
	}
	_, err := opts.client.AlertConfigurationsApi.DeleteAlertConfigurationWithParams(ctx, params).Execute()
	if err != nil {
		return err
	}

	return opts.Print(nil)
}

func deleteAlertConfigurationBuilder() *cobra.Command {
	const template = "<<some template>>"

	opts := deleteAlertConfigurationOpts{}
	cmd := &cobra.Command{
		Use: "deleteAlertConfiguration",
		Short: "Remove One Alert Configuration from One Project",
		Annotations: map[string]string{
			"output":      template,
		},
		PreRunE: func(cmd *cobra.Command, args []string) error {
			return opts.PreRunE(
				opts.initClient(),
				opts.InitOutput(cmd.OutOrStdout(), template),
			)
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			return opts.Run(cmd.Context())
		},
	}
	cmd.Flags().StringVar(&opts.groupId, "groupId", "", `Unique 24-hexadecimal digit string that identifies your project. Use the [/groups](#tag/Projects/operation/listProjects) endpoint to retrieve all projects to which the authenticated user has access.

**NOTE**: Groups and projects are synonymous terms. Your group id is the same as your project id. For existing groups, your group/project id remains the same. The resource and corresponding endpoints use the term groups.`)
	cmd.Flags().StringVar(&opts.alertConfigId, "alertConfigId", "", `Unique 24-hexadecimal digit string that identifies the alert configuration. Use the [/alertConfigs](#tag/Alert-Configurations/operation/listAlertConfigurations) endpoint to retrieve all alert configurations to which the authenticated user has access.`)


	_ = cmd.MarkFlagRequired("groupId")
	_ = cmd.MarkFlagRequired("alertConfigId")
	return cmd
}
type getAlertConfigurationOpts struct {
	cli.GlobalOpts
	cli.OutputOpts
	client *admin.APIClient
	groupId string
	alertConfigId string
}

func (opts *getAlertConfigurationOpts) initClient() func() error {
	return func() error {
		var err error
		opts.client, err = newClientWithAuth()
		return err
	}
}

func (opts *getAlertConfigurationOpts) Run(ctx context.Context) error {
	params := &admin.GetAlertConfigurationApiParams{
		GroupId: opts.groupId,
		AlertConfigId: opts.alertConfigId,
	}
	resp, _, err := opts.client.AlertConfigurationsApi.GetAlertConfigurationWithParams(ctx, params).Execute()
	if err != nil {
		return err
	}

	return opts.Print(resp)
}

func getAlertConfigurationBuilder() *cobra.Command {
	const template = "<<some template>>"

	opts := getAlertConfigurationOpts{}
	cmd := &cobra.Command{
		Use: "getAlertConfiguration",
		Short: "Return One Alert Configuration from One Project",
		Annotations: map[string]string{
			"output":      template,
		},
		PreRunE: func(cmd *cobra.Command, args []string) error {
			return opts.PreRunE(
				opts.initClient(),
				opts.InitOutput(cmd.OutOrStdout(), template),
			)
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			return opts.Run(cmd.Context())
		},
	}
	cmd.Flags().StringVar(&opts.groupId, "groupId", "", `Unique 24-hexadecimal digit string that identifies your project. Use the [/groups](#tag/Projects/operation/listProjects) endpoint to retrieve all projects to which the authenticated user has access.

**NOTE**: Groups and projects are synonymous terms. Your group id is the same as your project id. For existing groups, your group/project id remains the same. The resource and corresponding endpoints use the term groups.`)
	cmd.Flags().StringVar(&opts.alertConfigId, "alertConfigId", "", `Unique 24-hexadecimal digit string that identifies the alert configuration. Use the [/alertConfigs](#tag/Alert-Configurations/operation/listAlertConfigurations) endpoint to retrieve all alert configurations to which the authenticated user has access.`)


	_ = cmd.MarkFlagRequired("groupId")
	_ = cmd.MarkFlagRequired("alertConfigId")
	return cmd
}
type listAlertConfigurationMatchersFieldNamesOpts struct {
	cli.GlobalOpts
	cli.OutputOpts
	client *admin.APIClient
}

func (opts *listAlertConfigurationMatchersFieldNamesOpts) initClient() func() error {
	return func() error {
		var err error
		opts.client, err = newClientWithAuth()
		return err
	}
}

func (opts *listAlertConfigurationMatchersFieldNamesOpts) Run(ctx context.Context) error {
	params := &admin.ListAlertConfigurationMatchersFieldNamesApiParams{
	}
	resp, _, err := opts.client.AlertConfigurationsApi.ListAlertConfigurationMatchersFieldNamesWithParams(ctx, params).Execute()
	if err != nil {
		return err
	}

	return opts.Print(resp)
}

func listAlertConfigurationMatchersFieldNamesBuilder() *cobra.Command {
	const template = "<<some template>>"

	opts := listAlertConfigurationMatchersFieldNamesOpts{}
	cmd := &cobra.Command{
		Use: "listAlertConfigurationMatchersFieldNames",
		Short: "Get All Alert Configuration Matchers Field Names",
		Annotations: map[string]string{
			"output":      template,
		},
		PreRunE: func(cmd *cobra.Command, args []string) error {
			return opts.PreRunE(
				opts.initClient(),
				opts.InitOutput(cmd.OutOrStdout(), template),
			)
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			return opts.Run(cmd.Context())
		},
	}


	return cmd
}
type listAlertConfigurationsOpts struct {
	cli.GlobalOpts
	cli.OutputOpts
	client *admin.APIClient
	groupId string
	includeCount bool
	itemsPerPage int
	pageNum int
}

func (opts *listAlertConfigurationsOpts) initClient() func() error {
	return func() error {
		var err error
		opts.client, err = newClientWithAuth()
		return err
	}
}

func (opts *listAlertConfigurationsOpts) Run(ctx context.Context) error {
	params := &admin.ListAlertConfigurationsApiParams{
		GroupId: opts.groupId,
		IncludeCount: &opts.includeCount,
		ItemsPerPage: &opts.itemsPerPage,
		PageNum: &opts.pageNum,
	}
	resp, _, err := opts.client.AlertConfigurationsApi.ListAlertConfigurationsWithParams(ctx, params).Execute()
	if err != nil {
		return err
	}

	return opts.Print(resp)
}

func listAlertConfigurationsBuilder() *cobra.Command {
	const template = "<<some template>>"

	opts := listAlertConfigurationsOpts{}
	cmd := &cobra.Command{
		Use: "listAlertConfigurations",
		Short: "Return All Alert Configurations for One Project",
		Annotations: map[string]string{
			"output":      template,
		},
		PreRunE: func(cmd *cobra.Command, args []string) error {
			return opts.PreRunE(
				opts.initClient(),
				opts.InitOutput(cmd.OutOrStdout(), template),
			)
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			return opts.Run(cmd.Context())
		},
	}
	cmd.Flags().StringVar(&opts.groupId, "groupId", "", `Unique 24-hexadecimal digit string that identifies your project. Use the [/groups](#tag/Projects/operation/listProjects) endpoint to retrieve all projects to which the authenticated user has access.

**NOTE**: Groups and projects are synonymous terms. Your group id is the same as your project id. For existing groups, your group/project id remains the same. The resource and corresponding endpoints use the term groups.`)
	cmd.Flags().BoolVar(&opts.includeCount, "includeCount", true, `Flag that indicates whether the response returns the total number of items (**totalCount**) in the response.`)
	cmd.Flags().IntVar(&opts.itemsPerPage, "itemsPerPage", 100, `Number of items that the response returns per page.`)
	cmd.Flags().IntVar(&opts.pageNum, "pageNum", 1, `Number of the page that displays the current set of the total objects that the response returns.`)


	_ = cmd.MarkFlagRequired("groupId")
	return cmd
}
type listAlertConfigurationsByAlertIdOpts struct {
	cli.GlobalOpts
	cli.OutputOpts
	client *admin.APIClient
	groupId string
	alertId string
	includeCount bool
	itemsPerPage int
	pageNum int
}

func (opts *listAlertConfigurationsByAlertIdOpts) initClient() func() error {
	return func() error {
		var err error
		opts.client, err = newClientWithAuth()
		return err
	}
}

func (opts *listAlertConfigurationsByAlertIdOpts) Run(ctx context.Context) error {
	params := &admin.ListAlertConfigurationsByAlertIdApiParams{
		GroupId: opts.groupId,
		AlertId: opts.alertId,
		IncludeCount: &opts.includeCount,
		ItemsPerPage: &opts.itemsPerPage,
		PageNum: &opts.pageNum,
	}
	resp, _, err := opts.client.AlertConfigurationsApi.ListAlertConfigurationsByAlertIdWithParams(ctx, params).Execute()
	if err != nil {
		return err
	}

	return opts.Print(resp)
}

func listAlertConfigurationsByAlertIdBuilder() *cobra.Command {
	const template = "<<some template>>"

	opts := listAlertConfigurationsByAlertIdOpts{}
	cmd := &cobra.Command{
		Use: "listAlertConfigurationsByAlertId",
		Short: "Return All Alert Configurations Set for One Alert",
		Annotations: map[string]string{
			"output":      template,
		},
		PreRunE: func(cmd *cobra.Command, args []string) error {
			return opts.PreRunE(
				opts.initClient(),
				opts.InitOutput(cmd.OutOrStdout(), template),
			)
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			return opts.Run(cmd.Context())
		},
	}
	cmd.Flags().StringVar(&opts.groupId, "groupId", "", `Unique 24-hexadecimal digit string that identifies your project. Use the [/groups](#tag/Projects/operation/listProjects) endpoint to retrieve all projects to which the authenticated user has access.

**NOTE**: Groups and projects are synonymous terms. Your group id is the same as your project id. For existing groups, your group/project id remains the same. The resource and corresponding endpoints use the term groups.`)
	cmd.Flags().StringVar(&opts.alertId, "alertId", "", `Unique 24-hexadecimal digit string that identifies the alert. Use the [/alerts](#tag/Alerts/operation/listAlerts) endpoint to retrieve all alerts to which the authenticated user has access.`)
	cmd.Flags().BoolVar(&opts.includeCount, "includeCount", true, `Flag that indicates whether the response returns the total number of items (**totalCount**) in the response.`)
	cmd.Flags().IntVar(&opts.itemsPerPage, "itemsPerPage", 100, `Number of items that the response returns per page.`)
	cmd.Flags().IntVar(&opts.pageNum, "pageNum", 1, `Number of the page that displays the current set of the total objects that the response returns.`)


	_ = cmd.MarkFlagRequired("groupId")
	_ = cmd.MarkFlagRequired("alertId")
	return cmd
}
type toggleAlertConfigurationOpts struct {
	cli.GlobalOpts
	cli.OutputOpts
	client *admin.APIClient
	groupId string
	alertConfigId string
	
}

func (opts *toggleAlertConfigurationOpts) initClient() func() error {
	return func() error {
		var err error
		opts.client, err = newClientWithAuth()
		return err
	}
}

func (opts *toggleAlertConfigurationOpts) Run(ctx context.Context) error {
	params := &admin.ToggleAlertConfigurationApiParams{
		GroupId: opts.groupId,
		AlertConfigId: opts.alertConfigId,
		
	}
	resp, _, err := opts.client.AlertConfigurationsApi.ToggleAlertConfigurationWithParams(ctx, params).Execute()
	if err != nil {
		return err
	}

	return opts.Print(resp)
}

func toggleAlertConfigurationBuilder() *cobra.Command {
	const template = "<<some template>>"

	opts := toggleAlertConfigurationOpts{}
	cmd := &cobra.Command{
		Use: "toggleAlertConfiguration",
		Short: "Toggle One State of One Alert Configuration in One Project",
		Annotations: map[string]string{
			"output":      template,
		},
		PreRunE: func(cmd *cobra.Command, args []string) error {
			return opts.PreRunE(
				opts.initClient(),
				opts.InitOutput(cmd.OutOrStdout(), template),
			)
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			return opts.Run(cmd.Context())
		},
	}
	cmd.Flags().StringVar(&opts.groupId, "groupId", "", `Unique 24-hexadecimal digit string that identifies your project. Use the [/groups](#tag/Projects/operation/listProjects) endpoint to retrieve all projects to which the authenticated user has access.

**NOTE**: Groups and projects are synonymous terms. Your group id is the same as your project id. For existing groups, your group/project id remains the same. The resource and corresponding endpoints use the term groups.`)
	cmd.Flags().StringVar(&opts.alertConfigId, "alertConfigId", "", `Unique 24-hexadecimal digit string that identifies the alert configuration that triggered this alert. Use the [/alertConfigs](#tag/Alert-Configurations/operation/listAlertConfigurations) endpoint to retrieve all alert configurations to which the authenticated user has access.`)
	

	cmd.Flags().BoolVar(&opts.enabled, "enabled", false, `Flag that indicates whether to enable or disable the specified alert configuration in the specified project.`)


	_ = cmd.MarkFlagRequired("groupId")
	_ = cmd.MarkFlagRequired("alertConfigId")
	return cmd
}
type updateAlertConfigurationOpts struct {
	cli.GlobalOpts
	cli.OutputOpts
	client *admin.APIClient
	groupId string
	alertConfigId string
	
}

func (opts *updateAlertConfigurationOpts) initClient() func() error {
	return func() error {
		var err error
		opts.client, err = newClientWithAuth()
		return err
	}
}

func (opts *updateAlertConfigurationOpts) Run(ctx context.Context) error {
	params := &admin.UpdateAlertConfigurationApiParams{
		GroupId: opts.groupId,
		AlertConfigId: opts.alertConfigId,
		
	}
	resp, _, err := opts.client.AlertConfigurationsApi.UpdateAlertConfigurationWithParams(ctx, params).Execute()
	if err != nil {
		return err
	}

	return opts.Print(resp)
}

func updateAlertConfigurationBuilder() *cobra.Command {
	const template = "<<some template>>"

	opts := updateAlertConfigurationOpts{}
	cmd := &cobra.Command{
		Use: "updateAlertConfiguration",
		Short: "Update One Alert Configuration for One Project",
		Annotations: map[string]string{
			"output":      template,
		},
		PreRunE: func(cmd *cobra.Command, args []string) error {
			return opts.PreRunE(
				opts.initClient(),
				opts.InitOutput(cmd.OutOrStdout(), template),
			)
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			return opts.Run(cmd.Context())
		},
	}
	cmd.Flags().StringVar(&opts.groupId, "groupId", "", `Unique 24-hexadecimal digit string that identifies your project. Use the [/groups](#tag/Projects/operation/listProjects) endpoint to retrieve all projects to which the authenticated user has access.

**NOTE**: Groups and projects are synonymous terms. Your group id is the same as your project id. For existing groups, your group/project id remains the same. The resource and corresponding endpoints use the term groups.`)
	cmd.Flags().StringVar(&opts.alertConfigId, "alertConfigId", "", `Unique 24-hexadecimal digit string that identifies the alert configuration. Use the [/alertConfigs](#tag/Alert-Configurations/operation/listAlertConfigurations) endpoint to retrieve all alert configurations to which the authenticated user has access.`)
	

	cmd.Flags().StringVar(&opts.created, "created", "", `Date and time when MongoDB Cloud created the alert configuration. This parameter expresses its value in the &lt;a href&#x3D;&quot;https://en.wikipedia.org/wiki/ISO_8601&quot; target&#x3D;&quot;_blank&quot; rel&#x3D;&quot;noopener noreferrer&quot;&gt;ISO 8601&lt;/a&gt; timestamp format in UTC.`)

	cmd.Flags().BoolVar(&opts.enabled, "enabled", false, `Flag that indicates whether someone enabled this alert configuration for the specified project.`)

	cmd.Flags().StringVar(&opts.eventTypeName, "eventTypeName", "", `Event type that triggers an alert.`)

	cmd.Flags().StringVar(&opts.groupId, "groupId", "", `Unique 24-hexadecimal digit string that identifies the project that owns this alert configuration.`)

	cmd.Flags().StringVar(&opts.id, "id", "", `Unique 24-hexadecimal digit string that identifies this alert configuration.`)

	cmd.Flags().ArraySliceVar(&opts.links, "links", nil, `List of one or more Uniform Resource Locators (URLs) that point to API sub-resources, related API resources, or both. RFC 5988 outlines these relationships.`)

	cmd.Flags().ArraySliceVar(&opts.matchers, "matchers", nil, `No matchers are available for these alert types. The list is always empty.`)

	cmd.Flags().ArraySliceVar(&opts.notifications, "notifications", nil, `List that contains the targets that MongoDB Cloud sends notifications.`)

	cmd.Flags().StringVar(&opts.updated, "updated", "", `Date and time when someone last updated this alert configuration. This parameter expresses its value in the &lt;a href&#x3D;&quot;https://en.wikipedia.org/wiki/ISO_8601&quot; target&#x3D;&quot;_blank&quot; rel&#x3D;&quot;noopener noreferrer&quot;&gt;ISO 8601&lt;/a&gt; timestamp format in UTC.`)

	cmd.Flags().ServerlessMetricThresholdVar(&opts.metricThreshold, "metricThreshold", , ``)

	cmd.Flags().ThresholdViewIntegerVar(&opts.threshold, "threshold", , ``)


	_ = cmd.MarkFlagRequired("groupId")
	_ = cmd.MarkFlagRequired("alertConfigId")
	return cmd
}

func alertConfigurationsBuilder() *cobra.Command {
	cmd := &cobra.Command{
		Use:     "alertConfigurations",
		Short:   `Returns and edits the conditions that trigger alerts and how MongoDB Cloud notifies users. This collection remains under revision and may change.`,
	}
	cmd.AddCommand(
		createAlertConfigurationBuilder(),
		deleteAlertConfigurationBuilder(),
		getAlertConfigurationBuilder(),
		listAlertConfigurationMatchersFieldNamesBuilder(),
		listAlertConfigurationsBuilder(),
		listAlertConfigurationsByAlertIdBuilder(),
		toggleAlertConfigurationBuilder(),
		updateAlertConfigurationBuilder(),
	)
	return cmd
}

