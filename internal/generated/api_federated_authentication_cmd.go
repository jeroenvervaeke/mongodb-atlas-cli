// Copyright 2023 MongoDB Inc
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package generated

import (
	"context"
	"os"
	"time"

	"github.com/spf13/cobra"
	"go.mongodb.org/atlas-sdk/v20230201008/admin"
	"github.com/mongodb/mongodb-atlas-cli/internal/cli"
)

type createRoleMappingOpts struct {
	cli.GlobalOpts
	cli.OutputOpts
	client *admin.APIClient
	federationSettingsId string
	orgId string
	
}

func (opts *createRoleMappingOpts) initClient() func() error {
	return func() error {
		var err error
		opts.client, err = newClientWithAuth()
		return err
	}
}

func (opts *createRoleMappingOpts) Run(ctx context.Context) error {
	params := &admin.CreateRoleMappingApiParams{
		FederationSettingsId: opts.federationSettingsId,
		OrgId: opts.orgId,
		
	}
	resp, _, err := opts.client.FederatedAuthenticationApi.CreateRoleMappingWithParams(ctx, params).Execute()
	if err != nil {
		return err
	}

	return opts.Print(resp)
}

func createRoleMappingBuilder() *cobra.Command {
	const template = "<<some template>>"

	opts := createRoleMappingOpts{}
	cmd := &cobra.Command{
		Use: "createRoleMapping",
		Short: "Add One Role Mapping to One Organization",
		Annotations: map[string]string{
			"output":      template,
		},
		PreRunE: func(cmd *cobra.Command, args []string) error {
			return opts.PreRunE(
				opts.initClient(),
				opts.InitOutput(cmd.OutOrStdout(), template),
			)
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			return opts.Run(cmd.Context())
		},
	}
	cmd.Flags().StringVar(&opts.federationSettingsId, "federationSettingsId", "", `Unique 24-hexadecimal digit string that identifies your federation.`)
	cmd.Flags().StringVar(&opts.orgId, "orgId", "", `Unique 24-hexadecimal digit string that identifies the organization that contains your projects. Use the [/orgs](#tag/Organizations/operation/listOrganizations) endpoint to retrieve all organizations to which the authenticated user has access.`)
	

	cmd.Flags().StringVar(&opts.externalGroupName, "externalGroupName", "", `Unique human-readable label that identifies the identity provider group to whichthis role mapping applies.`)

	cmd.Flags().StringVar(&opts.id, "id", "", `Unique 24-hexadecimal digit string that identifies this role mapping.`)

	cmd.Flags().SetSliceVar(&opts.roleAssignments, "roleAssignments", nil, `Atlas roles and the unique identifiers of the groups and organizations associated with each role.`)


	_ = cmd.MarkFlagRequired("federationSettingsId")
	_ = cmd.MarkFlagRequired("orgId")
	return cmd
}
type deleteFederationAppOpts struct {
	cli.GlobalOpts
	cli.OutputOpts
	client *admin.APIClient
	federationSettingsId string
}

func (opts *deleteFederationAppOpts) initClient() func() error {
	return func() error {
		var err error
		opts.client, err = newClientWithAuth()
		return err
	}
}

func (opts *deleteFederationAppOpts) Run(ctx context.Context) error {
	params := &admin.DeleteFederationAppApiParams{
		FederationSettingsId: opts.federationSettingsId,
	}
	_, err := opts.client.FederatedAuthenticationApi.DeleteFederationAppWithParams(ctx, params).Execute()
	if err != nil {
		return err
	}

	return opts.Print(nil)
}

func deleteFederationAppBuilder() *cobra.Command {
	const template = "<<some template>>"

	opts := deleteFederationAppOpts{}
	cmd := &cobra.Command{
		Use: "deleteFederationApp",
		Short: "Delete the federation settings instance.",
		Annotations: map[string]string{
			"output":      template,
		},
		PreRunE: func(cmd *cobra.Command, args []string) error {
			return opts.PreRunE(
				opts.initClient(),
				opts.InitOutput(cmd.OutOrStdout(), template),
			)
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			return opts.Run(cmd.Context())
		},
	}
	cmd.Flags().StringVar(&opts.federationSettingsId, "federationSettingsId", "", `Unique 24-hexadecimal digit string that identifies your federation.`)


	_ = cmd.MarkFlagRequired("federationSettingsId")
	return cmd
}
type deleteRoleMappingOpts struct {
	cli.GlobalOpts
	cli.OutputOpts
	client *admin.APIClient
	federationSettingsId string
	id string
	orgId string
}

func (opts *deleteRoleMappingOpts) initClient() func() error {
	return func() error {
		var err error
		opts.client, err = newClientWithAuth()
		return err
	}
}

func (opts *deleteRoleMappingOpts) Run(ctx context.Context) error {
	params := &admin.DeleteRoleMappingApiParams{
		FederationSettingsId: opts.federationSettingsId,
		Id: opts.id,
		OrgId: opts.orgId,
	}
	_, err := opts.client.FederatedAuthenticationApi.DeleteRoleMappingWithParams(ctx, params).Execute()
	if err != nil {
		return err
	}

	return opts.Print(nil)
}

func deleteRoleMappingBuilder() *cobra.Command {
	const template = "<<some template>>"

	opts := deleteRoleMappingOpts{}
	cmd := &cobra.Command{
		Use: "deleteRoleMapping",
		Short: "Remove One Role Mapping from One Organization",
		Annotations: map[string]string{
			"output":      template,
		},
		PreRunE: func(cmd *cobra.Command, args []string) error {
			return opts.PreRunE(
				opts.initClient(),
				opts.InitOutput(cmd.OutOrStdout(), template),
			)
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			return opts.Run(cmd.Context())
		},
	}
	cmd.Flags().StringVar(&opts.federationSettingsId, "federationSettingsId", "", `Unique 24-hexadecimal digit string that identifies your federation.`)
	cmd.Flags().StringVar(&opts.id, "id", "", `Unique 24-hexadecimal digit string that identifies the role mapping that you want to remove.`)
	cmd.Flags().StringVar(&opts.orgId, "orgId", "", `Unique 24-hexadecimal digit string that identifies the organization that contains your projects. Use the [/orgs](#tag/Organizations/operation/listOrganizations) endpoint to retrieve all organizations to which the authenticated user has access.`)


	_ = cmd.MarkFlagRequired("federationSettingsId")
	_ = cmd.MarkFlagRequired("id")
	_ = cmd.MarkFlagRequired("orgId")
	return cmd
}
type getConnectedOrgConfigOpts struct {
	cli.GlobalOpts
	cli.OutputOpts
	client *admin.APIClient
	federationSettingsId string
	orgId string
}

func (opts *getConnectedOrgConfigOpts) initClient() func() error {
	return func() error {
		var err error
		opts.client, err = newClientWithAuth()
		return err
	}
}

func (opts *getConnectedOrgConfigOpts) Run(ctx context.Context) error {
	params := &admin.GetConnectedOrgConfigApiParams{
		FederationSettingsId: opts.federationSettingsId,
		OrgId: opts.orgId,
	}
	resp, _, err := opts.client.FederatedAuthenticationApi.GetConnectedOrgConfigWithParams(ctx, params).Execute()
	if err != nil {
		return err
	}

	return opts.Print(resp)
}

func getConnectedOrgConfigBuilder() *cobra.Command {
	const template = "<<some template>>"

	opts := getConnectedOrgConfigOpts{}
	cmd := &cobra.Command{
		Use: "getConnectedOrgConfig",
		Short: "Return One Org Config Connected to One Federation",
		Annotations: map[string]string{
			"output":      template,
		},
		PreRunE: func(cmd *cobra.Command, args []string) error {
			return opts.PreRunE(
				opts.initClient(),
				opts.InitOutput(cmd.OutOrStdout(), template),
			)
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			return opts.Run(cmd.Context())
		},
	}
	cmd.Flags().StringVar(&opts.federationSettingsId, "federationSettingsId", "", `Unique 24-hexadecimal digit string that identifies your federation.`)
	cmd.Flags().StringVar(&opts.orgId, "orgId", "", `Unique 24-hexadecimal digit string that identifies the connected organization configuration to return.`)


	_ = cmd.MarkFlagRequired("federationSettingsId")
	_ = cmd.MarkFlagRequired("orgId")
	return cmd
}
type getFederationSettingsOpts struct {
	cli.GlobalOpts
	cli.OutputOpts
	client *admin.APIClient
	orgId string
}

func (opts *getFederationSettingsOpts) initClient() func() error {
	return func() error {
		var err error
		opts.client, err = newClientWithAuth()
		return err
	}
}

func (opts *getFederationSettingsOpts) Run(ctx context.Context) error {
	params := &admin.GetFederationSettingsApiParams{
		OrgId: opts.orgId,
	}
	resp, _, err := opts.client.FederatedAuthenticationApi.GetFederationSettingsWithParams(ctx, params).Execute()
	if err != nil {
		return err
	}

	return opts.Print(resp)
}

func getFederationSettingsBuilder() *cobra.Command {
	const template = "<<some template>>"

	opts := getFederationSettingsOpts{}
	cmd := &cobra.Command{
		Use: "getFederationSettings",
		Short: "Return Federation Settings for One Organization",
		Annotations: map[string]string{
			"output":      template,
		},
		PreRunE: func(cmd *cobra.Command, args []string) error {
			return opts.PreRunE(
				opts.initClient(),
				opts.InitOutput(cmd.OutOrStdout(), template),
			)
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			return opts.Run(cmd.Context())
		},
	}
	cmd.Flags().StringVar(&opts.orgId, "orgId", "", `Unique 24-hexadecimal digit string that identifies the organization that contains your projects. Use the [/orgs](#tag/Organizations/operation/listOrganizations) endpoint to retrieve all organizations to which the authenticated user has access.`)


	_ = cmd.MarkFlagRequired("orgId")
	return cmd
}
type getIdentityProviderOpts struct {
	cli.GlobalOpts
	cli.OutputOpts
	client *admin.APIClient
	federationSettingsId string
	identityProviderId string
}

func (opts *getIdentityProviderOpts) initClient() func() error {
	return func() error {
		var err error
		opts.client, err = newClientWithAuth()
		return err
	}
}

func (opts *getIdentityProviderOpts) Run(ctx context.Context) error {
	params := &admin.GetIdentityProviderApiParams{
		FederationSettingsId: opts.federationSettingsId,
		IdentityProviderId: opts.identityProviderId,
	}
	resp, _, err := opts.client.FederatedAuthenticationApi.GetIdentityProviderWithParams(ctx, params).Execute()
	if err != nil {
		return err
	}

	return opts.Print(resp)
}

func getIdentityProviderBuilder() *cobra.Command {
	const template = "<<some template>>"

	opts := getIdentityProviderOpts{}
	cmd := &cobra.Command{
		Use: "getIdentityProvider",
		Short: "Return one identity provider from the specified federation.",
		Annotations: map[string]string{
			"output":      template,
		},
		PreRunE: func(cmd *cobra.Command, args []string) error {
			return opts.PreRunE(
				opts.initClient(),
				opts.InitOutput(cmd.OutOrStdout(), template),
			)
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			return opts.Run(cmd.Context())
		},
	}
	cmd.Flags().StringVar(&opts.federationSettingsId, "federationSettingsId", "", `Unique 24-hexadecimal digit string that identifies your federation.`)
	cmd.Flags().StringVar(&opts.identityProviderId, "identityProviderId", "", `Unique 20-hexadecimal digit string that identifies the identity provider.`)


	_ = cmd.MarkFlagRequired("federationSettingsId")
	_ = cmd.MarkFlagRequired("identityProviderId")
	return cmd
}
type getIdentityProviderMetadataOpts struct {
	cli.GlobalOpts
	cli.OutputOpts
	client *admin.APIClient
	federationSettingsId string
	identityProviderId string
}

func (opts *getIdentityProviderMetadataOpts) initClient() func() error {
	return func() error {
		var err error
		opts.client, err = newClientWithAuth()
		return err
	}
}

func (opts *getIdentityProviderMetadataOpts) Run(ctx context.Context) error {
	params := &admin.GetIdentityProviderMetadataApiParams{
		FederationSettingsId: opts.federationSettingsId,
		IdentityProviderId: opts.identityProviderId,
	}
	resp, _, err := opts.client.FederatedAuthenticationApi.GetIdentityProviderMetadataWithParams(ctx, params).Execute()
	if err != nil {
		return err
	}

	return opts.Print(resp)
}

func getIdentityProviderMetadataBuilder() *cobra.Command {
	const template = "<<some template>>"

	opts := getIdentityProviderMetadataOpts{}
	cmd := &cobra.Command{
		Use: "getIdentityProviderMetadata",
		Short: "Return the metadata of one identity provider in the specified federation.",
		Annotations: map[string]string{
			"output":      template,
		},
		PreRunE: func(cmd *cobra.Command, args []string) error {
			return opts.PreRunE(
				opts.initClient(),
				opts.InitOutput(cmd.OutOrStdout(), template),
			)
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			return opts.Run(cmd.Context())
		},
	}
	cmd.Flags().StringVar(&opts.federationSettingsId, "federationSettingsId", "", `Unique 24-hexadecimal digit string that identifies your federation.`)
	cmd.Flags().StringVar(&opts.identityProviderId, "identityProviderId", "", `Unique 20-hexadecimal digit string that identifies the identity provider.`)


	_ = cmd.MarkFlagRequired("federationSettingsId")
	_ = cmd.MarkFlagRequired("identityProviderId")
	return cmd
}
type getRoleMappingOpts struct {
	cli.GlobalOpts
	cli.OutputOpts
	client *admin.APIClient
	federationSettingsId string
	id string
	orgId string
}

func (opts *getRoleMappingOpts) initClient() func() error {
	return func() error {
		var err error
		opts.client, err = newClientWithAuth()
		return err
	}
}

func (opts *getRoleMappingOpts) Run(ctx context.Context) error {
	params := &admin.GetRoleMappingApiParams{
		FederationSettingsId: opts.federationSettingsId,
		Id: opts.id,
		OrgId: opts.orgId,
	}
	resp, _, err := opts.client.FederatedAuthenticationApi.GetRoleMappingWithParams(ctx, params).Execute()
	if err != nil {
		return err
	}

	return opts.Print(resp)
}

func getRoleMappingBuilder() *cobra.Command {
	const template = "<<some template>>"

	opts := getRoleMappingOpts{}
	cmd := &cobra.Command{
		Use: "getRoleMapping",
		Short: "Return One Role Mapping from One Organization",
		Annotations: map[string]string{
			"output":      template,
		},
		PreRunE: func(cmd *cobra.Command, args []string) error {
			return opts.PreRunE(
				opts.initClient(),
				opts.InitOutput(cmd.OutOrStdout(), template),
			)
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			return opts.Run(cmd.Context())
		},
	}
	cmd.Flags().StringVar(&opts.federationSettingsId, "federationSettingsId", "", `Unique 24-hexadecimal digit string that identifies your federation.`)
	cmd.Flags().StringVar(&opts.id, "id", "", `Unique 24-hexadecimal digit string that identifies the role mapping that you want to return.`)
	cmd.Flags().StringVar(&opts.orgId, "orgId", "", `Unique 24-hexadecimal digit string that identifies the organization that contains your projects. Use the [/orgs](#tag/Organizations/operation/listOrganizations) endpoint to retrieve all organizations to which the authenticated user has access.`)


	_ = cmd.MarkFlagRequired("federationSettingsId")
	_ = cmd.MarkFlagRequired("id")
	_ = cmd.MarkFlagRequired("orgId")
	return cmd
}
type listConnectedOrgConfigsOpts struct {
	cli.GlobalOpts
	cli.OutputOpts
	client *admin.APIClient
	federationSettingsId string
}

func (opts *listConnectedOrgConfigsOpts) initClient() func() error {
	return func() error {
		var err error
		opts.client, err = newClientWithAuth()
		return err
	}
}

func (opts *listConnectedOrgConfigsOpts) Run(ctx context.Context) error {
	params := &admin.ListConnectedOrgConfigsApiParams{
		FederationSettingsId: opts.federationSettingsId,
	}
	resp, _, err := opts.client.FederatedAuthenticationApi.ListConnectedOrgConfigsWithParams(ctx, params).Execute()
	if err != nil {
		return err
	}

	return opts.Print(resp)
}

func listConnectedOrgConfigsBuilder() *cobra.Command {
	const template = "<<some template>>"

	opts := listConnectedOrgConfigsOpts{}
	cmd := &cobra.Command{
		Use: "listConnectedOrgConfigs",
		Short: "Return All Connected Org Configs from the Federation",
		Annotations: map[string]string{
			"output":      template,
		},
		PreRunE: func(cmd *cobra.Command, args []string) error {
			return opts.PreRunE(
				opts.initClient(),
				opts.InitOutput(cmd.OutOrStdout(), template),
			)
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			return opts.Run(cmd.Context())
		},
	}
	cmd.Flags().StringVar(&opts.federationSettingsId, "federationSettingsId", "", `Unique 24-hexadecimal digit string that identifies your federation.`)


	_ = cmd.MarkFlagRequired("federationSettingsId")
	return cmd
}
type listIdentityProvidersOpts struct {
	cli.GlobalOpts
	cli.OutputOpts
	client *admin.APIClient
	federationSettingsId string
}

func (opts *listIdentityProvidersOpts) initClient() func() error {
	return func() error {
		var err error
		opts.client, err = newClientWithAuth()
		return err
	}
}

func (opts *listIdentityProvidersOpts) Run(ctx context.Context) error {
	params := &admin.ListIdentityProvidersApiParams{
		FederationSettingsId: opts.federationSettingsId,
	}
	resp, _, err := opts.client.FederatedAuthenticationApi.ListIdentityProvidersWithParams(ctx, params).Execute()
	if err != nil {
		return err
	}

	return opts.Print(resp)
}

func listIdentityProvidersBuilder() *cobra.Command {
	const template = "<<some template>>"

	opts := listIdentityProvidersOpts{}
	cmd := &cobra.Command{
		Use: "listIdentityProviders",
		Short: "Return all identity providers from the specified federation.",
		Annotations: map[string]string{
			"output":      template,
		},
		PreRunE: func(cmd *cobra.Command, args []string) error {
			return opts.PreRunE(
				opts.initClient(),
				opts.InitOutput(cmd.OutOrStdout(), template),
			)
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			return opts.Run(cmd.Context())
		},
	}
	cmd.Flags().StringVar(&opts.federationSettingsId, "federationSettingsId", "", `Unique 24-hexadecimal digit string that identifies your federation.`)


	_ = cmd.MarkFlagRequired("federationSettingsId")
	return cmd
}
type listRoleMappingsOpts struct {
	cli.GlobalOpts
	cli.OutputOpts
	client *admin.APIClient
	federationSettingsId string
	orgId string
}

func (opts *listRoleMappingsOpts) initClient() func() error {
	return func() error {
		var err error
		opts.client, err = newClientWithAuth()
		return err
	}
}

func (opts *listRoleMappingsOpts) Run(ctx context.Context) error {
	params := &admin.ListRoleMappingsApiParams{
		FederationSettingsId: opts.federationSettingsId,
		OrgId: opts.orgId,
	}
	resp, _, err := opts.client.FederatedAuthenticationApi.ListRoleMappingsWithParams(ctx, params).Execute()
	if err != nil {
		return err
	}

	return opts.Print(resp)
}

func listRoleMappingsBuilder() *cobra.Command {
	const template = "<<some template>>"

	opts := listRoleMappingsOpts{}
	cmd := &cobra.Command{
		Use: "listRoleMappings",
		Short: "Return All Role Mappings from One Organization",
		Annotations: map[string]string{
			"output":      template,
		},
		PreRunE: func(cmd *cobra.Command, args []string) error {
			return opts.PreRunE(
				opts.initClient(),
				opts.InitOutput(cmd.OutOrStdout(), template),
			)
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			return opts.Run(cmd.Context())
		},
	}
	cmd.Flags().StringVar(&opts.federationSettingsId, "federationSettingsId", "", `Unique 24-hexadecimal digit string that identifies your federation.`)
	cmd.Flags().StringVar(&opts.orgId, "orgId", "", `Unique 24-hexadecimal digit string that identifies the organization that contains your projects. Use the [/orgs](#tag/Organizations/operation/listOrganizations) endpoint to retrieve all organizations to which the authenticated user has access.`)


	_ = cmd.MarkFlagRequired("federationSettingsId")
	_ = cmd.MarkFlagRequired("orgId")
	return cmd
}
type removeConnectedOrgConfigOpts struct {
	cli.GlobalOpts
	cli.OutputOpts
	client *admin.APIClient
	federationSettingsId string
	orgId string
}

func (opts *removeConnectedOrgConfigOpts) initClient() func() error {
	return func() error {
		var err error
		opts.client, err = newClientWithAuth()
		return err
	}
}

func (opts *removeConnectedOrgConfigOpts) Run(ctx context.Context) error {
	params := &admin.RemoveConnectedOrgConfigApiParams{
		FederationSettingsId: opts.federationSettingsId,
		OrgId: opts.orgId,
	}
	resp, _, err := opts.client.FederatedAuthenticationApi.RemoveConnectedOrgConfigWithParams(ctx, params).Execute()
	if err != nil {
		return err
	}

	return opts.Print(resp)
}

func removeConnectedOrgConfigBuilder() *cobra.Command {
	const template = "<<some template>>"

	opts := removeConnectedOrgConfigOpts{}
	cmd := &cobra.Command{
		Use: "removeConnectedOrgConfig",
		Short: "Remove One Org Config Connected to One Federation",
		Annotations: map[string]string{
			"output":      template,
		},
		PreRunE: func(cmd *cobra.Command, args []string) error {
			return opts.PreRunE(
				opts.initClient(),
				opts.InitOutput(cmd.OutOrStdout(), template),
			)
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			return opts.Run(cmd.Context())
		},
	}
	cmd.Flags().StringVar(&opts.federationSettingsId, "federationSettingsId", "", `Unique 24-hexadecimal digit string that identifies your federation.`)
	cmd.Flags().StringVar(&opts.orgId, "orgId", "", `Unique 24-hexadecimal digit string that identifies the connected organization configuration to remove.`)


	_ = cmd.MarkFlagRequired("federationSettingsId")
	_ = cmd.MarkFlagRequired("orgId")
	return cmd
}
type updateConnectedOrgConfigOpts struct {
	cli.GlobalOpts
	cli.OutputOpts
	client *admin.APIClient
	federationSettingsId string
	orgId string
	
}

func (opts *updateConnectedOrgConfigOpts) initClient() func() error {
	return func() error {
		var err error
		opts.client, err = newClientWithAuth()
		return err
	}
}

func (opts *updateConnectedOrgConfigOpts) Run(ctx context.Context) error {
	params := &admin.UpdateConnectedOrgConfigApiParams{
		FederationSettingsId: opts.federationSettingsId,
		OrgId: opts.orgId,
		
	}
	resp, _, err := opts.client.FederatedAuthenticationApi.UpdateConnectedOrgConfigWithParams(ctx, params).Execute()
	if err != nil {
		return err
	}

	return opts.Print(resp)
}

func updateConnectedOrgConfigBuilder() *cobra.Command {
	const template = "<<some template>>"

	opts := updateConnectedOrgConfigOpts{}
	cmd := &cobra.Command{
		Use: "updateConnectedOrgConfig",
		Short: "Update One Org Config Connected to One Federation",
		Annotations: map[string]string{
			"output":      template,
		},
		PreRunE: func(cmd *cobra.Command, args []string) error {
			return opts.PreRunE(
				opts.initClient(),
				opts.InitOutput(cmd.OutOrStdout(), template),
			)
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			return opts.Run(cmd.Context())
		},
	}
	cmd.Flags().StringVar(&opts.federationSettingsId, "federationSettingsId", "", `Unique 24-hexadecimal digit string that identifies your federation.`)
	cmd.Flags().StringVar(&opts.orgId, "orgId", "", `Unique 24-hexadecimal digit string that identifies the connected organization configuration to update.`)
	

	cmd.Flags().SetSliceVar(&opts.dataAccessIdentityProviderIds, "dataAccessIdentityProviderIds", nil, `The collection of unique ids of the identity providers for org&#39;s data access.`)

	cmd.Flags().SetSliceVar(&opts.domainAllowList, "domainAllowList", nil, `Approved domains that restrict users who can join the organization based on their email address.`)

	cmd.Flags().BoolVar(&opts.domainRestrictionEnabled, "domainRestrictionEnabled", false, `Value that indicates whether domain restriction is enabled for this connected org.`)

	cmd.Flags().StringVar(&opts.identityProviderId, "identityProviderId", "", `Unique 20-hexadecimal digit string that identifies the identity provider that this connected org config is associated with.`)

	cmd.Flags().StringVar(&opts.orgId, "orgId", "", `Unique 24-hexadecimal digit string that identifies the connected organization configuration.`)

	cmd.Flags().SetSliceVar(&opts.postAuthRoleGrants, "postAuthRoleGrants", nil, `Atlas roles that are granted to a user in this organization after authenticating.`)

	cmd.Flags().SetSliceVar(&opts.roleMappings, "roleMappings", nil, `Role mappings that are configured in this organization.`)

	cmd.Flags().ArraySliceVar(&opts.userConflicts, "userConflicts", nil, `List that contains the users who have an email address that doesn&#39;t match any domain on the allowed list.`)


	_ = cmd.MarkFlagRequired("federationSettingsId")
	_ = cmd.MarkFlagRequired("orgId")
	return cmd
}
type updateIdentityProviderOpts struct {
	cli.GlobalOpts
	cli.OutputOpts
	client *admin.APIClient
	federationSettingsId string
	identityProviderId string
	
}

func (opts *updateIdentityProviderOpts) initClient() func() error {
	return func() error {
		var err error
		opts.client, err = newClientWithAuth()
		return err
	}
}

func (opts *updateIdentityProviderOpts) Run(ctx context.Context) error {
	params := &admin.UpdateIdentityProviderApiParams{
		FederationSettingsId: opts.federationSettingsId,
		IdentityProviderId: opts.identityProviderId,
		
	}
	resp, _, err := opts.client.FederatedAuthenticationApi.UpdateIdentityProviderWithParams(ctx, params).Execute()
	if err != nil {
		return err
	}

	return opts.Print(resp)
}

func updateIdentityProviderBuilder() *cobra.Command {
	const template = "<<some template>>"

	opts := updateIdentityProviderOpts{}
	cmd := &cobra.Command{
		Use: "updateIdentityProvider",
		Short: "Update the identity provider.",
		Annotations: map[string]string{
			"output":      template,
		},
		PreRunE: func(cmd *cobra.Command, args []string) error {
			return opts.PreRunE(
				opts.initClient(),
				opts.InitOutput(cmd.OutOrStdout(), template),
			)
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			return opts.Run(cmd.Context())
		},
	}
	cmd.Flags().StringVar(&opts.federationSettingsId, "federationSettingsId", "", `Unique 24-hexadecimal digit string that identifies your federation.`)
	cmd.Flags().StringVar(&opts.identityProviderId, "identityProviderId", "", `Unique 20-hexadecimal digit string that identifies the identity provider.`)
	

	cmd.Flags().SetSliceVar(&opts.associatedDomains, "associatedDomains", nil, `List that contains the domains associated with the identity provider.`)

	cmd.Flags().StringVar(&opts.description, "description", "", `The description for the identity provider.`)

	cmd.Flags().StringVar(&opts.displayName, "displayName", "", `Human-readable label that identifies the identity provider.`)

	cmd.Flags().StringVar(&opts.issuerUri, "issuerUri", "", `Unique string that identifies the issuer of the SAML Assertion.`)

	cmd.Flags().PemFileInfoVar(&opts.pemFileInfo, "pemFileInfo", , ``)

	cmd.Flags().StringVar(&opts.protocol, "protocol", "", `The protocol for the identity provider.`)

	cmd.Flags().StringVar(&opts.requestBinding, "requestBinding", "", `SAML Authentication Request Protocol HTTP method binding (POST or REDIRECT) that Federated Authentication uses to send the authentication request.`)

	cmd.Flags().StringVar(&opts.responseSignatureAlgorithm, "responseSignatureAlgorithm", "", `Signature algorithm that Federated Authentication uses to encrypt the identity provider signature.`)

	cmd.Flags().BoolVar(&opts.ssoDebugEnabled, "ssoDebugEnabled", false, `Flag that indicates whether the identity provider has SSO debug enabled.`)

	cmd.Flags().StringVar(&opts.ssoUrl, "ssoUrl", "", `Unique string that identifies the intended audience of the SAML assertion.`)

	cmd.Flags().StringVar(&opts.status, "status", "", `String enum that indicates whether the identity provider is active.`)


	_ = cmd.MarkFlagRequired("federationSettingsId")
	_ = cmd.MarkFlagRequired("identityProviderId")
	return cmd
}
type updateRoleMappingOpts struct {
	cli.GlobalOpts
	cli.OutputOpts
	client *admin.APIClient
	federationSettingsId string
	id string
	orgId string
	
}

func (opts *updateRoleMappingOpts) initClient() func() error {
	return func() error {
		var err error
		opts.client, err = newClientWithAuth()
		return err
	}
}

func (opts *updateRoleMappingOpts) Run(ctx context.Context) error {
	params := &admin.UpdateRoleMappingApiParams{
		FederationSettingsId: opts.federationSettingsId,
		Id: opts.id,
		OrgId: opts.orgId,
		
	}
	resp, _, err := opts.client.FederatedAuthenticationApi.UpdateRoleMappingWithParams(ctx, params).Execute()
	if err != nil {
		return err
	}

	return opts.Print(resp)
}

func updateRoleMappingBuilder() *cobra.Command {
	const template = "<<some template>>"

	opts := updateRoleMappingOpts{}
	cmd := &cobra.Command{
		Use: "updateRoleMapping",
		Short: "Update One Role Mapping in One Organization",
		Annotations: map[string]string{
			"output":      template,
		},
		PreRunE: func(cmd *cobra.Command, args []string) error {
			return opts.PreRunE(
				opts.initClient(),
				opts.InitOutput(cmd.OutOrStdout(), template),
			)
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			return opts.Run(cmd.Context())
		},
	}
	cmd.Flags().StringVar(&opts.federationSettingsId, "federationSettingsId", "", `Unique 24-hexadecimal digit string that identifies your federation.`)
	cmd.Flags().StringVar(&opts.id, "id", "", `Unique 24-hexadecimal digit string that identifies the role mapping that you want to update.`)
	cmd.Flags().StringVar(&opts.orgId, "orgId", "", `Unique 24-hexadecimal digit string that identifies the organization that contains your projects. Use the [/orgs](#tag/Organizations/operation/listOrganizations) endpoint to retrieve all organizations to which the authenticated user has access.`)
	

	cmd.Flags().StringVar(&opts.externalGroupName, "externalGroupName", "", `Unique human-readable label that identifies the identity provider group to whichthis role mapping applies.`)

	cmd.Flags().StringVar(&opts.id, "id", "", `Unique 24-hexadecimal digit string that identifies this role mapping.`)

	cmd.Flags().SetSliceVar(&opts.roleAssignments, "roleAssignments", nil, `Atlas roles and the unique identifiers of the groups and organizations associated with each role.`)


	_ = cmd.MarkFlagRequired("federationSettingsId")
	_ = cmd.MarkFlagRequired("id")
	_ = cmd.MarkFlagRequired("orgId")
	return cmd
}

func federatedAuthenticationBuilder() *cobra.Command {
	cmd := &cobra.Command{
		Use:     "federatedAuthentication",
		Short:   `Returns, adds, edits, and removes federation-related features such as role mappings and connected organization configurations.`,
	}
	cmd.AddCommand(
		createRoleMappingBuilder(),
		deleteFederationAppBuilder(),
		deleteRoleMappingBuilder(),
		getConnectedOrgConfigBuilder(),
		getFederationSettingsBuilder(),
		getIdentityProviderBuilder(),
		getIdentityProviderMetadataBuilder(),
		getRoleMappingBuilder(),
		listConnectedOrgConfigsBuilder(),
		listIdentityProvidersBuilder(),
		listRoleMappingsBuilder(),
		removeConnectedOrgConfigBuilder(),
		updateConnectedOrgConfigBuilder(),
		updateIdentityProviderBuilder(),
		updateRoleMappingBuilder(),
	)
	return cmd
}

