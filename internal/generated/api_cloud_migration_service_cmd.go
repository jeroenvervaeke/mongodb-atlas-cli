// Copyright 2023 MongoDB Inc
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package generated

import (
	"context"
	"os"
	"time"

	"github.com/spf13/cobra"
	"go.mongodb.org/atlas-sdk/v20230201008/admin"
	"github.com/mongodb/mongodb-atlas-cli/internal/cli"
)

type createLinkTokenOpts struct {
	cli.GlobalOpts
	cli.OutputOpts
	client *admin.APIClient
	orgId string
	
}

func (opts *createLinkTokenOpts) initClient() func() error {
	return func() error {
		var err error
		opts.client, err = newClientWithAuth()
		return err
	}
}

func (opts *createLinkTokenOpts) Run(ctx context.Context) error {
	params := &admin.CreateLinkTokenApiParams{
		OrgId: opts.orgId,
		
	}
	resp, _, err := opts.client.CloudMigrationServiceApi.CreateLinkTokenWithParams(ctx, params).Execute()
	if err != nil {
		return err
	}

	return opts.Print(resp)
}

func createLinkTokenBuilder() *cobra.Command {
	const template = "<<some template>>"

	opts := createLinkTokenOpts{}
	cmd := &cobra.Command{
		Use: "createLinkToken",
		Short: "Create One Link-Token",
		Annotations: map[string]string{
			"output":      template,
		},
		PreRunE: func(cmd *cobra.Command, args []string) error {
			return opts.PreRunE(
				opts.initClient(),
				opts.InitOutput(cmd.OutOrStdout(), template),
			)
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			return opts.Run(cmd.Context())
		},
	}
	cmd.Flags().StringVar(&opts.orgId, "orgId", "", `Unique 24-hexadecimal digit string that identifies the organization that contains your projects. Use the [/orgs](#tag/Organizations/operation/listOrganizations) endpoint to retrieve all organizations to which the authenticated user has access.`)
	

	cmd.Flags().ArraySliceVar(&opts.accessListIps, "accessListIps", nil, `IP address access list entries associated with the API key.`)


	_ = cmd.MarkFlagRequired("orgId")
	return cmd
}
type createPushMigrationOpts struct {
	cli.GlobalOpts
	cli.OutputOpts
	client *admin.APIClient
	groupId string
	
}

func (opts *createPushMigrationOpts) initClient() func() error {
	return func() error {
		var err error
		opts.client, err = newClientWithAuth()
		return err
	}
}

func (opts *createPushMigrationOpts) Run(ctx context.Context) error {
	params := &admin.CreatePushMigrationApiParams{
		GroupId: opts.groupId,
		
	}
	resp, _, err := opts.client.CloudMigrationServiceApi.CreatePushMigrationWithParams(ctx, params).Execute()
	if err != nil {
		return err
	}

	return opts.Print(resp)
}

func createPushMigrationBuilder() *cobra.Command {
	const template = "<<some template>>"

	opts := createPushMigrationOpts{}
	cmd := &cobra.Command{
		Use: "createPushMigration",
		Short: "Migrate One Local Managed Cluster to MongoDB Atlas",
		Annotations: map[string]string{
			"output":      template,
		},
		PreRunE: func(cmd *cobra.Command, args []string) error {
			return opts.PreRunE(
				opts.initClient(),
				opts.InitOutput(cmd.OutOrStdout(), template),
			)
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			return opts.Run(cmd.Context())
		},
	}
	cmd.Flags().StringVar(&opts.groupId, "groupId", "", `Unique 24-hexadecimal digit string that identifies your project. Use the [/groups](#tag/Projects/operation/listProjects) endpoint to retrieve all projects to which the authenticated user has access.

**NOTE**: Groups and projects are synonymous terms. Your group id is the same as your project id. For existing groups, your group/project id remains the same. The resource and corresponding endpoints use the term groups.`)
	

	cmd.Flags().StringVar(&opts._id, "_id", "", `Unique 24-hexadecimal digit string that identifies the migration request.`)

	cmd.Flags().DestinationVar(&opts.destination, "destination", , ``)

	cmd.Flags().BoolVar(&opts.dropEnabled, "dropEnabled", false, `Flag that indicates whether the migration process drops all collections from the destination cluster before the migration starts.`)

	cmd.Flags().ArraySliceVar(&opts.migrationHosts, "migrationHosts", nil, `List of migration hosts used for this migration.`)

	cmd.Flags().SourceVar(&opts.source, "source", , ``)


	_ = cmd.MarkFlagRequired("groupId")
	return cmd
}
type cutoverMigrationOpts struct {
	cli.GlobalOpts
	cli.OutputOpts
	client *admin.APIClient
	groupId string
	liveMigrationId string
}

func (opts *cutoverMigrationOpts) initClient() func() error {
	return func() error {
		var err error
		opts.client, err = newClientWithAuth()
		return err
	}
}

func (opts *cutoverMigrationOpts) Run(ctx context.Context) error {
	params := &admin.CutoverMigrationApiParams{
		GroupId: opts.groupId,
		LiveMigrationId: opts.liveMigrationId,
	}
	_, err := opts.client.CloudMigrationServiceApi.CutoverMigrationWithParams(ctx, params).Execute()
	if err != nil {
		return err
	}

	return opts.Print(nil)
}

func cutoverMigrationBuilder() *cobra.Command {
	const template = "<<some template>>"

	opts := cutoverMigrationOpts{}
	cmd := &cobra.Command{
		Use: "cutoverMigration",
		Short: "Cut Over the Migrated Cluster",
		Annotations: map[string]string{
			"output":      template,
		},
		PreRunE: func(cmd *cobra.Command, args []string) error {
			return opts.PreRunE(
				opts.initClient(),
				opts.InitOutput(cmd.OutOrStdout(), template),
			)
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			return opts.Run(cmd.Context())
		},
	}
	cmd.Flags().StringVar(&opts.groupId, "groupId", "", `Unique 24-hexadecimal digit string that identifies your project. Use the [/groups](#tag/Projects/operation/listProjects) endpoint to retrieve all projects to which the authenticated user has access.

**NOTE**: Groups and projects are synonymous terms. Your group id is the same as your project id. For existing groups, your group/project id remains the same. The resource and corresponding endpoints use the term groups.`)
	cmd.Flags().StringVar(&opts.liveMigrationId, "liveMigrationId", "", `Unique 24-hexadecimal digit string that identifies the migration.`)


	_ = cmd.MarkFlagRequired("groupId")
	_ = cmd.MarkFlagRequired("liveMigrationId")
	return cmd
}
type deleteLinkTokenOpts struct {
	cli.GlobalOpts
	cli.OutputOpts
	client *admin.APIClient
	orgId string
}

func (opts *deleteLinkTokenOpts) initClient() func() error {
	return func() error {
		var err error
		opts.client, err = newClientWithAuth()
		return err
	}
}

func (opts *deleteLinkTokenOpts) Run(ctx context.Context) error {
	params := &admin.DeleteLinkTokenApiParams{
		OrgId: opts.orgId,
	}
	resp, _, err := opts.client.CloudMigrationServiceApi.DeleteLinkTokenWithParams(ctx, params).Execute()
	if err != nil {
		return err
	}

	return opts.Print(resp)
}

func deleteLinkTokenBuilder() *cobra.Command {
	const template = "<<some template>>"

	opts := deleteLinkTokenOpts{}
	cmd := &cobra.Command{
		Use: "deleteLinkToken",
		Short: "Remove One Link-Token",
		Annotations: map[string]string{
			"output":      template,
		},
		PreRunE: func(cmd *cobra.Command, args []string) error {
			return opts.PreRunE(
				opts.initClient(),
				opts.InitOutput(cmd.OutOrStdout(), template),
			)
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			return opts.Run(cmd.Context())
		},
	}
	cmd.Flags().StringVar(&opts.orgId, "orgId", "", `Unique 24-hexadecimal digit string that identifies the organization that contains your projects. Use the [/orgs](#tag/Organizations/operation/listOrganizations) endpoint to retrieve all organizations to which the authenticated user has access.`)


	_ = cmd.MarkFlagRequired("orgId")
	return cmd
}
type getPushMigrationOpts struct {
	cli.GlobalOpts
	cli.OutputOpts
	client *admin.APIClient
	groupId string
	liveMigrationId string
}

func (opts *getPushMigrationOpts) initClient() func() error {
	return func() error {
		var err error
		opts.client, err = newClientWithAuth()
		return err
	}
}

func (opts *getPushMigrationOpts) Run(ctx context.Context) error {
	params := &admin.GetPushMigrationApiParams{
		GroupId: opts.groupId,
		LiveMigrationId: opts.liveMigrationId,
	}
	resp, _, err := opts.client.CloudMigrationServiceApi.GetPushMigrationWithParams(ctx, params).Execute()
	if err != nil {
		return err
	}

	return opts.Print(resp)
}

func getPushMigrationBuilder() *cobra.Command {
	const template = "<<some template>>"

	opts := getPushMigrationOpts{}
	cmd := &cobra.Command{
		Use: "getPushMigration",
		Short: "Return One Migration Job",
		Annotations: map[string]string{
			"output":      template,
		},
		PreRunE: func(cmd *cobra.Command, args []string) error {
			return opts.PreRunE(
				opts.initClient(),
				opts.InitOutput(cmd.OutOrStdout(), template),
			)
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			return opts.Run(cmd.Context())
		},
	}
	cmd.Flags().StringVar(&opts.groupId, "groupId", "", `Unique 24-hexadecimal digit string that identifies your project. Use the [/groups](#tag/Projects/operation/listProjects) endpoint to retrieve all projects to which the authenticated user has access.

**NOTE**: Groups and projects are synonymous terms. Your group id is the same as your project id. For existing groups, your group/project id remains the same. The resource and corresponding endpoints use the term groups.`)
	cmd.Flags().StringVar(&opts.liveMigrationId, "liveMigrationId", "", `Unique 24-hexadecimal digit string that identifies the migration.`)


	_ = cmd.MarkFlagRequired("groupId")
	_ = cmd.MarkFlagRequired("liveMigrationId")
	return cmd
}
type getValidationStatusOpts struct {
	cli.GlobalOpts
	cli.OutputOpts
	client *admin.APIClient
	groupId string
	validationId string
}

func (opts *getValidationStatusOpts) initClient() func() error {
	return func() error {
		var err error
		opts.client, err = newClientWithAuth()
		return err
	}
}

func (opts *getValidationStatusOpts) Run(ctx context.Context) error {
	params := &admin.GetValidationStatusApiParams{
		GroupId: opts.groupId,
		ValidationId: opts.validationId,
	}
	resp, _, err := opts.client.CloudMigrationServiceApi.GetValidationStatusWithParams(ctx, params).Execute()
	if err != nil {
		return err
	}

	return opts.Print(resp)
}

func getValidationStatusBuilder() *cobra.Command {
	const template = "<<some template>>"

	opts := getValidationStatusOpts{}
	cmd := &cobra.Command{
		Use: "getValidationStatus",
		Short: "Return One Migration Validation Job",
		Annotations: map[string]string{
			"output":      template,
		},
		PreRunE: func(cmd *cobra.Command, args []string) error {
			return opts.PreRunE(
				opts.initClient(),
				opts.InitOutput(cmd.OutOrStdout(), template),
			)
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			return opts.Run(cmd.Context())
		},
	}
	cmd.Flags().StringVar(&opts.groupId, "groupId", "", `Unique 24-hexadecimal digit string that identifies your project. Use the [/groups](#tag/Projects/operation/listProjects) endpoint to retrieve all projects to which the authenticated user has access.

**NOTE**: Groups and projects are synonymous terms. Your group id is the same as your project id. For existing groups, your group/project id remains the same. The resource and corresponding endpoints use the term groups.`)
	cmd.Flags().StringVar(&opts.validationId, "validationId", "", `Unique 24-hexadecimal digit string that identifies the validation job.`)


	_ = cmd.MarkFlagRequired("groupId")
	_ = cmd.MarkFlagRequired("validationId")
	return cmd
}
type listSourceProjectsOpts struct {
	cli.GlobalOpts
	cli.OutputOpts
	client *admin.APIClient
	orgId string
}

func (opts *listSourceProjectsOpts) initClient() func() error {
	return func() error {
		var err error
		opts.client, err = newClientWithAuth()
		return err
	}
}

func (opts *listSourceProjectsOpts) Run(ctx context.Context) error {
	params := &admin.ListSourceProjectsApiParams{
		OrgId: opts.orgId,
	}
	resp, _, err := opts.client.CloudMigrationServiceApi.ListSourceProjectsWithParams(ctx, params).Execute()
	if err != nil {
		return err
	}

	return opts.Print(resp)
}

func listSourceProjectsBuilder() *cobra.Command {
	const template = "<<some template>>"

	opts := listSourceProjectsOpts{}
	cmd := &cobra.Command{
		Use: "listSourceProjects",
		Short: "Return All Projects Available for Migration",
		Annotations: map[string]string{
			"output":      template,
		},
		PreRunE: func(cmd *cobra.Command, args []string) error {
			return opts.PreRunE(
				opts.initClient(),
				opts.InitOutput(cmd.OutOrStdout(), template),
			)
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			return opts.Run(cmd.Context())
		},
	}
	cmd.Flags().StringVar(&opts.orgId, "orgId", "", `Unique 24-hexadecimal digit string that identifies the organization that contains your projects. Use the [/orgs](#tag/Organizations/operation/listOrganizations) endpoint to retrieve all organizations to which the authenticated user has access.`)


	_ = cmd.MarkFlagRequired("orgId")
	return cmd
}
type validateMigrationOpts struct {
	cli.GlobalOpts
	cli.OutputOpts
	client *admin.APIClient
	groupId string
	
}

func (opts *validateMigrationOpts) initClient() func() error {
	return func() error {
		var err error
		opts.client, err = newClientWithAuth()
		return err
	}
}

func (opts *validateMigrationOpts) Run(ctx context.Context) error {
	params := &admin.ValidateMigrationApiParams{
		GroupId: opts.groupId,
		
	}
	resp, _, err := opts.client.CloudMigrationServiceApi.ValidateMigrationWithParams(ctx, params).Execute()
	if err != nil {
		return err
	}

	return opts.Print(resp)
}

func validateMigrationBuilder() *cobra.Command {
	const template = "<<some template>>"

	opts := validateMigrationOpts{}
	cmd := &cobra.Command{
		Use: "validateMigration",
		Short: "Validate One Migration Request",
		Annotations: map[string]string{
			"output":      template,
		},
		PreRunE: func(cmd *cobra.Command, args []string) error {
			return opts.PreRunE(
				opts.initClient(),
				opts.InitOutput(cmd.OutOrStdout(), template),
			)
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			return opts.Run(cmd.Context())
		},
	}
	cmd.Flags().StringVar(&opts.groupId, "groupId", "", `Unique 24-hexadecimal digit string that identifies your project. Use the [/groups](#tag/Projects/operation/listProjects) endpoint to retrieve all projects to which the authenticated user has access.

**NOTE**: Groups and projects are synonymous terms. Your group id is the same as your project id. For existing groups, your group/project id remains the same. The resource and corresponding endpoints use the term groups.`)
	

	cmd.Flags().StringVar(&opts._id, "_id", "", `Unique 24-hexadecimal digit string that identifies the migration request.`)

	cmd.Flags().DestinationVar(&opts.destination, "destination", , ``)

	cmd.Flags().BoolVar(&opts.dropEnabled, "dropEnabled", false, `Flag that indicates whether the migration process drops all collections from the destination cluster before the migration starts.`)

	cmd.Flags().ArraySliceVar(&opts.migrationHosts, "migrationHosts", nil, `List of migration hosts used for this migration.`)

	cmd.Flags().SourceVar(&opts.source, "source", , ``)


	_ = cmd.MarkFlagRequired("groupId")
	return cmd
}

func cloudMigrationServiceBuilder() *cobra.Command {
	cmd := &cobra.Command{
		Use:     "cloudMigrationService",
		Short:   `Manages the Cloud Migration Service. Source organizations, projects, and MongoDB clusters reside on Cloud Manager or Ops Manager. Destination organizations, projects, and MongoDB clusters reside on MongoDB Cloud. Source databases can&#39;t use any authentication except SCRAM-SHA.`,
	}
	cmd.AddCommand(
		createLinkTokenBuilder(),
		createPushMigrationBuilder(),
		cutoverMigrationBuilder(),
		deleteLinkTokenBuilder(),
		getPushMigrationBuilder(),
		getValidationStatusBuilder(),
		listSourceProjectsBuilder(),
		validateMigrationBuilder(),
	)
	return cmd
}

