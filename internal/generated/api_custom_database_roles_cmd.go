// Copyright 2023 MongoDB Inc
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package generated

import (
	"context"

	"github.com/mongodb/mongodb-atlas-cli/internal/cli"
	"github.com/spf13/cobra"
	"go.mongodb.org/atlas-sdk/v20230201008/admin"
)

type createCustomDatabaseRoleOpts struct {
	cli.GlobalOpts
	cli.OutputOpts
	client  *admin.APIClient
	groupId string
}

func (opts *createCustomDatabaseRoleOpts) initClient() func() error {
	return func() error {
		var err error
		opts.client, err = newClientWithAuth()
		return err
	}
}

func (opts *createCustomDatabaseRoleOpts) Run(ctx context.Context) error {
	params := &admin.CreateCustomDatabaseRoleApiParams{
		GroupId: opts.groupId,
	}
	resp, _, err := opts.client.CustomDatabaseRolesApi.CreateCustomDatabaseRoleWithParams(ctx, params).Execute()
	if err != nil {
		return err
	}

	return opts.Print(resp)
}

func createCustomDatabaseRoleBuilder() *cobra.Command {
	const template = "<<some template>>"

	opts := createCustomDatabaseRoleOpts{}
	cmd := &cobra.Command{
		Use:   "createCustomDatabaseRole",
		Short: "Create One Custom Role",
		Annotations: map[string]string{
			"output": template,
		},
		PreRunE: func(cmd *cobra.Command, args []string) error {
			return opts.PreRunE(
				opts.initClient(),
				opts.InitOutput(cmd.OutOrStdout(), template),
			)
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			return opts.Run(cmd.Context())
		},
	}
	cmd.Flags().StringVar(&opts.groupId, "groupId", "", `Unique 24-hexadecimal digit string that identifies your project. Use the [/groups](#tag/Projects/operation/listProjects) endpoint to retrieve all projects to which the authenticated user has access.

**NOTE**: Groups and projects are synonymous terms. Your group id is the same as your project id. For existing groups, your group/project id remains the same. The resource and corresponding endpoints use the term groups.`)

	cmd.Flags().ArraySliceVar(&opts.actions, "actions", nil, `List of the individual privilege actions that the role grants.`)

	cmd.Flags().SetSliceVar(&opts.inheritedRoles, "inheritedRoles", nil, `List of the built-in roles that this custom role inherits.`)

	cmd.Flags().StringVar(&opts.roleName, "roleName", "", `Human-readable label that identifies the role for the request. This name must be unique for this custom role in this project.`)

	_ = cmd.MarkFlagRequired("groupId")
	return cmd
}

type deleteCustomDatabaseRoleOpts struct {
	cli.GlobalOpts
	cli.OutputOpts
	client   *admin.APIClient
	groupId  string
	roleName string
}

func (opts *deleteCustomDatabaseRoleOpts) initClient() func() error {
	return func() error {
		var err error
		opts.client, err = newClientWithAuth()
		return err
	}
}

func (opts *deleteCustomDatabaseRoleOpts) Run(ctx context.Context) error {
	params := &admin.DeleteCustomDatabaseRoleApiParams{
		GroupId:  opts.groupId,
		RoleName: opts.roleName,
	}
	_, err := opts.client.CustomDatabaseRolesApi.DeleteCustomDatabaseRoleWithParams(ctx, params).Execute()
	if err != nil {
		return err
	}

	return opts.Print(nil)
}

func deleteCustomDatabaseRoleBuilder() *cobra.Command {
	const template = "<<some template>>"

	opts := deleteCustomDatabaseRoleOpts{}
	cmd := &cobra.Command{
		Use:   "deleteCustomDatabaseRole",
		Short: "Remove One Custom Role from One Project",
		Annotations: map[string]string{
			"output": template,
		},
		PreRunE: func(cmd *cobra.Command, args []string) error {
			return opts.PreRunE(
				opts.initClient(),
				opts.InitOutput(cmd.OutOrStdout(), template),
			)
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			return opts.Run(cmd.Context())
		},
	}
	cmd.Flags().StringVar(&opts.groupId, "groupId", "", `Unique 24-hexadecimal digit string that identifies your project. Use the [/groups](#tag/Projects/operation/listProjects) endpoint to retrieve all projects to which the authenticated user has access.

**NOTE**: Groups and projects are synonymous terms. Your group id is the same as your project id. For existing groups, your group/project id remains the same. The resource and corresponding endpoints use the term groups.`)
	cmd.Flags().StringVar(&opts.roleName, "roleName", "", `Human-readable label that identifies the role for the request. This name must be unique for this custom role in this project.`)

	_ = cmd.MarkFlagRequired("groupId")
	_ = cmd.MarkFlagRequired("roleName")
	return cmd
}

type getCustomDatabaseRoleOpts struct {
	cli.GlobalOpts
	cli.OutputOpts
	client   *admin.APIClient
	groupId  string
	roleName string
}

func (opts *getCustomDatabaseRoleOpts) initClient() func() error {
	return func() error {
		var err error
		opts.client, err = newClientWithAuth()
		return err
	}
}

func (opts *getCustomDatabaseRoleOpts) Run(ctx context.Context) error {
	params := &admin.GetCustomDatabaseRoleApiParams{
		GroupId:  opts.groupId,
		RoleName: opts.roleName,
	}
	resp, _, err := opts.client.CustomDatabaseRolesApi.GetCustomDatabaseRoleWithParams(ctx, params).Execute()
	if err != nil {
		return err
	}

	return opts.Print(resp)
}

func getCustomDatabaseRoleBuilder() *cobra.Command {
	const template = "<<some template>>"

	opts := getCustomDatabaseRoleOpts{}
	cmd := &cobra.Command{
		Use:   "getCustomDatabaseRole",
		Short: "Return One Custom Role in One Project",
		Annotations: map[string]string{
			"output": template,
		},
		PreRunE: func(cmd *cobra.Command, args []string) error {
			return opts.PreRunE(
				opts.initClient(),
				opts.InitOutput(cmd.OutOrStdout(), template),
			)
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			return opts.Run(cmd.Context())
		},
	}
	cmd.Flags().StringVar(&opts.groupId, "groupId", "", `Unique 24-hexadecimal digit string that identifies your project. Use the [/groups](#tag/Projects/operation/listProjects) endpoint to retrieve all projects to which the authenticated user has access.

**NOTE**: Groups and projects are synonymous terms. Your group id is the same as your project id. For existing groups, your group/project id remains the same. The resource and corresponding endpoints use the term groups.`)
	cmd.Flags().StringVar(&opts.roleName, "roleName", "", `Human-readable label that identifies the role for the request. This name must be unique for this custom role in this project.`)

	_ = cmd.MarkFlagRequired("groupId")
	_ = cmd.MarkFlagRequired("roleName")
	return cmd
}

type listCustomDatabaseRolesOpts struct {
	cli.GlobalOpts
	cli.OutputOpts
	client  *admin.APIClient
	groupId string
}

func (opts *listCustomDatabaseRolesOpts) initClient() func() error {
	return func() error {
		var err error
		opts.client, err = newClientWithAuth()
		return err
	}
}

func (opts *listCustomDatabaseRolesOpts) Run(ctx context.Context) error {
	params := &admin.ListCustomDatabaseRolesApiParams{
		GroupId: opts.groupId,
	}
	resp, _, err := opts.client.CustomDatabaseRolesApi.ListCustomDatabaseRolesWithParams(ctx, params).Execute()
	if err != nil {
		return err
	}

	return opts.Print(resp)
}

func listCustomDatabaseRolesBuilder() *cobra.Command {
	const template = "<<some template>>"

	opts := listCustomDatabaseRolesOpts{}
	cmd := &cobra.Command{
		Use:   "listCustomDatabaseRoles",
		Short: "Return All Custom Roles in One Project",
		Annotations: map[string]string{
			"output": template,
		},
		PreRunE: func(cmd *cobra.Command, args []string) error {
			return opts.PreRunE(
				opts.initClient(),
				opts.InitOutput(cmd.OutOrStdout(), template),
			)
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			return opts.Run(cmd.Context())
		},
	}
	cmd.Flags().StringVar(&opts.groupId, "groupId", "", `Unique 24-hexadecimal digit string that identifies your project. Use the [/groups](#tag/Projects/operation/listProjects) endpoint to retrieve all projects to which the authenticated user has access.

**NOTE**: Groups and projects are synonymous terms. Your group id is the same as your project id. For existing groups, your group/project id remains the same. The resource and corresponding endpoints use the term groups.`)

	_ = cmd.MarkFlagRequired("groupId")
	return cmd
}

type updateCustomDatabaseRoleOpts struct {
	cli.GlobalOpts
	cli.OutputOpts
	client   *admin.APIClient
	groupId  string
	roleName string
}

func (opts *updateCustomDatabaseRoleOpts) initClient() func() error {
	return func() error {
		var err error
		opts.client, err = newClientWithAuth()
		return err
	}
}

func (opts *updateCustomDatabaseRoleOpts) Run(ctx context.Context) error {
	params := &admin.UpdateCustomDatabaseRoleApiParams{
		GroupId:  opts.groupId,
		RoleName: opts.roleName,
	}
	resp, _, err := opts.client.CustomDatabaseRolesApi.UpdateCustomDatabaseRoleWithParams(ctx, params).Execute()
	if err != nil {
		return err
	}

	return opts.Print(resp)
}

func updateCustomDatabaseRoleBuilder() *cobra.Command {
	const template = "<<some template>>"

	opts := updateCustomDatabaseRoleOpts{}
	cmd := &cobra.Command{
		Use:   "updateCustomDatabaseRole",
		Short: "Update One Custom Role in One Project",
		Annotations: map[string]string{
			"output": template,
		},
		PreRunE: func(cmd *cobra.Command, args []string) error {
			return opts.PreRunE(
				opts.initClient(),
				opts.InitOutput(cmd.OutOrStdout(), template),
			)
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			return opts.Run(cmd.Context())
		},
	}
	cmd.Flags().StringVar(&opts.groupId, "groupId", "", `Unique 24-hexadecimal digit string that identifies your project. Use the [/groups](#tag/Projects/operation/listProjects) endpoint to retrieve all projects to which the authenticated user has access.

**NOTE**: Groups and projects are synonymous terms. Your group id is the same as your project id. For existing groups, your group/project id remains the same. The resource and corresponding endpoints use the term groups.`)
	cmd.Flags().StringVar(&opts.roleName, "roleName", "", `Human-readable label that identifies the role for the request. This name must beunique for this custom role in this project.`)

	cmd.Flags().ArraySliceVar(&opts.actions, "actions", nil, `List of the individual privilege actions that the role grants.`)

	cmd.Flags().SetSliceVar(&opts.inheritedRoles, "inheritedRoles", nil, `List of the built-in roles that this custom role inherits.`)

	_ = cmd.MarkFlagRequired("groupId")
	_ = cmd.MarkFlagRequired("roleName")
	return cmd
}

func customDatabaseRolesBuilder() *cobra.Command {
	cmd := &cobra.Command{
		Use:   "customDatabaseRoles",
		Short: `Returns, adds, edits, and removes custom database user privilege roles. Use custom roles to specify custom sets of actions that the MongoDB Cloud built-in roles can&#39;t describe. You define custom roles at the project level, for all clusters in the project. This resource supports a subset of MongoDB privilege actions. You can create a subset of custom role actions. To create a wider list of custom role actions, use the MongoDB Cloud user interface. Custom roles must include actions that all project&#39;s clusters support, and that are compatible with each MongoDB version that your project&#39;s clusters use. For example, if your project has MongoDB 4.2 clusters, you can&#39;t create custom roles that use actions introduced in MongoDB 4.4.`,
	}
	cmd.AddCommand(
		createCustomDatabaseRoleBuilder(),
		deleteCustomDatabaseRoleBuilder(),
		getCustomDatabaseRoleBuilder(),
		listCustomDatabaseRolesBuilder(),
		updateCustomDatabaseRoleBuilder(),
	)
	return cmd
}
