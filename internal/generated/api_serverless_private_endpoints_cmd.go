// Copyright 2023 MongoDB Inc
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package generated

import (
	"context"

	"github.com/mongodb/mongodb-atlas-cli/internal/cli"
	"github.com/spf13/cobra"
	"go.mongodb.org/atlas-sdk/v20230201008/admin"
)

type createServerlessPrivateEndpointOpts struct {
	cli.GlobalOpts
	cli.OutputOpts
	client       *admin.APIClient
	groupId      string
	instanceName string
}

func (opts *createServerlessPrivateEndpointOpts) initClient() func() error {
	return func() error {
		var err error
		opts.client, err = newClientWithAuth()
		return err
	}
}

func (opts *createServerlessPrivateEndpointOpts) Run(ctx context.Context) error {
	params := &admin.CreateServerlessPrivateEndpointApiParams{
		GroupId:      opts.groupId,
		InstanceName: opts.instanceName,
	}
	resp, _, err := opts.client.ServerlessPrivateEndpointsApi.CreateServerlessPrivateEndpointWithParams(ctx, params).Execute()
	if err != nil {
		return err
	}

	return opts.Print(resp)
}

func createServerlessPrivateEndpointBuilder() *cobra.Command {
	const template = "<<some template>>"

	opts := createServerlessPrivateEndpointOpts{}
	cmd := &cobra.Command{
		Use:   "createServerlessPrivateEndpoint",
		Short: "Create One Private Endpoint for One Serverless Instance",
		Annotations: map[string]string{
			"output": template,
		},
		PreRunE: func(cmd *cobra.Command, args []string) error {
			return opts.PreRunE(
				opts.initClient(),
				opts.InitOutput(cmd.OutOrStdout(), template),
			)
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			return opts.Run(cmd.Context())
		},
	}
	cmd.Flags().StringVar(&opts.groupId, "groupId", "", `Unique 24-hexadecimal digit string that identifies your project. Use the [/groups](#tag/Projects/operation/listProjects) endpoint to retrieve all projects to which the authenticated user has access.

**NOTE**: Groups and projects are synonymous terms. Your group id is the same as your project id. For existing groups, your group/project id remains the same. The resource and corresponding endpoints use the term groups.`)
	cmd.Flags().StringVar(&opts.instanceName, "instanceName", "", `Human-readable label that identifies the serverless instance for which the tenant endpoint will be created.`)

	cmd.Flags().StringVar(&opts.comment, "comment", "", `Human-readable comment associated with the private endpoint.`)

	_ = cmd.MarkFlagRequired("groupId")
	_ = cmd.MarkFlagRequired("instanceName")
	return cmd
}

type deleteServerlessPrivateEndpointOpts struct {
	cli.GlobalOpts
	cli.OutputOpts
	client       *admin.APIClient
	groupId      string
	instanceName string
	endpointId   string
}

func (opts *deleteServerlessPrivateEndpointOpts) initClient() func() error {
	return func() error {
		var err error
		opts.client, err = newClientWithAuth()
		return err
	}
}

func (opts *deleteServerlessPrivateEndpointOpts) Run(ctx context.Context) error {
	params := &admin.DeleteServerlessPrivateEndpointApiParams{
		GroupId:      opts.groupId,
		InstanceName: opts.instanceName,
		EndpointId:   opts.endpointId,
	}
	resp, _, err := opts.client.ServerlessPrivateEndpointsApi.DeleteServerlessPrivateEndpointWithParams(ctx, params).Execute()
	if err != nil {
		return err
	}

	return opts.Print(resp)
}

func deleteServerlessPrivateEndpointBuilder() *cobra.Command {
	const template = "<<some template>>"

	opts := deleteServerlessPrivateEndpointOpts{}
	cmd := &cobra.Command{
		Use:   "deleteServerlessPrivateEndpoint",
		Short: "Remove One Private Endpoint for One Serverless Instance",
		Annotations: map[string]string{
			"output": template,
		},
		PreRunE: func(cmd *cobra.Command, args []string) error {
			return opts.PreRunE(
				opts.initClient(),
				opts.InitOutput(cmd.OutOrStdout(), template),
			)
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			return opts.Run(cmd.Context())
		},
	}
	cmd.Flags().StringVar(&opts.groupId, "groupId", "", `Unique 24-hexadecimal digit string that identifies your project. Use the [/groups](#tag/Projects/operation/listProjects) endpoint to retrieve all projects to which the authenticated user has access.

**NOTE**: Groups and projects are synonymous terms. Your group id is the same as your project id. For existing groups, your group/project id remains the same. The resource and corresponding endpoints use the term groups.`)
	cmd.Flags().StringVar(&opts.instanceName, "instanceName", "", `Human-readable label that identifies the serverless instance from which the tenant endpoint will be removed.`)
	cmd.Flags().StringVar(&opts.endpointId, "endpointId", "", `Unique 24-hexadecimal digit string that identifies the tenant endpoint which will be removed.`)

	_ = cmd.MarkFlagRequired("groupId")
	_ = cmd.MarkFlagRequired("instanceName")
	_ = cmd.MarkFlagRequired("endpointId")
	return cmd
}

type getServerlessPrivateEndpointOpts struct {
	cli.GlobalOpts
	cli.OutputOpts
	client       *admin.APIClient
	groupId      string
	instanceName string
	endpointId   string
}

func (opts *getServerlessPrivateEndpointOpts) initClient() func() error {
	return func() error {
		var err error
		opts.client, err = newClientWithAuth()
		return err
	}
}

func (opts *getServerlessPrivateEndpointOpts) Run(ctx context.Context) error {
	params := &admin.GetServerlessPrivateEndpointApiParams{
		GroupId:      opts.groupId,
		InstanceName: opts.instanceName,
		EndpointId:   opts.endpointId,
	}
	resp, _, err := opts.client.ServerlessPrivateEndpointsApi.GetServerlessPrivateEndpointWithParams(ctx, params).Execute()
	if err != nil {
		return err
	}

	return opts.Print(resp)
}

func getServerlessPrivateEndpointBuilder() *cobra.Command {
	const template = "<<some template>>"

	opts := getServerlessPrivateEndpointOpts{}
	cmd := &cobra.Command{
		Use:   "getServerlessPrivateEndpoint",
		Short: "Return One Private Endpoint for One Serverless Instance",
		Annotations: map[string]string{
			"output": template,
		},
		PreRunE: func(cmd *cobra.Command, args []string) error {
			return opts.PreRunE(
				opts.initClient(),
				opts.InitOutput(cmd.OutOrStdout(), template),
			)
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			return opts.Run(cmd.Context())
		},
	}
	cmd.Flags().StringVar(&opts.groupId, "groupId", "", `Unique 24-hexadecimal digit string that identifies your project. Use the [/groups](#tag/Projects/operation/listProjects) endpoint to retrieve all projects to which the authenticated user has access.

**NOTE**: Groups and projects are synonymous terms. Your group id is the same as your project id. For existing groups, your group/project id remains the same. The resource and corresponding endpoints use the term groups.`)
	cmd.Flags().StringVar(&opts.instanceName, "instanceName", "", `Human-readable label that identifies the serverless instance associated with the tenant endpoint.`)
	cmd.Flags().StringVar(&opts.endpointId, "endpointId", "", `Unique 24-hexadecimal digit string that identifies the tenant endpoint.`)

	_ = cmd.MarkFlagRequired("groupId")
	_ = cmd.MarkFlagRequired("instanceName")
	_ = cmd.MarkFlagRequired("endpointId")
	return cmd
}

type listServerlessPrivateEndpointsOpts struct {
	cli.GlobalOpts
	cli.OutputOpts
	client       *admin.APIClient
	groupId      string
	instanceName string
}

func (opts *listServerlessPrivateEndpointsOpts) initClient() func() error {
	return func() error {
		var err error
		opts.client, err = newClientWithAuth()
		return err
	}
}

func (opts *listServerlessPrivateEndpointsOpts) Run(ctx context.Context) error {
	params := &admin.ListServerlessPrivateEndpointsApiParams{
		GroupId:      opts.groupId,
		InstanceName: opts.instanceName,
	}
	resp, _, err := opts.client.ServerlessPrivateEndpointsApi.ListServerlessPrivateEndpointsWithParams(ctx, params).Execute()
	if err != nil {
		return err
	}

	return opts.Print(resp)
}

func listServerlessPrivateEndpointsBuilder() *cobra.Command {
	const template = "<<some template>>"

	opts := listServerlessPrivateEndpointsOpts{}
	cmd := &cobra.Command{
		Use:   "listServerlessPrivateEndpoints",
		Short: "Return All Private Endpoints for One Serverless Instance",
		Annotations: map[string]string{
			"output": template,
		},
		PreRunE: func(cmd *cobra.Command, args []string) error {
			return opts.PreRunE(
				opts.initClient(),
				opts.InitOutput(cmd.OutOrStdout(), template),
			)
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			return opts.Run(cmd.Context())
		},
	}
	cmd.Flags().StringVar(&opts.groupId, "groupId", "", `Unique 24-hexadecimal digit string that identifies your project. Use the [/groups](#tag/Projects/operation/listProjects) endpoint to retrieve all projects to which the authenticated user has access.

**NOTE**: Groups and projects are synonymous terms. Your group id is the same as your project id. For existing groups, your group/project id remains the same. The resource and corresponding endpoints use the term groups.`)
	cmd.Flags().StringVar(&opts.instanceName, "instanceName", "", `Human-readable label that identifies the serverless instance associated with the tenant endpoint.`)

	_ = cmd.MarkFlagRequired("groupId")
	_ = cmd.MarkFlagRequired("instanceName")
	return cmd
}

type updateServerlessPrivateEndpointOpts struct {
	cli.GlobalOpts
	cli.OutputOpts
	client       *admin.APIClient
	groupId      string
	instanceName string
	endpointId   string
}

func (opts *updateServerlessPrivateEndpointOpts) initClient() func() error {
	return func() error {
		var err error
		opts.client, err = newClientWithAuth()
		return err
	}
}

func (opts *updateServerlessPrivateEndpointOpts) Run(ctx context.Context) error {
	params := &admin.UpdateServerlessPrivateEndpointApiParams{
		GroupId:      opts.groupId,
		InstanceName: opts.instanceName,
		EndpointId:   opts.endpointId,
	}
	resp, _, err := opts.client.ServerlessPrivateEndpointsApi.UpdateServerlessPrivateEndpointWithParams(ctx, params).Execute()
	if err != nil {
		return err
	}

	return opts.Print(resp)
}

func updateServerlessPrivateEndpointBuilder() *cobra.Command {
	const template = "<<some template>>"

	opts := updateServerlessPrivateEndpointOpts{}
	cmd := &cobra.Command{
		Use:   "updateServerlessPrivateEndpoint",
		Short: "Update One Private Endpoint for One Serverless Instance",
		Annotations: map[string]string{
			"output": template,
		},
		PreRunE: func(cmd *cobra.Command, args []string) error {
			return opts.PreRunE(
				opts.initClient(),
				opts.InitOutput(cmd.OutOrStdout(), template),
			)
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			return opts.Run(cmd.Context())
		},
	}
	cmd.Flags().StringVar(&opts.groupId, "groupId", "", `Unique 24-hexadecimal digit string that identifies your project. Use the [/groups](#tag/Projects/operation/listProjects) endpoint to retrieve all projects to which the authenticated user has access.

**NOTE**: Groups and projects are synonymous terms. Your group id is the same as your project id. For existing groups, your group/project id remains the same. The resource and corresponding endpoints use the term groups.`)
	cmd.Flags().StringVar(&opts.instanceName, "instanceName", "", `Human-readable label that identifies the serverless instance associated with the tenant endpoint that will be updated.`)
	cmd.Flags().StringVar(&opts.endpointId, "endpointId", "", `Unique 24-hexadecimal digit string that identifies the tenant endpoint which will be updated.`)

	_ = cmd.MarkFlagRequired("groupId")
	_ = cmd.MarkFlagRequired("instanceName")
	_ = cmd.MarkFlagRequired("endpointId")
	return cmd
}

func serverlessPrivateEndpointsBuilder() *cobra.Command {
	cmd := &cobra.Command{
		Use:   "serverlessPrivateEndpoints",
		Short: `Returns, adds, edits, and removes private endpoints for serverless instances. To learn more, see the Atlas Administration API tab on the following tutorial.`,
	}
	cmd.AddCommand(
		createServerlessPrivateEndpointBuilder(),
		deleteServerlessPrivateEndpointBuilder(),
		getServerlessPrivateEndpointBuilder(),
		listServerlessPrivateEndpointsBuilder(),
		updateServerlessPrivateEndpointBuilder(),
	)
	return cmd
}
