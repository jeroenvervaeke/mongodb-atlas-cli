// Copyright 2023 MongoDB Inc
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package generated

import (
	"context"

	"github.com/mongodb/mongodb-atlas-cli/internal/cli"
	"github.com/spf13/cobra"
	"go.mongodb.org/atlas-sdk/v20230201008/admin"
)

type downloadSharedClusterBackupOpts struct {
	cli.GlobalOpts
	cli.OutputOpts
	client      *admin.APIClient
	clusterName string
	groupId     string
}

func (opts *downloadSharedClusterBackupOpts) initClient() func() error {
	return func() error {
		var err error
		opts.client, err = newClientWithAuth()
		return err
	}
}

func (opts *downloadSharedClusterBackupOpts) Run(ctx context.Context) error {
	params := &admin.DownloadSharedClusterBackupApiParams{
		ClusterName: opts.clusterName,
		GroupId:     opts.groupId,
	}
	resp, _, err := opts.client.SharedTierSnapshotsApi.DownloadSharedClusterBackupWithParams(ctx, params).Execute()
	if err != nil {
		return err
	}

	return opts.Print(resp)
}

func downloadSharedClusterBackupBuilder() *cobra.Command {
	const template = "<<some template>>"

	opts := downloadSharedClusterBackupOpts{}
	cmd := &cobra.Command{
		Use:   "downloadSharedClusterBackup",
		Short: "Download One M2 or M5 Cluster Snapshot",
		Annotations: map[string]string{
			"output": template,
		},
		PreRunE: func(cmd *cobra.Command, args []string) error {
			return opts.PreRunE(
				opts.initClient(),
				opts.InitOutput(cmd.OutOrStdout(), template),
			)
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			return opts.Run(cmd.Context())
		},
	}
	cmd.Flags().StringVar(&opts.clusterName, "clusterName", "", `Human-readable label that identifies the cluster.`)
	cmd.Flags().StringVar(&opts.groupId, "groupId", "", `Unique 24-hexadecimal digit string that identifies your project. Use the [/groups](#tag/Projects/operation/listProjects) endpoint to retrieve all projects to which the authenticated user has access.

**NOTE**: Groups and projects are synonymous terms. Your group id is the same as your project id. For existing groups, your group/project id remains the same. The resource and corresponding endpoints use the term groups.`)

	cmd.Flags().StringVar(&opts.clusterName, "clusterName", "", `Human-readable label that identifies the source cluster.`)

	cmd.Flags().StringVar(&opts.deliveryType, "deliveryType", "", `Means by which this resource returns the snapshot to the requesting MongoDB Cloud user.`)

	cmd.Flags().StringVar(&opts.expirationDate, "expirationDate", "", `Date and time when the download link no longer works. This parameter expresses its value in the ISO 8601 timestamp format in UTC.`)

	cmd.Flags().StringVar(&opts.id, "id", "", `Unique 24-hexadecimal digit string that identifies the restore job.`)

	cmd.Flags().ArraySliceVar(&opts.links, "links", nil, `List of one or more Uniform Resource Locators (URLs) that point to API sub-resources, related API resources, or both. RFC 5988 outlines these relationships.`)

	cmd.Flags().StringVar(&opts.projectId, "projectId", "", `Unique 24-hexadecimal digit string that identifies the project from which the restore job originated.`)

	cmd.Flags().StringVar(&opts.restoreFinishedDate, "restoreFinishedDate", "", `Date and time when MongoDB Cloud completed writing this snapshot. MongoDB Cloud changes the status of the restore job to &#x60;CLOSED&#x60;. This parameter expresses its value in the ISO 8601 timestamp format in UTC.`)

	cmd.Flags().StringVar(&opts.restoreScheduledDate, "restoreScheduledDate", "", `Date and time when MongoDB Cloud will restore this snapshot. This parameter expresses its value in the ISO 8601 timestamp format in UTC.`)

	cmd.Flags().StringVar(&opts.snapshotFinishedDate, "snapshotFinishedDate", "", `Date and time when MongoDB Cloud completed writing this snapshot. This parameter expresses its value in the ISO 8601 timestamp format in UTC.`)

	cmd.Flags().StringVar(&opts.snapshotId, "snapshotId", "", `Unique 24-hexadecimal digit string that identifies the snapshot to restore.`)

	cmd.Flags().StringVar(&opts.snapshotUrl, "snapshotUrl", "", `Internet address from which you can download the compressed snapshot files. The resource returns this parameter when  &#x60;&quot;deliveryType&quot; : &quot;DOWNLOAD&quot;&#x60;.`)

	cmd.Flags().StringVar(&opts.status, "status", "", `Phase of the restore workflow for this job at the time this resource made this request.`)

	cmd.Flags().StringVar(&opts.targetDeploymentItemName, "targetDeploymentItemName", "", `Human-readable label that identifies the cluster on the target project to which you want to restore the snapshot. You can restore the snapshot to a cluster tier *M2* or greater.`)

	cmd.Flags().StringVar(&opts.targetProjectId, "targetProjectId", "", `Unique 24-hexadecimal digit string that identifies the project that contains the cluster to which you want to restore the snapshot.`)

	_ = cmd.MarkFlagRequired("clusterName")
	_ = cmd.MarkFlagRequired("groupId")
	return cmd
}

type getSharedClusterBackupOpts struct {
	cli.GlobalOpts
	cli.OutputOpts
	client      *admin.APIClient
	groupId     string
	clusterName string
	snapshotId  string
}

func (opts *getSharedClusterBackupOpts) initClient() func() error {
	return func() error {
		var err error
		opts.client, err = newClientWithAuth()
		return err
	}
}

func (opts *getSharedClusterBackupOpts) Run(ctx context.Context) error {
	params := &admin.GetSharedClusterBackupApiParams{
		GroupId:     opts.groupId,
		ClusterName: opts.clusterName,
		SnapshotId:  opts.snapshotId,
	}
	resp, _, err := opts.client.SharedTierSnapshotsApi.GetSharedClusterBackupWithParams(ctx, params).Execute()
	if err != nil {
		return err
	}

	return opts.Print(resp)
}

func getSharedClusterBackupBuilder() *cobra.Command {
	const template = "<<some template>>"

	opts := getSharedClusterBackupOpts{}
	cmd := &cobra.Command{
		Use:   "getSharedClusterBackup",
		Short: "Return One Snapshot for One M2 or M5 Cluster",
		Annotations: map[string]string{
			"output": template,
		},
		PreRunE: func(cmd *cobra.Command, args []string) error {
			return opts.PreRunE(
				opts.initClient(),
				opts.InitOutput(cmd.OutOrStdout(), template),
			)
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			return opts.Run(cmd.Context())
		},
	}
	cmd.Flags().StringVar(&opts.groupId, "groupId", "", `Unique 24-hexadecimal digit string that identifies your project. Use the [/groups](#tag/Projects/operation/listProjects) endpoint to retrieve all projects to which the authenticated user has access.

**NOTE**: Groups and projects are synonymous terms. Your group id is the same as your project id. For existing groups, your group/project id remains the same. The resource and corresponding endpoints use the term groups.`)
	cmd.Flags().StringVar(&opts.clusterName, "clusterName", "", `Human-readable label that identifies the cluster.`)
	cmd.Flags().StringVar(&opts.snapshotId, "snapshotId", "", `Unique 24-hexadecimal digit string that identifies the desired snapshot.`)

	_ = cmd.MarkFlagRequired("groupId")
	_ = cmd.MarkFlagRequired("clusterName")
	_ = cmd.MarkFlagRequired("snapshotId")
	return cmd
}

type listSharedClusterBackupsOpts struct {
	cli.GlobalOpts
	cli.OutputOpts
	client      *admin.APIClient
	groupId     string
	clusterName string
}

func (opts *listSharedClusterBackupsOpts) initClient() func() error {
	return func() error {
		var err error
		opts.client, err = newClientWithAuth()
		return err
	}
}

func (opts *listSharedClusterBackupsOpts) Run(ctx context.Context) error {
	params := &admin.ListSharedClusterBackupsApiParams{
		GroupId:     opts.groupId,
		ClusterName: opts.clusterName,
	}
	resp, _, err := opts.client.SharedTierSnapshotsApi.ListSharedClusterBackupsWithParams(ctx, params).Execute()
	if err != nil {
		return err
	}

	return opts.Print(resp)
}

func listSharedClusterBackupsBuilder() *cobra.Command {
	const template = "<<some template>>"

	opts := listSharedClusterBackupsOpts{}
	cmd := &cobra.Command{
		Use:   "listSharedClusterBackups",
		Short: "Return All Snapshots for One M2 or M5 Cluster",
		Annotations: map[string]string{
			"output": template,
		},
		PreRunE: func(cmd *cobra.Command, args []string) error {
			return opts.PreRunE(
				opts.initClient(),
				opts.InitOutput(cmd.OutOrStdout(), template),
			)
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			return opts.Run(cmd.Context())
		},
	}
	cmd.Flags().StringVar(&opts.groupId, "groupId", "", `Unique 24-hexadecimal digit string that identifies your project. Use the [/groups](#tag/Projects/operation/listProjects) endpoint to retrieve all projects to which the authenticated user has access.

**NOTE**: Groups and projects are synonymous terms. Your group id is the same as your project id. For existing groups, your group/project id remains the same. The resource and corresponding endpoints use the term groups.`)
	cmd.Flags().StringVar(&opts.clusterName, "clusterName", "", `Human-readable label that identifies the cluster.`)

	_ = cmd.MarkFlagRequired("groupId")
	_ = cmd.MarkFlagRequired("clusterName")
	return cmd
}

func sharedTierSnapshotsBuilder() *cobra.Command {
	cmd := &cobra.Command{
		Use:   "sharedTierSnapshots",
		Short: `Returns and requests to download shared-tier database deployment snapshots.`,
	}
	cmd.AddCommand(
		downloadSharedClusterBackupBuilder(),
		getSharedClusterBackupBuilder(),
		listSharedClusterBackupsBuilder(),
	)
	return cmd
}
